{"name":"PageInfo.java","path":"api/src/main/java/com/myhome/utils/PageInfo.java","content":{"structured":{"description":"A `PageInfo` class that contains information about a page of data. The class has four fields: currentPage, pageLimit, totalPages, and totalElements, which are initialized using a constructor. Additionally, a static method `of()` is provided to create a new `PageInfo` instance based on a `Pageable` object and a `Page` object. This summary provides an overview of the main features and functions of the code without including unnecessary details or bulletpoints.","items":[{"id":"cc5095f5-17e6-bfab-7342-59d97dd359d9","ancestors":[],"type":"function","description":"TODO","name":"PageInfo","code":"@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":19},{"id":"cb00d0f9-8ae3-51b9-624f-df4a877bd6fc","ancestors":["cc5095f5-17e6-bfab-7342-59d97dd359d9"],"type":"function","description":"creates a `PageInfo` object containing information about a given pageable and page, such as page number, size, total pages, and total elements.","params":[{"name":"pageable","type_name":"Pageable","description":"pagination information of the data being processed, providing the number of pages and the size of each page.\n\n* `getPageNumber()`: Returns the page number of the current page being processed.\n* `getPageSize()`: Returns the number of elements in a single page.\n* `getTotalPages()`: Returns the total number of pages available for processing.\n* `getTotalElements()`: Returns the total number of elements that can be processed across all pages.","complex_type":true},{"name":"page","type_name":"Page<?>","description":"current page being processed, providing the total number of elements on that page and the total number of pages in the overall result set.\n\n* `getPageNumber()` returns the page number that contains the element(s) being queried.\n* `getPageSize()` returns the number of elements per page in the query result.\n* `getTotalPages()` returns the total number of pages in the result set.\n* `getTotalElements()` returns the total number of elements in the result set.","complex_type":true}],"returns":{"type_name":"PageInfo","description":"a `PageInfo` object containing information about the current page of a paginated result set.\n\n* pageable.getPageNumber(): The number of the current page being displayed.\n* pageable.getPageSize(): The number of elements displayed on each page.\n* page.getTotalPages(): The total number of pages in the result set.\n* page.getTotalElements(): The total number of elements in the result set.","complex_type":true},"usage":{"language":"java","code":"Pageable pageable = new PageRequest(0, 10); // get the first 10 items\nPage<?> page = someService.getAllItems();\nPageInfo pageInfo = PageInfo.of(pageable, page);\n","description":""},"name":"of","code":"public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }","location":{"start":21,"insert":21,"offset":" ","indent":2},"item_type":"method","length":8}]}}}
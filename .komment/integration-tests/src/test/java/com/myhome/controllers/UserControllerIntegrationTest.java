{"name":"UserControllerIntegrationTest.java","path":"integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java","content":{"structured":{"description":"An integration test class for a user controller in a Spring Boot application. The test class uses Spring Boot Test and TestRestTemplate to send a POST request to the registration path and verify that the response status code is HTTP 201 Created, and the returned user object matches the input parameters. Additionally, the test verifies that the user ID returned in the response matches a user stored in the database.","items":[{"id":"eb772697-edfe-15ae-d740-45aaeaee5ba9","ancestors":[],"type":"function","description":"TODO","name":"UserControllerIntegrationTest","code":"@ExtendWith(SpringExtension.class)\n@SpringBootTest(\n    classes = MyHomeServiceApplication.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@TestInstance(TestInstance.Lifecycle.PER_METHOD)\nclass UserControllerIntegrationTest {\n\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n\n  @Value(\"${api.public.registration.url.path}\")\n  private String registrationPath;\n\n  @Autowired\n  private TestRestTemplate testRestTemplate;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}","location":{"start":23,"insert":23,"offset":" ","indent":0},"item_type":"class","length":53},{"id":"6112fd63-f1f0-fd8c-834a-d75d6fdc6b1d","ancestors":["eb772697-edfe-15ae-d740-45aaeaee5ba9"],"type":"function","description":"tests the successful creation of a new user through a REST API. It verifies that the response status code is `CREATED`, and that the returned user object matches the input parameters withigning fields other than the `userId`. Additionally, it checks if there is a corresponding user stored in the database with matching name and email.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity = testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n","description":"\nIn this test, we are testing if a user can be created successfully through the registration path. We first create a CreateUserRequest with the necessary fields and pass it to the testRestTemplate's postForEntity method. The response body is then extracted from the response entity and compared using the assertThat methods to ensure that the status code matches the expected value and the response body contains the correct values for the name and email of the user. Additionally, we check if a user with the same ID as the one returned in the response body exists in the database."},"name":"shouldSignUpSuccessful","code":"@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2},"item_type":"method","length":31}]}}}
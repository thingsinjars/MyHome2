[
  {
    "name": "HouseDetailResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/HouseDetailResponse.java",
    "content": {
      "structured": {
        "description": "A class called `HouseDetailResponse` that holds an instance of the `CommunityHouseDto` class, which contains information about a specific house. The `HouseDetailResponse` class is marked with multiple annotations: `@NoArgsConstructor`, `@AllArgsConstructor`, and `@Data`. These annotations indicate that the class should be constructed using either the no-args constructor or the all-args constructor, depending on the presence of the `@Data` annotation. Additionally, the class is marked with the `lombok` package, which provides a set of tools for simplifying and standardizing Java code.",
        "items": [
          {
            "id": "a6040477-4f32-9090-9045-da4e14038fde",
            "ancestors": [],
            "type": "function",
            "description": "from the given file represents a response containing a CommunityHouseDto object.\nFields:\n\t- house (CommunityHouseDto): in HouseDetailResponse contains CommunityHouseDto objects. \n\n",
            "name": "HouseDetailResponse",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\npublic class HouseDetailResponse {\n  private CommunityHouseDto house;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/SchedulePaymentResponse.java",
    "content": {
      "structured": {
        "description": "A `SchedulePaymentResponse` class with various attributes and constructors for handling payment-related data. The class uses Lombok, an automated programming tool, to generate getters and setters, as well as constructors with varying levels of arguments (no-args constructor or all-args constructor). The class includes fields for payment ID, charge amount, payment type, description, recurring payments, due date, admin ID, and member ID.",
        "items": [
          {
            "id": "8b8bc4d4-ca88-35ab-7841-453e8f54dd99",
            "ancestors": [],
            "type": "function",
            "description": "represents a response for scheduling payments, including payment ID, charge amount, payment type, description, recurring status, due date, and administrative and member IDs.\nFields:\n\t- paymentId (String): in the SchedulePaymentResponse class represents a unique identifier for a payment. \n\t- charge (BigDecimal): in the SchedulePaymentResponse class represents a monetary value. \n\t- type (String): represents the type of payment being scheduled, which could be one of several possibilities such as \"credit card\", \"bank transfer\", or \"other\". \n\t- description (String): in the SchedulePaymentResponse class likely represents a brief or concise textual explanation of the payment or charge being made, provided by the user or administrator. \n\t- recurring (boolean): in the SchedulePaymentResponse class indicates whether the payment is a one-time payment or a recurring payment. \n\t- dueDate (String): represents a date when a payment is expected to be made. \n\t- adminId (String): represents an identifier for the administrator who manages the payment schedule. \n\t- memberId (String): represents a unique identifier for a member associated with the payment schedule. \n\n",
            "name": "SchedulePaymentResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class SchedulePaymentResponse {\n  private String paymentId;\n  private BigDecimal charge;\n  private String type;\n  private String description;\n  private boolean recurring;\n  private String dueDate;\n  private String adminId;\n  private String memberId;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "Amenity.java",
    "path": "service/src/main/java/com/myhome/domain/Amenity.java",
    "content": {
      "structured": {
        "description": "An entity called `Amenity` and its associated database tables. The entity has fields for amenity ID, name, description, price, community, community house, and booking items. It also defines relationships with other entities through annotations such as `@ManyToOne` and `@OneToMany`. The `AmenityBookingItem` entity is not directly defined in the code snippet provided but is referenced in the `Amenity` entity through the `@OneToMany` annotation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "42e5629a-8136-c9bb-2e41-6d4eca4ab94a",
            "ancestors": [],
            "type": "function",
            "description": "represents a specific amenity available for booking at a CommunityHouse, with associated attributes such as ID, name, description, and price, as well as relationships with other entities like Community and BookingItems.\nFields:\n\t- amenityId (String): in the Amenity class represents a unique identifier for each amenity. \n\t- name (String): in the Amenity class represents a string attribute that contains the name of an amenity. \n\t- description (String): in the Amenity class represents a brief textual description of the amenity, likely used for informational purposes or to provide a concise summary of the amenity's purpose or features. \n\t- price (BigDecimal): represents a monetary value. \n\t- community (Community): in the Amenity class represents an association to a Community entity. \n\t- communityHouse (CommunityHouse): represents an association between an amenity and one or more community houses where the amenity can be booked for use. \n\t- bookingItems (Set<AmenityBookingItem>): is a collection of AmenityBookingItem objects linked to the amenity via the amenityId attribute, used for storing and managing bookings for the amenity. \n\n",
            "name": "Amenity",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"Amenity.community\",\n        attributeNodes = {\n            @NamedAttributeNode(\"community\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Amenity.bookingItems\",\n        attributeNodes = {\n            @NamedAttributeNode(\"bookingItems\"),\n        }\n    )\n})\n\npublic class Amenity extends BaseEntity {\n  @Column(nullable = false, unique = true)\n  private String amenityId;\n  @Column(nullable = false)\n  private String name;\n  @Column(nullable = false)\n  private String description;\n  @Column(nullable = false)\n  private BigDecimal price;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Community community;\n  @ManyToOne\n  private CommunityHouse communityHouse;\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"amenity\")\n  private Set<AmenityBookingItem> bookingItems = new HashSet<>();\n}",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 38
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeServiceApplication.java",
    "path": "service/src/main/java/com/myhome/MyHomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that uses the BCrypt password encryption algorithm to securely store and hash passwords. The `getPasswordEncoder()` method returns a `BCryptPasswordEncoder` instance, which is used for encrypting, hashing, and verifying passwords.",
        "diagram": "digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n",
        "items": [
          {
            "id": "98b37065-d657-ceb5-fc44-d2014e37974c",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that provides a `BCryptPasswordEncoder` instance for encrypting passwords using the BCrypt algorithm. This encoder is designed to handle strong password validation and is suitable for use in web applications.",
            "name": "MyHomeServiceApplication",
            "code": "@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class MyHomeServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }\n\n  /**\n   * returns a `BCryptPasswordEncoder` instance, which is used to encrypt passwords\n   * using the BCrypt algorithm.\n   * \n   * @returns a BCryptPasswordEncoder instance.\n   * \n   * The `BCryptPasswordEncoder` object represents a password encryption algorithm that\n   * uses the bcrypt hashing algorithm to securely store and hash passwords.\n   * It provides several methods for encrypting, hashing, and verifying passwords.\n   * The encoder is designed to handle strong password validation and is suitable for\n   * use in web applications.\n   */\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 25,
            "docLength": null
          },
          {
            "id": "632833e5-3094-e68c-da45-ea01cbbe5551",
            "ancestors": [
              "98b37065-d657-ceb5-fc44-d2014e37974c"
            ],
            "type": "function",
            "description": "runs the `MyHomeServiceApplication` class using the `SpringApplication.run()` method, allowing the application to start and execute its components.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the application when it is run.\n\n* Length: The length of the `args` array is specified as an integer value.\n* Elements: The elements of the `args` array are not explicitly mentioned.\n* Type: The type of the elements in the `args` array is inferred to be a String based on the parameter list of the `run` method.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationData.java",
    "path": "service/src/main/java/com/myhome/domain/AuthenticationData.java",
    "content": {
      "structured": {
        "description": "A class called AuthenticationData that contains two instance variables: jwtToken and userId. The Lombok getter and required args constructor annotations are used to automatically generate getter and constructor methods for these variables.",
        "items": [
          {
            "id": "abce26bd-f608-4884-4645-c9605a4a1f68",
            "ancestors": [],
            "type": "function",
            "description": "is used to store and represent authentication data for a user in a JSON Web Token (JWT) format, including the user's ID and a unique token for verifying their identity.\nFields:\n\t- jwtToken (String): represents a unique token issued to authenticated users by the system. \n\t- userId (String): in the AuthenticationData class represents a unique identifier for a user. \n\n",
            "name": "AuthenticationData",
            "code": "@Getter\n@RequiredArgsConstructor\npublic class AuthenticationData {\n  private final String jwtToken;\n  private final String userId;\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "BaseEntity.java",
    "path": "service/src/main/java/com/myhome/domain/BaseEntity.java",
    "content": {
      "structured": {
        "description": "A base class for all JPA entities, providing an ID field that is generated by the framework and cannot be directly accessed from outside the service layer. The class also implements Lombok's `@Data`, `@NoArgsConstructor`, `@AllArgsConstructor`, `@MappedSuperclass`, and `@EqualsAndHashCode` annotations to provide additional functionality.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e2123511-0184-46a4-e44c-2bc777ec8add",
            "ancestors": [],
            "type": "function",
            "description": "acts as a base class for all JPA Entities and provides an identity id field through its @Id annotation with GenerationType.IDENTITY strategy.\nFields:\n\t- id (Long): in the BaseEntity class is an automatically generated unique identifier assigned by the database using the IDENTITY strategy. \n\n",
            "name": "BaseEntity",
            "code": "@Data\n@NoArgsConstructor\n@AllArgsConstructor\n@MappedSuperclass\n@EqualsAndHashCode(callSuper = false)\npublic class BaseEntity implements Serializable {\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n}",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "Community.java",
    "path": "service/src/main/java/com/myhome/domain/Community.java",
    "content": {
      "structured": {
        "description": "An entity named `Community` that represents a valid user in a service. The entity has fields for `name`, `communityId`, and `district`. It also has many-to-many relationships with three other entities: `User`, `CommunityHouse`, and `Amenity`. The code uses packages such as Lombok and Java Persistence API (JPA) to define the entity and its relationships.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0c8b6744-fc7b-e3a1-814d-60c5daae1cbe",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in the service, with attributes for name, community ID, district, and set of admins, houses, and amenities.\nFields:\n\t- admins (Set<User>): a set of users who are administrators of the community, managed through a many-to-many relationship with the User entity.\n\t- houses (Set<CommunityHouse>): a set of houses associated with each community entity, where each house is linked to its corresponding community through an optional one-to-one relationship.\n\t- name (String): a string identifier for a specific community.\n\t- communityId (String): an identifier for a specific community.\n\t- district (String): a string value indicating the geographical area where the community is located.\n\t- amenities (Set<Amenity>): a set of Amenity objects related to the Community entity, where each Amenity object has a reference to the community it belongs to.\n\n",
            "fields": [
              {
                "name": "admins",
                "type_name": "Set<User>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "a set of users who are administrators of the community, managed through a many-to-many relationship with the User entity."
              },
              {
                "name": "houses",
                "type_name": "Set<CommunityHouse>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "a set of houses associated with each community entity, where each house is linked to its corresponding community through an optional one-to-one relationship."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "a string identifier for a specific community."
              },
              {
                "name": "communityId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "an identifier for a specific community."
              },
              {
                "name": "district",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "Community",
                "description": "a string value indicating the geographical area where the community is located."
              },
              {
                "name": "amenities",
                "type_name": "Set<Amenity>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "Community",
                "description": "a set of Amenity objects related to the Community entity, where each Amenity object has a reference to the community it belongs to."
              }
            ],
            "name": "Community",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"communityId\", \"name\", \"district\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"Community.amenities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"amenities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Community.admins\",\n        attributeNodes = {\n            @NamedAttributeNode(\"admins\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"Community.houses\",\n        attributeNodes = {\n            @NamedAttributeNode(\"houses\"),\n        }\n    )\n})\npublic class Community extends BaseEntity {\n  @ToString.Exclude\n  @ManyToMany(fetch = FetchType.LAZY)\n  private Set<User> admins = new HashSet<>();\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<CommunityHouse> houses = new HashSet<>();\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String communityId;\n  @Column(nullable = false)\n  private String district;\n  @ToString.Exclude\n  @OneToMany(fetch = FetchType.LAZY, mappedBy = \"community\", orphanRemoval = true)\n  private Set<Amenity> amenities = new HashSet<>();\n}",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 35,
                "end": 38
              }
            },
            "item_type": "class",
            "length": 43
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouse.java",
    "path": "service/src/main/java/com/myhome/domain/CommunityHouse.java",
    "content": {
      "structured": {
        "description": "An entity named `CommunityHouse` that represents a community house with a unique identifier and various attributes such as name and community. It also defines relationships with other entities, including `HouseMembers` and `Amenities`. The code uses Lombok to simplify the creation of getters, setters, and constructors, and it utilizes JPA annotations to define the entity and its relationships.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e17d0144-8a67-c3aa-da49-354276b2a070",
            "ancestors": [],
            "type": "function",
            "description": "represents a house within a community with a unique ID and name, and has many members and amenities associated with it.\nFields:\n\t- community (Community): in the CommunityHouse class represents an object of type Community. \n\t- name (String): in the CommunityHouse class represents a unique identifier for the house. \n\t- houseId (String): in the CommunityHouse class represents a unique identifier for each household within the community. \n\t- houseMembers (Set<HouseMember>): represents a set of entities that are related to the CommunityHouse entity through a many-to-one relationship, where each member represents an individual who resides in the house. \n\t- amenities (Set<Amenity>): contains a set of Amenity objects representing additional features or services available at the Community House. \n\n",
            "name": "CommunityHouse",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\n@EqualsAndHashCode(of = {\"houseId\", \"name\"}, callSuper = false)\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"CommunityHouse.community\",\n        attributeNodes = {\n            @NamedAttributeNode(\"community\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"CommunityHouse.houseMembers\",\n        attributeNodes = {\n            @NamedAttributeNode(\"houseMembers\"),\n        }\n    )\n})\npublic class CommunityHouse extends BaseEntity {\n  @With\n  @ManyToOne(fetch = FetchType.LAZY)\n  private Community community;\n  @With\n  @Column(nullable = false)\n  private String name;\n  @With\n  @Column(unique = true, nullable = false)\n  private String houseId;\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<HouseMember> houseMembers = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY)\n  private Set<Amenity> amenities = new HashSet<>();\n}",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 35
          }
        ]
      }
    }
  },
  {
    "name": "HouseMember.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMember.java",
    "content": {
      "structured": {
        "description": "a class called `HouseMember` that represents a member of a house. The class has several attributes and methods, including:\n\n* `memberId`: a unique identifier for the member (nullable and with a default value)\n* `houseMemberDocument`: a document associated with the member (one-to-one mapping with a join column)\n* `name`: the member's name (nullable)\n* `communityHouse`: the house that the member belongs to (optional, but if provided, it must be a instance of `CommunityHouse`)\n\nThe class also implements various annotations and interfaces, including `@Entity`, `@AllArgsConstructor`, `@NoArgsConstructor`, `@Data`, `@EqualsAndHashCode`, `@With`, `@Column`, `@OneToOne`, and `@ManyToOne`. These annotations and interfaces provide additional functionality and metadata for the class, such as automated database generation and validation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "62af27fb-0081-a79d-2f46-281a2d02c913",
            "ancestors": [],
            "type": "function",
            "description": "represents an individual member of a house with unique identification, name, and relationship to a community house through its memberId.\nFields:\n\t- memberId (String): a unique identifier for each house member.\n\t- houseMemberDocument (HouseMemberDocument): a document related to the member's membership in a community house.\n\t- name (String): a string value of a person's name associated with a particular community house.\n\t- communityHouse (CommunityHouse): a reference to a CommunityHouse object.\n\n",
            "fields": [
              {
                "name": "memberId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "a unique identifier for each house member."
              },
              {
                "name": "houseMemberDocument",
                "type_name": "HouseMemberDocument",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "a document related to the member's membership in a community house."
              },
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "a string value of a person's name associated with a particular community house."
              },
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "value": null,
                "constant": false,
                "class_name": "HouseMember",
                "description": "a reference to a CommunityHouse object."
              }
            ],
            "name": "HouseMember",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, exclude = \"communityHouse\")\npublic class HouseMember extends BaseEntity {\n\n  @With\n  @Column(nullable = false, unique = true)\n  private String memberId;\n\n  @OneToOne(orphanRemoval = true)\n  @JoinColumn(name = \"document_id\")\n  private HouseMemberDocument houseMemberDocument;\n\n  @With\n  @Column(nullable = false)\n  private String name;\n\n  @ManyToOne\n  private CommunityHouse communityHouse;\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 22
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocument.java",
    "path": "service/src/main/java/com/myhome/domain/HouseMemberDocument.java",
    "content": {
      "structured": {
        "description": "An entity class called HouseMemberDocument that extends the BaseEntity class. The class has two fields: documentFilename and documentContent, which are both annotated with Lombok annotations. The documentFilename field is a unique column in the database, while the documentContent field is a lob (Large Object Bag) that can store binary data.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "81615659-5b8c-8093-ec42-286e2de7e448",
            "ancestors": [],
            "type": "function",
            "description": "represents a document associated with a house member, containing a unique filename and binary content.\nFields:\n\t- documentFilename (String): in the HouseMemberDocument class represents a unique filename for a document belonging to a member of a house. \n\t- documentContent (byte[]): in the HouseMemberDocument class represents an array of bytes containing the contents of a document, with a default size of zero bytes. \n\n",
            "name": "HouseMemberDocument",
            "code": "@Entity\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(of = {\"documentFilename\"}, callSuper = false)\npublic class HouseMemberDocument extends BaseEntity {\n\n  @Column(unique = true)\n  private String documentFilename;\n\n  @Lob\n  @Column\n  private byte[] documentContent = new byte[0];\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 14
          }
        ]
      }
    }
  },
  {
    "name": "PasswordActionType.java",
    "path": "service/src/main/java/com/myhome/domain/PasswordActionType.java",
    "content": {
      "structured": {
        "description": "An enumeration named `PasswordActionType` with two values: `FORGOT` and `RESET`.",
        "items": []
      }
    }
  },
  {
    "name": "Payment.java",
    "path": "service/src/main/java/com/myhome/domain/Payment.java",
    "content": {
      "structured": {
        "description": "An entity called `Payment` that represents a payment made by a user to a service. The entity has attributes for the payment ID, charge amount, payment type, description, recurrence status, and due date. It also has relationships with other entities, including a user who administers the payment and a member of the house who is associated with the payment. The code uses Lombok, Jackson, and JPA annotations to define the entity and its relationships.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "b7819ea7-5246-9fbe-ee46-aa06e0e9473d",
            "ancestors": [],
            "type": "function",
            "description": "represents an entity for a payment made by a User to a HouseMember, with fields for payment ID, charge amount, type, description, recurring status, and due date, as well as relationships with the admin and member entities.\nFields:\n\t- paymentId (String): in the Payment entity represents a unique identifier for each payment made by a user. \n\t- charge (BigDecimal): in the Payment entity represents an amount of money to be paid by the user or member. \n\t- type (String): in the Payment entity represents the category of the payment, such as \"electricity bill\", \"house rent\", or \"water charge\". \n\t- description (String): in the Payment entity represents a brief textual description of the payment, possibly including information about the type of charge or the date it was due. \n\t- recurring (boolean): in the Payment entity indicates whether the payment is recurring or not. \n\t- dueDate (LocalDate): represents the date on which the payment is due to be made, represented in the format 'yyyy-MM-dd'. \n\t- admin (User): in the Payment class represents the user who made the payment. \n\t- member (HouseMember): in the Payment class represents an association between a payment and a house member. \n\n",
            "name": "Payment",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false)\n@Entity\npublic class Payment extends BaseEntity {\n  @Column(unique = true, nullable = false)\n  private String paymentId;\n  @Column(nullable = false)\n  private BigDecimal charge;\n  @Column(nullable = false)\n  private String type;\n  @Column(nullable = false)\n  private String description;\n  @Column(nullable = false)\n  private boolean recurring;\n  @JsonFormat(pattern = \"yyyy-MM-dd\")\n  private LocalDate dueDate;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private User admin;\n  @ManyToOne(fetch = FetchType.LAZY)\n  private HouseMember member;\n}",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 23
          }
        ]
      }
    }
  },
  {
    "name": "SecurityToken.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityToken.java",
    "content": {
      "structured": {
        "description": "A `SecurityToken` class representing an authentication token for a user. The class has fields for token type, token value, creation date, expiry date, and whether the token has been used. It also has a `ManyToOne` relationship with a `User` object representing the owner of the token. The `SecurityToken` class uses Lombok, an automated programming tool, to generate getters and setters for its fields.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e2135aca-489f-62a6-cc4b-9d99ea3a4abf",
            "ancestors": [],
            "type": "function",
            "description": "represents a secure token with a unique identifier, creation and expiry dates, and an owner, with the ability to mark it as used or unused.\nFields:\n\t- tokenType (SecurityTokenType): represents an enumerated type indicating the category of security token, such as \"access token\" or \"refresh token\". \n\t- token (String): is an instance of the SecurityTokenType enumeration type, representing one of several types of security tokens, along with a unique token string and metadata such as creation and expiry dates, and a boolean flag indicating whether it has been used. \n\t- creationDate (LocalDate): represents the date when the security token was created. \n\t- expiryDate (LocalDate): represents the date after which the SecurityToken becomes invalid or no longer usable. \n\t- isUsed (boolean): in the SecurityToken class indicates whether a token has been used or not. \n\t- tokenOwner (User): in the SecurityToken class represents a user who owns or has access to the security token in question. \n\n",
            "name": "SecurityToken",
            "code": "@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ToString(exclude = {\"tokenOwner\"})\npublic class SecurityToken extends BaseEntity {\n  @Column(nullable = false)\n  @Enumerated(EnumType.STRING)\n  private SecurityTokenType tokenType;\n  @Column(nullable = false, unique = true)\n  private String token;\n  @Column(nullable = false)\n  private LocalDate creationDate;\n  @Column(nullable = false)\n  private LocalDate expiryDate;\n  private boolean isUsed;\n  @ManyToOne\n  private User tokenOwner;\n}",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 19
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenType.java",
    "path": "service/src/main/java/com/myhome/domain/SecurityTokenType.java",
    "content": {
      "structured": {
        "description": "An enum that represents different types of security tokens. The enum has two members: `RESET` and `EMAIL_CONFIRM`.",
        "items": []
      }
    }
  },
  {
    "name": "User.java",
    "path": "service/src/main/java/com/myhome/domain/User.java",
    "content": {
      "structured": {
        "description": "An entity called `User` that represents a valid user in a service. The `User` class has fields for name, userId, email, and encrypted password, as well as getters and setters for each field. It also has many-to-many relationships with `Community` and `SecurityToken`.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.BaseEntity Pages: 1 -->\n<svg width=\"531pt\" height=\"371pt\"\n viewBox=\"0.00 0.00 531.00 371.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 367)\">\n<title>com.myhome.domain.BaseEntity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"289,-191 110,-191 110,-172 289,-172 289,-191\"/>\n<text text-anchor=\"middle\" x=\"199.5\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Amenity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-363 340,-363 340,-344 508,-344 508,-363\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-351\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-200.41C227.9,-233.41 269.35,-301.17 325,-334.5 331.47,-338.37 338.57,-341.48 345.9,-343.97\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"213.09,-198.58 205.34,-191.36 206.89,-201.84 213.09,-198.58\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1AmenityBookingItem.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"508,-325.5 340,-325.5 340,-295.5 508,-295.5 508,-325.5\"/>\n<text text-anchor=\"start\" x=\"348\" y=\"-313.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-302.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingItem</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-198.45C237.46,-221.83 280.13,-263.69 325,-286.5 331.79,-289.95 339.11,-292.93 346.57,-295.48\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"218.15,-196.01 208.81,-191.01 212.99,-200.74 218.15,-196.01\"/>\n</a>\n</g>\n</g>\n<!-- Node5 -->\n<g id=\"Node000005\" class=\"node\">\n<title>Node5</title>\n<g id=\"a_Node000005\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Community.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-277 332,-277 332,-258 516,-258 516,-277\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-265\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node5 -->\n<g id=\"edge4_Node000001_Node000005\" class=\"edge\">\n<title>Node1&#45;&gt;Node5</title>\n<g id=\"a_edge4_Node000001_Node000005\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-196.49C247.51,-211.78 287.48,-235.12 325,-248.5 335.77,-252.34 347.51,-255.47 358.99,-257.99\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"225.09,-193.5 214.78,-191.06 221.31,-199.4 225.09,-193.5\"/>\n</a>\n</g>\n</g>\n<!-- Node6 -->\n<g id=\"Node000006\" class=\"node\">\n<title>Node6</title>\n<g id=\"a_Node000006\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1CommunityHouse.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"516,-239.5 332,-239.5 332,-209.5 516,-209.5 516,-239.5\"/>\n<text text-anchor=\"start\" x=\"340\" y=\"-227.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-216.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node6 -->\n<g id=\"edge5_Node000001_Node000006\" class=\"edge\">\n<title>Node1&#45;&gt;Node6</title>\n<g id=\"a_edge5_Node000001_Node000006\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-193.01C286.24,-198.07 317.36,-204.08 345.35,-209.49\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"260.36,-189.5 249.88,-191.04 259.03,-196.38 260.36,-189.5\"/>\n</a>\n</g>\n</g>\n<!-- Node7 -->\n<g id=\"Node000007\" class=\"node\">\n<title>Node7</title>\n<g id=\"a_Node000007\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMember.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-191 325,-191 325,-172 523,-172 523,-191\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node7 -->\n<g id=\"edge6_Node000001_Node000007\" class=\"edge\">\n<title>Node1&#45;&gt;Node7</title>\n<g id=\"a_edge6_Node000001_Node000007\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M299.35,-181.5C307.82,-181.5 316.38,-181.5 324.85,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"299.08,-178 289.08,-181.5 299.08,-185 299.08,-178\"/>\n</a>\n</g>\n</g>\n<!-- Node8 -->\n<g id=\"Node000008\" class=\"node\">\n<title>Node8</title>\n<g id=\"a_Node000008\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1HouseMemberDocument.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"523,-153.5 325,-153.5 325,-123.5 523,-123.5 523,-153.5\"/>\n<text text-anchor=\"start\" x=\"333\" y=\"-141.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.HouseMember</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-130.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node8 -->\n<g id=\"edge7_Node000001_Node000008\" class=\"edge\">\n<title>Node1&#45;&gt;Node8</title>\n<g id=\"a_edge7_Node000001_Node000008\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M260.03,-169.99C286.24,-164.93 317.36,-158.92 345.35,-153.51\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"259.03,-166.62 249.88,-171.96 260.36,-173.5 259.03,-166.62\"/>\n</a>\n</g>\n</g>\n<!-- Node9 -->\n<g id=\"Node000009\" class=\"node\">\n<title>Node9</title>\n<g id=\"a_Node000009\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1Payment.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"509,-105 339,-105 339,-86 509,-86 509,-105\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-93\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Payment</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node9 -->\n<g id=\"edge8_Node000001_Node000009\" class=\"edge\">\n<title>Node1&#45;&gt;Node9</title>\n<g id=\"a_edge8_Node000001_Node000009\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M223.26,-166.51C247.51,-151.22 287.48,-127.88 325,-114.5 335.77,-110.66 347.51,-107.53 358.99,-105.01\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"221.31,-163.6 214.78,-171.94 225.09,-169.5 221.31,-163.6\"/>\n</a>\n</g>\n</g>\n<!-- Node10 -->\n<g id=\"Node000010\" class=\"node\">\n<title>Node10</title>\n<g id=\"a_Node000010\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1SecurityToken.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"507.5,-67.5 340.5,-67.5 340.5,-37.5 507.5,-37.5 507.5,-67.5\"/>\n<text text-anchor=\"start\" x=\"348.5\" y=\"-55.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"424\" y=\"-44.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node10 -->\n<g id=\"edge9_Node000001_Node000010\" class=\"edge\">\n<title>Node1&#45;&gt;Node10</title>\n<g id=\"a_edge9_Node000001_Node000010\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M215.63,-164.55C237.46,-141.17 280.13,-99.31 325,-76.5 331.79,-73.05 339.11,-70.07 346.57,-67.52\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"212.99,-162.26 208.81,-171.99 218.15,-166.99 212.99,-162.26\"/>\n</a>\n</g>\n</g>\n<!-- Node11 -->\n<g id=\"Node000011\" class=\"node\">\n<title>Node11</title>\n<g id=\"a_Node000011\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1User.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"498.5,-19 349.5,-19 349.5,0 498.5,0 498.5,-19\"/>\n<text text-anchor=\"middle\" x=\"424\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node11 -->\n<g id=\"edge10_Node000001_Node000011\" class=\"edge\">\n<title>Node1&#45;&gt;Node11</title>\n<g id=\"a_edge10_Node000001_Node000011\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M210.09,-162.59C227.9,-129.59 269.35,-61.83 325,-28.5 332.51,-24 340.87,-20.54 349.45,-17.88\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"206.89,-161.16 205.34,-171.64 213.09,-164.42 206.89,-161.16\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"74,-191 0,-191 0,-172 74,-172 74,-191\"/>\n<text text-anchor=\"middle\" x=\"37\" y=\"-179\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M84.03,-181.5C92.2,-181.5 100.96,-181.5 109.86,-181.5\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.02,-178 74.02,-181.5 84.02,-185 84.02,-178\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "259fc334-545f-54ac-6442-b5a67b212ddd",
            "ancestors": [],
            "type": "function",
            "description": "represents a valid user in the service, with attributes for name, userId, email, and encrypted password, as well as relationships for communities and userTokens.\nFields:\n\t- name (String): a user's username or handle within an application or service.\n\t- userId (String): a unique identifier for a valid user in the service.\n\t- email (String): a string value that identifies the user's email address.\n\t- emailConfirmed (boolean): a boolean flag indicating whether an email address associated with the user has been confirmed.\n\t- encryptedPassword (String): an encrypted password for the user.\n\t- communities (Set<Community>): a set of Community objects related to the User entity through a many-to-many relationship.\n\t- userTokens (Set<SecurityToken>): a set of SecurityToken objects associated with the User entity, which can be retrieved through the mappedBy attribute \"tokenOwner\".\n\n",
            "fields": [
              {
                "name": "name",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "a user's username or handle within an application or service."
              },
              {
                "name": "userId",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "a unique identifier for a valid user in the service."
              },
              {
                "name": "email",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "a string value that identifies the user's email address."
              },
              {
                "name": "emailConfirmed",
                "type_name": "boolean",
                "value": "false",
                "constant": false,
                "class_name": "User",
                "description": "a boolean flag indicating whether an email address associated with the user has been confirmed."
              },
              {
                "name": "encryptedPassword",
                "type_name": "String",
                "value": null,
                "constant": false,
                "class_name": "User",
                "description": "an encrypted password for the user."
              },
              {
                "name": "communities",
                "type_name": "Set<Community>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "a set of Community objects related to the User entity through a many-to-many relationship."
              },
              {
                "name": "userTokens",
                "type_name": "Set<SecurityToken>",
                "value": "new HashSet<>()",
                "constant": false,
                "class_name": "User",
                "description": "a set of SecurityToken objects associated with the User entity, which can be retrieved through the mappedBy attribute \"tokenOwner\"."
              }
            ],
            "name": "User",
            "code": "@AllArgsConstructor\n@Getter\n@NoArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false, of = {\"userId\", \"email\"})\n@Entity\n@With\n@NamedEntityGraphs({\n    @NamedEntityGraph(\n        name = \"User.communities\",\n        attributeNodes = {\n            @NamedAttributeNode(\"communities\"),\n        }\n    ),\n    @NamedEntityGraph(\n        name = \"User.userTokens\",\n        attributeNodes = {\n            @NamedAttributeNode(\"userTokens\"),\n        }\n    )\n})\npublic class User extends BaseEntity {\n  @Column(nullable = false)\n  private String name;\n  @Column(unique = true, nullable = false)\n  private String userId;\n  @Column(unique = true, nullable = false)\n  private String email;\n  @Column(nullable = false)\n  private boolean emailConfirmed = false;\n  @Column(nullable = false)\n  private String encryptedPassword;\n  @ManyToMany(mappedBy = \"admins\", fetch = FetchType.LAZY)\n  private Set<Community> communities = new HashSet<>();\n  @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = \"tokenOwner\")\n  private Set<SecurityToken> userTokens = new HashSet<>();\n}",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 39,
                "end": 42
              }
            },
            "item_type": "class",
            "length": 37
          }
        ]
      }
    }
  },
  {
    "name": "AmenityBookingItemRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityBookingItemRepository.java",
    "content": {
      "structured": {
        "description": "An interface for an AmenityBookingItemRepository, which is a Spring Data JPA repository for the AmenityBookingItem entity. The interface provides methods for finding entities by their ID and for retrieving an Optional<AmenityBookingItem> object representing the entity or an empty Optional if it does not exist.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.AmenityBookingItemRepository Pages: 1 -->\n<svg width=\"184pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 184.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.AmenityBookingItemRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"174.5,-30 1.5,-30 1.5,0 174.5,0 174.5,-30\"/>\n<text text-anchor=\"start\" x=\"9.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenityBookingItemRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"176,-96 0,-96 0,-66 176,-66 176,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; AmenityBooking</text>\n<text text-anchor=\"middle\" x=\"88\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Item, String &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M88,-55.54C88,-46.96 88,-37.61 88,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"84.5,-55.8 88,-65.8 91.5,-55.8 84.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "814cd7c4-83df-bdb5-de4f-62e5872bc58a",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with the database to find amenity booking items by their IDs.",
            "name": "AmenityBookingItemRepository",
            "code": "public interface AmenityBookingItemRepository extends JpaRepository<AmenityBookingItem, String> {\n  Optional<AmenityBookingItem> findByAmenityBookingItemId(String amenityBookingItemId);\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "AmenityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/AmenityRepository.java",
    "content": {
      "structured": {
        "description": "An interface for an AmenityRepository, which is a Spring Data JPA repository for the Amenity entity. The interface provides two methods: findByAmenityIdWithCommunity and findByAmenityId. The methods use EntityGraph and Query annotations to define the query structure and parameters. The EntityGraph annotation defines a graph query that retrieves the amenity entity with its community data, while the Query annotation defines a simple query that retrieves the amenity entity by its ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "862e08c3-5e31-7c8d-a848-dc9acbe5c5a3",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for retrieving Optional<Amenity> objects representing amenities based on their amenityId, using Spring Data JPA queries and entity graphs.",
            "name": "AmenityRepository",
            "code": "public interface AmenityRepository extends JpaRepository<Amenity, Long> {\n\n  @Query(\"from Amenity amenity where amenity.amenityId = :amenityId\")\n  @EntityGraph(value = \"Amenity.community\")\n  Optional<Amenity> findByAmenityIdWithCommunity(@Param(\"amenityId\") String amenityId);\n\n  Optional<Amenity> findByAmenityId(String amenityId);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityHouseRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a CommunityHouseRepository, which extends the Spring Data JPA's `PagingAndSortingRepository` interface. It provides various methods for querying and manipulating data related to CommunityHouses, including finding specific CommunityHouses by houseId, retrieving all CommunityHouses in a pageable format with a specified communityId, deleting CommunityHouses by houseId, and more. The code utilizes the Spring Data JPA's `EntityGraph` annotation to define entity graphs for CommunityHouse and its associated entities.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "f4a10595-b9f7-d38f-3b46-41b4acc1d59b",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with the CommunityHouse entity in a Spring Data JPA environment, including finding and deleting individual CommunityHouses or communities of CommunityHouses by their respective IDs.",
            "name": "CommunityHouseRepository",
            "code": "@Repository\npublic interface CommunityHouseRepository extends PagingAndSortingRepository<CommunityHouse, Long> {\n\n  Optional<CommunityHouse> findByHouseId(String houseId);\n\n  @Query(\"from CommunityHouse house where house.houseId = :houseId\")\n  @EntityGraph(value = \"CommunityHouse.community\")\n  Optional<CommunityHouse> findByHouseIdWithCommunity(@Param(\"houseId\") String houseId);\n\n  @Query(\"from CommunityHouse house where house.houseId = :houseId\")\n  @EntityGraph(value = \"CommunityHouse.houseMembers\")\n  Optional<CommunityHouse> findByHouseIdWithHouseMembers(@Param(\"houseId\") String houseId);\n\n  @EntityGraph(value = \"CommunityHouse.community\")\n  List<CommunityHouse> findAllByCommunity_CommunityId(String communityId, Pageable pageable);\n\n  void deleteByHouseId(String houseId);\n}",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 18
          }
        ]
      }
    }
  },
  {
    "name": "CommunityRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/CommunityRepository.java",
    "content": {
      "structured": {
        "description": "A CommunityRepository interface that extends the PagingAndSortingRepository interface and provides methods for querying communities in various ways. The findByCommunityId method returns an optional Community object when passed a community ID. The findByCommunityIdWithHouses, findByCommunityIdWithAdmins, and findByCommunityIdWithAmenities methods return an optional Community object with related houses, admins, or amenities respectively when passed a community ID. The existsByCommunityId method returns a boolean indicating whether a community with the given ID exists.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Community Pages: 1 -->\n<svg width=\"192pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 192.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-19 0,-19 0,0 184,0 184,-19\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-74 2.5,-74 2.5,-55 181.5,-55 181.5,-74\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-44.66C92,-35.93 92,-25.99 92,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-44.75 92,-54.75 95.5,-44.75 88.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-129 55,-129 55,-110 129,-110 129,-129\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-99.66C92,-90.93 92,-80.99 92,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-99.75 92,-109.75 95.5,-99.75 88.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "23fd49ec-e5f7-9390-3142-3efa8f6f4d36",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and manipulating Community objects in a Spring Data JPA environment.",
            "name": "CommunityRepository",
            "code": "@Repository\npublic interface CommunityRepository extends PagingAndSortingRepository<Community, Long> {\n\n  Optional<Community> findByCommunityId(String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.houses\")\n  Optional<Community> findByCommunityIdWithHouses(@Param(\"communityId\") String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.admins\")\n  Optional<Community> findByCommunityIdWithAdmins(@Param(\"communityId\") String communityId);\n\n  @Query(\"from Community community where community.communityId = :communityId\")\n  @EntityGraph(value = \"Community.amenities\")\n  Optional<Community> findByCommunityIdWithAmenities(@Param(\"communityId\") String communityId);\n\n  boolean existsByCommunityId(String communityId);\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 19
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberDocumentRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a HouseMemberDocumentRepository, which is a spring data JPA repository for handling House Member Documents. The interface extends the JpaRepository interface and includes methods for interacting with House Member Documents, such as finding all documents, finding a single document by ID, saving or updating a document, and deleting a document.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.HouseMemberDocumentRepository Pages: 1 -->\n<svg width=\"199pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 199.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.HouseMemberDocumentRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"191,-30 0,-30 0,0 191,0 191,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"95.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberDocumentRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-96 12,-96 12,-66 179,-66 179,-96\"/>\n<text text-anchor=\"start\" x=\"20\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; HouseMember</text>\n<text text-anchor=\"middle\" x=\"95.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Document, Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M95.5,-55.54C95.5,-46.96 95.5,-37.61 95.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"92,-55.8 95.5,-65.8 99,-55.8 92,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "f0075a46-ae76-e1a5-484f-b7d4117aaeaa",
            "ancestors": [],
            "type": "function",
            "description": "defines a JpaRepository interface for managing HouseMemberDocuments using Spring Data JPA.",
            "name": "HouseMemberDocumentRepository",
            "code": "public interface HouseMemberDocumentRepository extends JpaRepository<HouseMemberDocument, Long> {\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 2
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/HouseMemberRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a HouseMemberRepository, which is a Spring Data repository for handling HouseMembers. The interface provides methods for finding and manipulating HouseMembers, including:\n\n* `findByMemberId(String memberId):` Finds a House Member by their ID.\n* `findAllByCommunityHouse_HouseId(String houseId, Pageable pageable):` Finds all House Members belonging to a specific house.\n* `findAllByCommunityHouse_Community_Admins_UserId(String userId, Pageable pageable):` Finds all House Members who are admins for a specific community and have the specified user ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.HouseMemberRepository Pages: 1 -->\n<svg width=\"185pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 185.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.HouseMemberRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"162.5,-30 14.5,-30 14.5,0 162.5,0 162.5,-30\"/>\n<text text-anchor=\"start\" x=\"22.5\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"88.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"177,-96 0,-96 0,-66 177,-66 177,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CrudRepository&lt; HouseMember,</text>\n<text text-anchor=\"middle\" x=\"88.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M88.5,-55.54C88.5,-46.96 88.5,-37.61 88.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"85,-55.8 88.5,-65.8 92,-55.8 85,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "87c129b9-d74d-1284-4342-9d0994da9435",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for querying and manipulating HouseMembers within a Spring Data repository context.",
            "name": "HouseMemberRepository",
            "code": "public interface HouseMemberRepository extends CrudRepository<HouseMember, Long> {\n  Optional<HouseMember> findByMemberId(String memberId);\n\n  List<HouseMember> findAllByCommunityHouse_HouseId(String houseId, Pageable pageable);\n\n  List<HouseMember> findAllByCommunityHouse_Community_Admins_UserId(String userId,\n      Pageable pageable);\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "PaymentRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/PaymentRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a PaymentRepository, which extends the Spring Data JPA repository functionality to handle Payment objects. The interface provides two methods: findByPaymentId, which returns an Optional<Payment> instance for a given payment ID; and deleteByPaymentId, which deletes a Payment object based on its ID.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.PaymentRepository Pages: 1 -->\n<svg width=\"156pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 156.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.PaymentRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"148,-30 0,-30 0,0 148,0 148,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"74\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"144.5,-96 3.5,-96 3.5,-66 144.5,-66 144.5,-96\"/>\n<text text-anchor=\"start\" x=\"11.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; Payment,</text>\n<text text-anchor=\"middle\" x=\"74\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M74,-55.54C74,-46.96 74,-37.61 74,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"70.5,-55.8 74,-65.8 77.5,-55.8 70.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e790b8d4-5314-8e88-1e40-3c53f2b210cb",
            "ancestors": [],
            "type": "function",
            "description": "defines a set of methods for interacting with payments in a database using Spring Data JPA.",
            "name": "PaymentRepository",
            "code": "public interface PaymentRepository extends JpaRepository<Payment, Long> {\n  Optional<Payment> findByPaymentId(String paymentId);\n\n  void deleteByPaymentId(String paymentId);\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "SecurityTokenRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/SecurityTokenRepository.java",
    "content": {
      "structured": {
        "description": "An interface for a SecurityTokenRepository, which is a custom repository class that extends the Spring Data JPA's JpaRepository interface. The interface specifies the methods required by JpaRepository, including findById, save, and delete. Additionally, it imports SecurityToken and Long, which are used to represent security tokens and their IDs respectively in the code.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.repositories.SecurityTokenRepository Pages: 1 -->\n<svg width=\"174pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 174.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.repositories.SecurityTokenRepository</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"157,-30 9,-30 9,0 157,0 157,-30\"/>\n<text text-anchor=\"start\" x=\"17\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.repositories.</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SecurityTokenRepository</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"166,-96 0,-96 0,-66 166,-66 166,-96\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">JpaRepository&lt; SecurityToken,</text>\n<text text-anchor=\"middle\" x=\"83\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\"> Long &gt;</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M83,-55.54C83,-46.96 83,-37.61 83,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"79.5,-55.8 83,-65.8 86.5,-55.8 79.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e508ed3b-a263-1083-2b41-ab6d7eec73a7",
            "ancestors": [],
            "type": "function",
            "description": "extends the JpaRepository interface and provides a way to interact with SecurityTokens in a Spring Data JPA environment.",
            "name": "SecurityTokenRepository",
            "code": "public interface SecurityTokenRepository extends JpaRepository<SecurityToken, Long> {\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 2
          }
        ]
      }
    }
  },
  {
    "name": "UserRepository.java",
    "path": "service/src/main/java/com/myhome/repositories/UserRepository.java",
    "content": {
      "structured": {
        "description": "Various methods for querying and manipulating data in a `User` entity. The `findByEmail()` method finds a user by their email address, while the `findByUserId()` method finds a user by their user ID. The `findByUserIdWithCommunities()` and `findByUserIdWithTokens()` methods find users by their user ID and include related communities or tokens in the results, respectively. The `findAllByCommunities_CommunityId()` method queries the User entity for all users associated with a specific community ID, using pageable.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "6806363e-86ea-0682-5640-6de36753efdd",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for interacting with Users in a Spring Data JPA environment, including finding users by email or user ID, and querying users based on community IDs.",
            "name": "UserRepository",
            "code": "@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n  User findByEmail(String email);\n\n  Optional<User> findByUserId(String userId);\n\n  @Query(\"from User user where user.userId = :userId\")\n  @EntityGraph(value = \"User.communities\")\n  Optional<User> findByUserIdWithCommunities(@Param(\"userId\") String userId);\n\n  @Query(\"from User user where user.userId = :userId\")\n  @EntityGraph(value = \"User.userTokens\")\n  Optional<User> findByUserIdWithTokens(@Param(\"userId\") String userId);\n\n  @Query(\"from User user where user.email = :email\")\n  @EntityGraph(value = \"User.userTokens\")\n  Optional<User> findByEmailWithTokens(@Param(\"email\") String email);\n\n  List<User> findAllByCommunities_CommunityId(String communityId, Pageable pageable);\n}",
            "location": {
              "start": 29,
              "insert": 29,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 21
          }
        ]
      }
    }
  },
  {
    "name": "AppUserDetailsService.java",
    "path": "service/src/main/java/com/myhome/security/AppUserDetailsService.java",
    "content": {
      "structured": {
        "description": "an custom `UserDetailsService` implementation for a Spring Security system, responsible for loading user details by username. The service uses a repository and mapper to retrieve a `com.myhome.domain.User` object from a database based on the provided username, and then converts it to a `User` object using a mapper. If the user is not found in the database, a `UsernameNotFoundException` is thrown. Additionally, the service provides a method for retrieving user details as a `UserDto`.",
        "items": [
          {
            "id": "9f86275a-3256-0bbf-8944-261ef2fc765b",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "AppUserDetailsService",
            "code": "@Service\n@RequiredArgsConstructor\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 31
          },
          {
            "id": "6565215f-ad15-ccb1-944e-7e957937d64f",
            "ancestors": [
              "9f86275a-3256-0bbf-8944-261ef2fc765b"
            ],
            "type": "function",
            "description": "loads a user by their username, retrieving the user from the repository and returning a `User` object with the email address, encrypted password, and other properties set to true.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "username for which the UserDetails object is to be loaded.\n\n* `email`: The user's email address.\n* `encryptedPassword`: The encrypted password for the user.\n* `isAdmin`: A boolean value indicating whether the user is an administrator or not.\n* `isActive`: A boolean value indicating whether the user is active or not.\n* `isAccountNonExpired`: A boolean value indicating whether the user's account has not expired.\n* `isPasswordNonExpired`: A boolean value indicating whether the user's password is non-expired.\n* `accountLocked`: A boolean value indicating whether the user's account is locked.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "instance",
              "description": "a `UserDetails` object representing the user with the provided username.\n\n* `Email`: The email address of the user.\n* `EncryptedPassword`: The encrypted password for the user.\n* `IsAdmin`: A boolean indicating whether the user is an administrator or not.\n* `IsEnabled`: A boolean indicating whether the user is enabled or not.\n* `IsAccountNonExpired`: A boolean indicating whether the user's account is non-expired or not.\n* `IsPasswordNonExpired`: A boolean indicating whether the user's password is non-expired or not.\n* `Collections emptyList`: An empty list of objects, which is used to represent an empty collection.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n",
              "description": "\nThe above code would be used to create a UserDetails instance from the username provided. The method would first call findByEmail on the userRepository and check if the returned value is null. If it is, then the exception would be thrown as no user with the given username was found in the repository. Otherwise, the User constructor is called using the email and encrypted password of the user found in the repository to create a new UserDetails instance."
            },
            "name": "loadUserByUsername",
            "code": "@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "c2966ca9-f9e9-9198-fa4e-c74158545c6b",
            "ancestors": [
              "9f86275a-3256-0bbf-8944-261ef2fc765b"
            ],
            "type": "function",
            "description": "retrieves a `User` entity from the repository based on the provided username, maps it to a `UserDto`, and returns the mapped result.",
            "params": [
              {
                "name": "username",
                "type_name": "String",
                "description": "email address of the user for which details are being requested.\n\n* `username`: This parameter represents a string value passed as an argument to the function.\n* `userRepository.findByEmail(username)`: This method call retrieves a `com.myhome.domain.User` object from the user repository based on the provided `username`.\n* `userMapper.userToUserDto(user)`: This method call converts the retrieved `com.myhome.domain.User` object into a `UserDto` object, which is then returned as the function's output.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the details of the user with the specified username.\n\n* The function returns a `UserDto` object, which represents a user in the application.\n* The `User` object is retrieved from the `userRepository` using the `findByEmail` method, passing in the `username` parameter. If the user is not found, a `UsernameNotFoundException` is thrown.\n* The `UserMapper` class is used to map the `User` object to a `UserDto` object, which includes only the relevant attributes for the application.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n",
              "description": ""
            },
            "name": "getUserDetailsByUsername",
            "code": "public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom authentication filter called CommunityAuthorizationFilter that extends the BasicAuthenticationFilter. The filter checks if the user is an administrator of a community based on a unique identifier in the request URI. If the user is not an admin, it returns a HTTP status code of UNAUTHORIZED. The filter also calls the superclass's doFilterInternal method to continue the authentication process.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "311abc8b-4bf4-3482-cf43-211452f983ff",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CommunityAuthorizationFilter",
            "code": "public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n    private final CommunityService communityService;\n    private final String uuidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n    private final Pattern addAdminRequestPattern = Pattern.compile(\"/communities/\" + uuidPattern + \"/admins\");\n\n\n    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n                                        CommunityService communityService) {\n        super(authenticationManager);\n        this.communityService = communityService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n\n    private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }\n}",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 48
          },
          {
            "id": "c1ed2da9-3fb2-3495-4249-d9ae31d25109",
            "ancestors": [
              "311abc8b-4bf4-3482-cf43-211452f983ff"
            ],
            "type": "function",
            "description": "filters incoming HTTP requests based on a pattern and user authentication. If the URL matches the pattern and the user is not an admin, it sets the response status to SC_UNAUTHORIZED and returns. Otherwise, it delegates to the super method for further filtering.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request received by the filter.\n\n* `getRequestURI()` returns the request URI, which is the path of the requested resource.\n* `matcher` refers to an instance of `Matcher`, which is used to match the URL pattern of the request against a regular expression.\n* `find()` method of the `Matcher` object returns `true` if the URL matches the pattern, otherwise it returns `false`.\n* `isUserCommunityAdmin(request)` is a method that checks whether the current user is an administrator of a user community. If the method returns `false`, the response status code is set to `HttpServletResponse.SC_UNAUTHORIZED`.\n* `super.doFilterInternal(request, response, chain)` calls the superclass's implementation of the `doFilterInternal` method, which handles the actual filtering of the request.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HttpServletResponse object that contains information about the HTTP request and is used to send the response back to the client.\n\n* `response`: A reference to the HttpServletResponse object that represents the response sent to the client.\n* `request`: A reference to the HttpServletRequest object that represents the request received from the client.\n* `chain`: A reference to the FilterChain object that represents the chain of filters that have been applied to the request.\n\nThe function performs an internal filter operation on the request and response objects, and then passes the request to the next filter in the chain for further processing.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "FilterChain that needs to be processed by the overridden doFilterInternal method.\n\n* `request`: The incoming HTTP request object.\n* `response`: The HTTP response object.\n* `chain`: The FilterChain object representing the chain of filters to be executed.\n* `isUserCommunityAdmin`: A boolean value indicating whether the user is an admin of a community or not.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n        \n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n        \n        super.doFilterInternal(request, response, chain);\n    }\n}\n",
              "description": "\nThis method is used to filter HTTP requests based on a pattern match for the URL and whether the user is an admin of the community they are trying to add an admin to. The method first creates a Matcher object using the request URI and the compiled pattern from the addAdminRequestPattern field. If the pattern matches, it then checks if the user is an admin of the community by calling the isUserCommunityAdmin method. If the user is not an admin, the response status is set to unauthorized. Finally, the superclass' doFilterInternal method is called to continue processing the request.\n\nThe input parameters are as follows:\n* 'request', a HttpServletRequest object representing the incoming HTTP request.\n* 'response', a HttpServletResponse object representing the outgoing HTTP response.\n* 'chain', an instance of FilterChain, which represents the filter chain that this filter is part of.\n\nThe return value is void, as the method modifies the response directly and does not return any data."
            },
            "name": "doFilterInternal",
            "code": "@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "14571122-23d2-5987-ec44-18dc2fb6432c",
            "ancestors": [
              "311abc8b-4bf4-3482-cf43-211452f983ff"
            ],
            "type": "function",
            "description": "determines if a user is a community admin based on their user ID and the community ID in the request URL. It retrieves the list of community admins from the service, filters out non-matching users, and returns whether the user is a community admin or not.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that triggered the function execution and provides the community ID from the request URI.\n\n* `request`: An instance of `HttpServletRequest`, representing an HTTP request made to the server.\n* `getRequestURI()`: Returns the string representation of the request URI, which contains the path and query parameters of the request.\n* `split()`: Splits the request URI into a array of strings using the specified separator.\n* `[]`: Extracts the second element of the array, which represents the community ID in the function's context.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the current user is an administrator of a specific community.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "import javax.servlet.http.HttpServletRequest;\n\n// ...\n\npublic void someMethod(HttpServletRequest request) {\n    // ...\n    boolean isUserCommunityAdmin = isUserCommunityAdmin(request);\n    if (isUserCommunityAdmin) {\n        // Do something as the user is a community admin\n    } else {\n        // Do something else since the user is not a community admin\n    }\n}\n",
              "description": ""
            },
            "name": "isUserCommunityAdmin",
            "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }",
            "location": {
              "start": 45,
              "insert": 45,
              "offset": " ",
              "indent": 4
            },
            "item_type": "method",
            "length": 21
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom filter called MyHomeAuthorizationFilter that extends the BasicAuthenticationFilter from Spring Security. The filter checks for an authentication token in the HTTP request header and decodes it using the AppJwtEncoderDecoder class. If the token is valid, it sets the authentication token using the getAuthentication method and passes the request to the chain of filters.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.MyHomeAuthorizationFilter Pages: 1 -->\n<svg width=\"180pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 180.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.MyHomeAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"172,-30 0,-30 0,0 172,0 172,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.MyHome</text>\n<text text-anchor=\"middle\" x=\"86\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"155.5,-85 16.5,-85 16.5,-66 155.5,-66 155.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86,-55.65C86,-47.36 86,-37.78 86,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"82.5,-55.87 86,-65.87 89.5,-55.87 82.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e48c4612-edf8-f9a2-2a4f-30000adc8669",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "MyHomeAuthorizationFilter",
            "code": "public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  public MyHomeAuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment,\n      AppJwtEncoderDecoder appJwtEncoderDecoder) {\n    super(authenticationManager);\n    this.environment = environment;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 48
          },
          {
            "id": "e1bc13e9-01bc-f8ab-b347-76aec270293b",
            "ancestors": [
              "e48c4612-edf8-f9a2-2a4f-30000adc8669"
            ],
            "type": "function",
            "description": "filters incoming HTTP requests based on an authorization token found in the request header. If the token is present and does not start with a prefix specified in environment variables, it proceeds to the next stage of filtering. Otherwise, it sets an authentication token using getAuthentication() and then proceeds to the next stage of filtering.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that is being processed by the filter.\n\n* `authHeaderName`: String property that represents the name of the HTTP header field containing the authentication token.\n* `authHeaderPrefix`: String property that represents the prefix of the authentication token in the HTTP header field.\n* `authHeader`: String property that contains the value of the authentication token in the HTTP header field, which may or may not start with the specified prefix.\n* `request`: The original HTTP request object, which is deserialized and passed through the filter chain for further processing.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "response object that is being filtered by the chain of filters in the `doFilterInternal()` method.\n\n* `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, which provides information about the HTTP request and response, including headers, status codes, and other metadata.\n* `IOException IOException`: This is a subclass of `Throwable` that represents an error occurring during input/output operations, such as network connections or file I/O.\n* `ServletException ServletException`: This is a subclass of `Throwable` that represents an error occurring during the processing of an HTTP request by a servlet container, typically related to handling HTTP requests and responses.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "3rd party filter chain that the current filter will execute, allowing the current filter to perform additional processing before the next filter in the chain.\n\n* `request`: The original HTTP request object that triggered the filter chain execution.\n* `response`: The HTTP response object that the filter chain is processing.\n* `FilterChain`: An instance of the `FilterChain` interface, representing the sequence of filters that need to be executed for this request.\n* `getAuthentication()`: A method that retrieves an authentication token from the `request` object using the specified `authHeaderName` and `authHeaderPrefix`.\n* `SecurityContextHolder`: A class that provides a mechanism for storing and retrieving security-related information, including the current authentication token.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "import javax.servlet.*;\nimport javax.servlet.http.*;\n\npublic class ExampleServlet extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        // Get the authorization header from the request\n        String authHeader = request.getHeader(\"Authorization\");\n        \n        // Check if the authorization header is present and starts with \"Bearer\"\n        if (authHeader != null && authHeader.startsWith(\"Bearer\")) {\n            // Extract the token from the header\n            String token = authHeader.substring(7);\n            \n            // Use the token to authenticate the user\n            UsernamePasswordAuthenticationToken authentication = getAuthentication(token);\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        }\n        \n        // Call the next filter in the chain\n        chain.doFilter(request, response);\n    }\n}\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }",
            "location": {
              "start": 47,
              "insert": 47,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "684e7024-47b8-139b-d34d-18a3eb1ddc3f",
            "ancestors": [
              "e48c4612-edf8-f9a2-2a4f-30000adc8669"
            ],
            "type": "function",
            "description": "retrieves an authentication token from a request header and decodes it to obtain a user ID. It then creates a `UsernamePasswordAuthenticationToken` instance with the user ID and no credentials.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request that is being processed and provides the authorization token header value.\n\n* `getHeader()` method is called on the `HttpServletRequest` object to retrieve an HTTP header value. The property name returned by this method is specified as an environment property (`\"authorization.token.header.name\"`).\n* The retrieved header value is stored in a variable named `authHeader`.\n* A substring of the `authHeader` value is extracted using string manipulation, specifically replacing a prefix specified by another environment property (`\"authorization.token.header.prefix\"`). This results in a shorter token value.\n* The decoded JWT token contained within the `authHeader` value is retrieved using an instance of the `appJwtEncoderDecoder` class and the `decode()` method.\n* The `Jwt` object returned by this method contains a `userId` property, which is then used to create a new `UsernamePasswordAuthenticationToken` instance. This token has no credentials (i.e., an empty list ofPrincipal and Credentials).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UsernamePasswordAuthenticationToken",
              "description": "a `UsernamePasswordAuthenticationToken` instance containing the user ID and an empty list of roles.\n\n* `usernamePasswordAuthenticationToken`: This is an instance of the `UsernamePasswordAuthenticationToken` class, which represents a user authentication token containing the user ID and a password.\n* `userID`: This property is of type `Long`, representing the unique identifier of the user who made the request.\n* `password`: This property is of type `String`, representing the password associated with the user ID.\n* `authorizationHeader`: This property is of type `String`, representing the authorization header received in the HTTP request.\n* `tokenSecret`: This property is of type `String`, representing the secret key used to decode the JWT token.\n\nOverall, the `getAuthentication` function returns a user authentication token containing the user ID and password, which can be used for authentication purposes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@PostMapping(\"/login\")\npublic ResponseEntity<String> login(@RequestBody User user) {\n    String token = getAuthentication(user).getToken(); //token returned from JWT encoder\n    return new ResponseEntity<>(token, HttpStatus.OK);\n}\n",
              "description": ""
            },
            "name": "getAuthentication",
            "code": "private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }",
            "location": {
              "start": 64,
              "insert": 64,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          }
        ]
      }
    }
  },
  {
    "name": "WebSecurity.java",
    "path": "service/src/main/java/com/myhome/security/WebSecurity.java",
    "content": {
      "structured": {
        "description": "A WebSecurity configuration class for Spring Security in a Spring Boot application. It sets up authentication and authorization filters, configures HTTP security settings, and defines an user details service and password encoder. The code also enables web security and requires the necessary dependencies to function correctly.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.Community</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"162,-85 23,-85 23,-66 162,-66 162,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "5b47360e-e706-409f-464c-57a4fd233d6f",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "WebSecurity",
            "code": "@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n  private final UserDetailsService userDetailsService;\n  private final CommunityService communityService;\n  private final PasswordEncoder passwordEncoder;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }\n\n  private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}",
            "location": {
              "start": 36,
              "insert": 36,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 53
          },
          {
            "id": "5aa51da1-dec6-21a9-1942-ac84bdd31d68",
            "ancestors": [
              "5b47360e-e706-409f-464c-57a4fd233d6f"
            ],
            "type": "function",
            "description": "sets up security features for an API, disabling CORS and CSFR, and enforcing stateful session management. It also adds filters to authorize requests based on specific URLs and HTTP methods, and enables authenticated access to the API.",
            "params": [
              {
                "name": "http",
                "type_name": "HttpSecurity",
                "description": "HTTP security configuration object, which is used to configure various security features such as CORS, CSFR, session management, and authorization rules for different URL paths.\n\n* `cors()` - Enables Cross-Origin Resource Sharing (CORS) functionality.\n* `csrf()`. disable() - Disables Cross-Site Request Forgery (CSRF) protection.\n* `headers().frameOptions().disable()` - Disables the Frame option for HTTP headers.\n* `sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)` - Sets the session creation policy to stateless, which means that no sessions will be created.\n* `addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class)` - Adds a filter after the community filter.\n* `authorizeRequests()` - Authorizes requests based on various matchers and allows or denies them accordingly. The matchers include:\n\t+ `antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))` - Matches URLs with the given path.\n\t+ `permitAll()` - Allows all requests without any restrictions.\n\t+ `antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))` - Matches URLs with the given path.\n\t+ `permitAll()` - Allows all requests without any restrictions.\n\t+ `antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))` - Matches POST requests to the given URL.\n\t+ `permitAll()` - Allows all POST requests without any restrictions.\n\t+ `antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))` - Matches POST requests to the given URL.\n\t+ `permitAll()` - Allows all POST requests without any restrictions.\n\t+ `antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))` - Matches OPTIONS requests to the given URL.\n\t+ `permitAll()` - Allows all OPTIONS requests without any restrictions.\n\t+ `antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))` - Matches GET requests to the given URL.\n\t+ `permitAll()` - Allows all GET requests without any restrictions.\n\t+ `antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))` - Matches GET requests to the given URL.\n\t+ `permitAll()` - Allows all GET requests without any restrictions.\n\t+ `antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))` - Matches POST requests to the given URL.\n\t+ `permitAll()` - Allows all POST requests without any restrictions.\n\t+ `/swagger/<any>` - Matches any Swagger request.\n\t+ `<any>` - Matches any other request.\n* `addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment, appJwtEncoderDecoder))` - Adds a filter to authorize requests based on the JWT encoder/decoder.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // Disable CORS and CSRF\n    http.cors().disable();\n    http.csrf().disable();\n    \n    // Disable frame options header\n    http.headers().frameOptions().disable();\n    \n    // Set session creation policy to stateless\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    \n    // Add community authorization filter after MyHomeAuthorizationFilter\n    Filter communityFilter = getCommunityFilter();\n    http.addFilterAfter(communityFilter, MyHomeAuthorizationFilter.class);\n    \n    // Authenticate all requests and permit all requests to public endpoints\n    http.authorizeRequests()\n        .antMatchers(\"/api/public/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated();\n  }\n",
              "description": ""
            },
            "name": "configure",
            "code": "@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 33
          },
          {
            "id": "e1770e19-94c1-5b9f-f847-6e7bbb9d640e",
            "ancestors": [
              "5b47360e-e706-409f-464c-57a4fd233d6f"
            ],
            "type": "function",
            "description": "creates a `CommunityAuthorizationFilter` instance, using the `authenticationManager()` and `communityService` objects provided as parameters. This filter will likely restrict access to certain community-related resources based on user authentication.",
            "params": [],
            "returns": {
              "type_name": "Filter",
              "description": "a `Filter` object implementing community authorization logic.\n\n* The `getCommunityFilter` function returns an instance of the `Filter` class.\n* The `Filter` object is constructed using the `AuthenticationManager` and `CommunityService` objects as parameters.\n* The `AuthenticationManager` object represents the authentication mechanism used to authenticate users, while the `CommunityService` object manages the communities in the system.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class MyHomeController {\n    @Autowired\n    private WebSecurity webSecurity;\n\n    @GetMapping(\"/api/myhome\")\n    public String home(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        // get the community filter from the web security configuration\n        Filter communityFilter = webSecurity.getCommunityFilter();\n        \n        // do something with the community filter\n        return \"Hello World!\";\n    }\n}\n",
              "description": ""
            },
            "name": "getCommunityFilter",
            "code": "private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }",
            "location": {
              "start": 80,
              "insert": 80,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 3
          },
          {
            "id": "c25ee986-dc43-1196-004d-d4a16e15d8fd",
            "ancestors": [
              "5b47360e-e706-409f-464c-57a4fd233d6f"
            ],
            "type": "function",
            "description": "configures authentication settings by providing a user details service and password encoder to an AuthenticationManagerBuilder instance.",
            "params": [
              {
                "name": "auth",
                "type_name": "AuthenticationManagerBuilder",
                "description": "AuthenticationManagerBuilder object, which is being configured by setting the userDetailsService and passwordEncoder properties.\n\n* `userDetailsService`: This is an instance of `UserDetailsService`, which provides methods for retrieving and manipulating user details.\n* `passwordEncoder`: This is an instance of `PasswordEncoder`, which encodes passwords securely.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n",
              "description": "\nHere, the `configure` method is a part of WebSecurity class which is an extension of WebSecurityConfigurerAdapter. This method is used to configure the authentication manager using the provided AuthenticationManagerBuilder instance. The example code provides an instance of UserDetailsService as the user details service and passwordEncoder as the password encoder, allowing the authentication manager to use these services for user details and password encoding."
            },
            "name": "configure",
            "code": "@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }",
            "location": {
              "start": 84,
              "insert": 84,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          }
        ]
      }
    }
  },
  {
    "name": "CommunityAuthorizationFilter.java",
    "path": "service/src/main/java/com/myhome/security/filters/CommunityAuthorizationFilter.java",
    "content": {
      "structured": {
        "description": "A custom filter in Spring Security called CommunityAuthorizationFilter that checks if a user has admin privileges in a specific community before allowing access to amenities related to that community. The filter uses a pattern to match URLs that indicate an attempt to add amenities, and it checks if the user who made the request is an administrator of the community by querying the CommunityService class. If the user is not an administrator, the filter returns a FORBIDDEN response.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.filters.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.filters.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.filters.</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunityAuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"151.5,-85 12.5,-85 12.5,-66 151.5,-66 151.5,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "0cefdd2a-8f97-a3bc-4d49-e1c7b2fd3904",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CommunityAuthorizationFilter",
            "code": "public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n  private final CommunityService communityService;\n  private static final String UUID_PATTERN =\n      \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n  private static final Pattern ADD_AMENITY_REQUEST_PATTERN =\n      Pattern.compile(\"/communities/\" + UUID_PATTERN + \"/amenities\");\n\n  public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n      CommunityService communityService) {\n    super(authenticationManager);\n    this.communityService = communityService;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }\n\n  private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }\n}",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 40
          },
          {
            "id": "6514fc1f-ab0a-6e90-5b40-6097dd6ef203",
            "ancestors": [
              "0cefdd2a-8f97-a3bc-4d49-e1c7b2fd3904"
            ],
            "type": "function",
            "description": "filters HTTP requests based on a pattern and user authentication. If the request URI matches the pattern and the user is not an administrator in a specific community, it returns a FORBIDDEN status code. Otherwise, it delegates to the superclass's `doFilterInternal` method.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HTTP request being filtered.\n\n* `getRequestURI()` - returns the requested resource URI\n* `matcher()` - returns a `Matcher` object that matches the request URI pattern\n* `find()` - checks if the match is successful\n* `isUserCommunityAdmin()` - a method to check if the user is an admin of a community, without providing its implementation details.",
                "complex_type": true
              },
              {
                "name": "response",
                "type_name": "HttpServletResponse",
                "description": "HttpServletResponse object that is used to send the filtered response back to the client.\n\n1. `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, which represents the HTTP response object for the current request. It contains various attributes related to the response, such as status code, headers, and buffered content.\n2. `chain`: This is a reference to the `FilterChain` chain associated with the current request. The `doFilterInternal` method is called recursively by each filter in the chain until the last filter is reached, at which point the response is generated and returned.\n3. `request`: This is an instance of the `HttpServletRequest` class, representing the HTTP request object for the current request. It contains various attributes related to the request, such as method, URL, headers, and parameters.\n4. `isUserCommunityAdmin(request)`: This is a method that takes the `request` object as an argument and returns a boolean value indicating whether the user is an administrator of a community. If the method returns `true`, then the response status code is set to `HttpServletResponse.SC_FORBIDDEN`.\n\nThe properties of the `response` object are:\n\n1. `statusCode`: This is an integer representing the HTTP status code for the current response. It can take on values between 100 and 599, with 200 being the most common value.\n2. `headers`: This is a collection of headers associated with the current response. Each header represents a key-value pair, where the key is the header name and the value is the corresponding header value.\n3. `bufferedContent`: This is a buffer that contains the content of the current response, which can be either a string or a stream. The buffered content is generated by the `doFilterInternal` method if the response status code is not `HttpServletResponse.SC_OK`.",
                "complex_type": true
              },
              {
                "name": "chain",
                "type_name": "FilterChain",
                "description": "3rd party filter chain that the current filter is a part of, allowing the current filter to execute its logic and pass the request on to the next filter in the chain.\n\n* `HttpServletRequest request`: The current HTTP request being processed by the filter.\n* `HttpServletResponse response`: The current HTTP response being generated by the filter.\n* `FilterChain chain`: An instance of the `FilterChain` interface, representing the chain of filters that should be applied to the incoming request.\n* `IOException`, `ServletException`: Exceptions that can be thrown by the filter, either due to an error in the filter's execution or as a result of an error in the filtering process.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "public void someMethod(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n    ...\n    filterChain.doFilterInternal(request, response);\n}\n",
              "description": ""
            },
            "name": "doFilterInternal",
            "code": "@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n\n    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());\n\n    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n      response.setStatus(HttpServletResponse.SC_FORBIDDEN);\n      return;\n    }\n\n    super.doFilterInternal(request, response, chain);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "3f85dfc1-e258-bd84-134b-7ce09bc3477b",
            "ancestors": [
              "0cefdd2a-8f97-a3bc-4d49-e1c7b2fd3904"
            ],
            "type": "function",
            "description": "checks if a user is an admin of a community based on their ID and the community ID in the request.",
            "params": [
              {
                "name": "request",
                "type_name": "HttpServletRequest",
                "description": "HttpServletRequest object, which contains information about the current request, such as the request method, URL, and headers.\n\n* `getRequestURI()` returns the URI of the request, which contains information about the request's path and query parameters.\n* `split()` is used to split the URI into an array of substrings, with the second element in the array being the community ID.\n* `null` is passed as the second argument to `findCommunityAdminsById()` to indicate that the community ID should be fetched from the request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "OptionalBoolean",
              "description": "a boolean value indicating whether the currently authenticated user is an admin of a specific community.\n\n* The function returns a boolean value indicating whether the current user is a community admin for a given community ID.\n* The input parameters include the HTTP request object and a community ID extracted from the request URL.\n* The function first retrieves the user principal (userId) from the SecurityContextHolder, which represents the authenticated user.\n* Then it queries the community service to find the list of admins for the given community ID.\n* The function then maps the list of admins to their user IDs and filters out the current user ID using the `filter()` method.\n* Finally, the function uses the `findFirst()` method to retrieve the first matching admin user ID, which indicates whether the current user is a community admin or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String communityId = \"12345678-1234-1234-1234-1234567890ab\";\nString userId = \"00000000-0000-0000-0000-000000000000\";\nHttpServletRequest request = new HttpServletRequest(\"http://localhost:3000/communities/\" + communityId + \"/amenities\");\nrequest.getRequestURI().split(\"/\")[2];\n",
              "description": ""
            },
            "name": "isUserCommunityAdmin",
            "code": "private boolean isUserCommunityAdmin(HttpServletRequest request) {\n    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n    String communityId = request.getRequestURI().split(\"/\")[2];\n\n    return communityService.findCommunityAdminsById(communityId, null)\n        .flatMap(admins -> admins.stream()\n            .map(User::getUserId)\n            .filter(userId::equals)\n            .findFirst()\n        )\n        .isPresent();\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AppJwt.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwt.java",
    "content": {
      "structured": {
        "description": "A class called `AppJwt` that represents a JWT in an application. The class has two fields: `userId`, which is a string representing the user ID, and `expiration`, which is a `LocalDateTime` representing the expiration time of the JWT. These fields are generated using the Lombok Builder, Getter, and ToString annotations, which simplify the creation and usage of these fields in the code.",
        "items": [
          {
            "id": "8eec8953-bcd8-db8f-2d41-e33441ce8ef0",
            "ancestors": [],
            "type": "function",
            "description": "in Java represents a JWT token used for authentication in an application, containing user ID and expiration date information.\nFields:\n\t- userId (String): in the AppJwt class represents a unique identifier for a specific user within the application. \n\t- expiration (LocalDateTime): represents the date and time after which the JWT token is no longer valid or usable. \n\n",
            "name": "AppJwt",
            "code": "@Builder\n@ToString\n@Getter\npublic class AppJwt {\n  private final String userId;\n  private final LocalDateTime expiration;\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AppJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/AppJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An interface `AppJwtEncoderDecoder` that provides methods for encoding and decoding JWTs. The interface specifies two methods: `decode(String encodedJwt, String secret)` for decoding a JWT, and `encode(AppJwt jwt, String secret)` for encoding a JWT.",
        "items": [
          {
            "id": "d0647d84-aa48-2ea8-dc41-e452efb2f1f5",
            "ancestors": [],
            "type": "function",
            "description": "provides a logic to encode and decode Application's JWT.",
            "name": "AppJwtEncoderDecoder",
            "code": "public interface AppJwtEncoderDecoder {\n  AppJwt decode(String encodedJwt, String secret);\n\n  String encode(AppJwt jwt, String secret);\n}",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "NoSecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An implementation of `AppJwtEncoderDecoder`, a class that encodes and decodes JSON Web Tokens (JWTs). The concrete implementation, called `NoSecretJwtEncoderDecoder`, is only meant for testing purposes and does not use any secrets. It takes the encoded JWT and the secret as input, and returns the decoded JWT or the encoded JWT, respectively. The class uses Spring's `@Profile` annotation to enable it only in testing environments.",
        "items": [
          {
            "id": "d6fe1aea-be31-8a8b-a04b-ef19f3bdcce6",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "NoSecretJwtEncoderDecoder",
            "code": "@Profile(\"test\")\n@Component\npublic class NoSecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n  private static final String SEPARATOR = \"\\\\+\";\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }\n}",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 14
          },
          {
            "id": "9de0269a-c607-8791-0d4e-a682cb1571e6",
            "ancestors": [
              "d6fe1aea-be31-8a8b-a04b-ef19f3bdcce6"
            ],
            "type": "function",
            "description": "decodes a JSON Web Token (JWT) and returns an instance of the `AppJwt` class with the extracted values: user ID, expiration time.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that needs to be decoded and converted into an instance of `AppJwt`.\n\n* `encodedJwt`: A string containing the encrypted JWT token, which is split into two parts using the provided separator `SEPARATOR`.\n* `secret`: The secret key used for decoding the JWT token.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used to verify the digital signature of the JWT, which is necessary for authenticating the user and determining whether the JWT has been tampered with.\n\nThe `encodedJwt` parameter is split into an array of strings using the `SEPARATOR` constant.\n\nThe first element in the array represents the user ID, which is used to construct the `AppJwt` object's `userId` field.\n\nThe second element in the array represents the expiration time of the JWT, which is converted to a `LocalDateTime` object using the `parse()` method. This object is then used to set the `expiration` field of the `AppJwt` object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt` containing the user ID and expiration date extracted from the encoded JWT.\n\n* `AppJwt`: This is the class being modified to decode an JWT token.\n* `builder()`: This is a method used to create a new instance of the `AppJwt` class with default values.\n* `userId(strings[0])`: The `userId` property is set to the first element of the array `strings`, which is obtained by splitting the encoded JWT token using the `SEPARATOR`.\n* `expiration(LocalDateTime.parse(strings[1]))`: The `expiration` property is set to the second element of the array `strings`, which is a string in the format `YYYY-MM-DDTHH:mm:ssZ`. This value represents the expiration time of the JWT token.\n* `build()`: This method creates a new instance of the `AppJwt` class with the properties set using the `builder()` method.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(\"\\\\+\");\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n}\n",
              "description": "\n\nExample inputs for ('encodedJwt', 'String') are:\n"
            },
            "name": "decode",
            "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "bdb780ab-2244-e0a1-e540-e761e91636d2",
            "ancestors": [
              "d6fe1aea-be31-8a8b-a04b-ef19f3bdcce6"
            ],
            "type": "function",
            "description": "takes a `AppJwt` object and a secret as input, and returns a modified `AppJwt` object with an additional field containing the user ID and expiration date.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "JSON Web Token being encoded, which contains the user ID and expiration time.\n\n* `jwt`: A `AppJwt` object containing information about the JWT token, including the user ID and expiration time.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used to sign the JWT token.\n\n* `secret`: The secret used to sign the JWT.\n* `jwt`: The JWT object containing the user ID and expiration time.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a concatenation of the `userId` and `expiration` properties of the `AppJwt` object, separated by a separator.\n\n* `jwt.getUserId()`: This is a string representing the user ID.\n* `SEPARATOR`: This is a constant string used to separate the user ID and expiration time.\n* `jwt.getExpiration()`: This is an integer representing the expiration time of the JWT in milliseconds since the Unix epoch (January 1, 1970, 00:00:00 UTC).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n}\n",
              "description": "\nThis code uses the AppJwt object's getter methods to extract user ID and expiration time from the JWT token. It then concatenates these values with a \"+\" character (SEPARATOR) and returns the resulting string. This method would typically be used by other components in the system to encode a JWT token for transmission or storage, such as sending it over a network or storing it in a database.\n\nThe example inputs for this code are:\n"
            },
            "name": "encode",
            "code": "@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }",
            "location": {
              "start": 38,
              "insert": 38,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "SecretJwtEncoderDecoder.java",
    "path": "service/src/main/java/com/myhome/security/jwt/impl/SecretJwtEncoderDecoder.java",
    "content": {
      "structured": {
        "description": "An implementation of `AppJwtEncoderDecoder`, a concrete class that follows the JWT standard for encoding and decoding JSON Web Tokens. The class uses the Spring Boot framework's `@Profile` annotation to specify the default profile and the `io.jsonwebtoken` package for encoding and decoding JWTs. The class provides methods for encoding and decoding JWTs, including extracting claims from the JWT, generating a new JWT with updated expiration, and signing the JWT with a secret key.",
        "items": [
          {
            "id": "9a15bc89-9267-36b5-7440-bf2b867cfa55",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "SecretJwtEncoderDecoder",
            "code": "@Component\n@Profile(\"default\")\npublic class SecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 26
          },
          {
            "id": "dcd224a4-391e-4e9d-ec46-068416113841",
            "ancestors": [
              "9a15bc89-9267-36b5-7440-bf2b867cfa55"
            ],
            "type": "function",
            "description": "decodes a JSON Web Token (JWT) and returns an instance of the `AppJwt` class with the decoded user ID, expiration date, and other relevant information.",
            "params": [
              {
                "name": "encodedJwt",
                "type_name": "String",
                "description": "JSON Web Token (JWT) that is to be decoded and converted into an instance of the `AppJwt` class.\n\n* `encodedJwt`: A string representation of a JSON Web Token (JWT) that contains claims about the user and its expiration date.\n* `secret`: The secret key used to sign the JWT, which is required for decoding.\n\nThe function first uses the `Jwts.parserBuilder()` method to create a `JwsParsingContext` instance with the provided secret key. Then, it parses the `encodedJwt` using the `build().parseClaimsJws()` method, which returns a `Claims` object containing the decoded claims from the JWT. Finally, the function creates a new `AppJwt` instance with the user ID and expiration date extracted from the `Claims` object, and returns it.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "HSM key used for signing and verifying the JWT token.\n\n* `secret`: This is the secret key used for signing the JWT. It is an instance of the `Keys` class, which provides methods for generating and managing cryptographic keys.\n* `hmacShaKeyFor(secret.getBytes())`: This method generates a HMAC-SHA-256 key for signing the JWT using the provided secret. The resulting key is an instance of the `HmacSha256Key` class.\n* `parseClaimsJws(encodedJwt)`: This method parses the JSON Web Token (JWT) and extracts the claims from it. The claims are stored in a `Claims` object, which represents the payload of the JWT.\n* `getBody()`: This method returns the body of the `Claims` object, which contains the subject and expiration information of the JWT.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AppJwt",
              "description": "an instance of `AppJwt` with updated user ID and expiration date.\n\n* The `AppJwt` object is constructed with the decoded `Claims` object from the input JWT.\n* The `userId` field contains the subject claim of the decoded JWT.\n* The `expiration` field contains the expiration date and time of the decoded JWT, represented as a `LocalDateTime`.\n\nThe output of the `decode` function can be further analyzed or processed based on the specific use case.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String encodedJwt = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.hBTmEw-5v2fH7S2Q643KGWQ8oCXJL_9FxQO18dD-kYs\";\nString secret = \"My$ecretK3y\";\nAppJwt appJwt = decode(encodedJwt, secret);\n",
              "description": "\nThis code will parse the encoded JWT and return an instance of AppJwt. The method decode takes in two parameters: encodedJwt and secret, both are strings."
            },
            "name": "decode",
            "code": "@Override public AppJwt decode(String encodedJwt, String secret) {\n    Claims claims = Jwts.parserBuilder()\n        .setSigningKey(Keys.hmacShaKeyFor(secret.getBytes()))\n        .build()\n        .parseClaimsJws(encodedJwt)\n        .getBody();\n    String userId = claims.getSubject();\n    Date expiration = claims.getExpiration();\n    return AppJwt.builder()\n        .userId(userId)\n        .expiration(expiration.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime())\n        .build();\n  }",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "3f49bbc3-5cda-0185-cd49-6344c685cd3e",
            "ancestors": [
              "9a15bc89-9267-36b5-7440-bf2b867cfa55"
            ],
            "type": "function",
            "description": "takes a `AppJwt` object and a secret as input, and generates a new JWT with an updated expiration time based on the current date and time, and signs it using HmacShaKeyFor and HS512 algorithm.",
            "params": [
              {
                "name": "jwt",
                "type_name": "AppJwt",
                "description": "JSON Web Token (JWT) to be encoded, which contains information about the user and their expiration date.\n\n* `jwt`: This is an instance of the AppJwt class, which represents a JSON Web Token (JWT) that contains information about a user's identity and other attributes.\n* `secret`: This is a secret key used for signing the JWT.\n* `expiration`: This represents the date and time when the JWT will expire, represented as an Instant object in the standard Java Date format.\n* `subject`: This represents the user ID associated with the JWT.",
                "complex_type": true
              },
              {
                "name": "secret",
                "type_name": "String",
                "description": "secret key used for HMAC-SHA-256 signature creation.\n\n* `secret`: A string that represents a secret key used for HMAC-SHA-512 signature creation.\n* `getBytes()`: Returns the bytes representation of the `secret` string.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a JWT with a validated expiration time and a unique subject ID, signed with HMAC-SHA512 using a secret key.\n\n1. `String encode`: The return type is a string representing the encoded JWT.\n2. `Jwt jwt`: The input parameter is an instance of the `AppJwt` class, which contains information about the JWT, such as the user ID and expiration date.\n3. `Date expiration`: The `expiration` object is created by converting the `jwt.getExpiration()` field to a `Date` object using the `Date.from()` method. This object represents the expiration time of the JWT in milliseconds since the epoch (January 1, 1970, 00:00:00 GMT).\n4. `Builder builder`: The `builder` is an instance of the `Jwts.builder()` method, which is used to create a new JWT builder object. This object allows us to specify the claims and signing algorithm for the JWT.\n5. `setSubject(String userId)`: The `userId` parameter sets the subject of the JWT, which is the identifier of the user who the JWT belongs to.\n6. `setExpiration(Date expiration)`: The `expiration` parameter sets the expiration time of the JWT, as mentioned above.\n7. `signWith(String signatureAlgorithm, byte[] secret)`: The `signatureAlgorithm` parameter specifies the signing algorithm to be used for the JWT signature. In this case, it is set to `SignatureAlgorithm.HS512`. The `secret` parameter is the secret key used for signing the JWT.\n8. `compact()`: The `compact()` method returns the encoded JWT as a string.\n\nThe output of the `encode` function is a JWT that contains information about the user, the expiration time, and the signing algorithm used.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }\n",
              "description": "\nThe method encode takes two arguments, AppJwt jwt and String secret. It first converts the expiration date of the JWT to an instance of Date using the getExpiration() method and the atZone(ZoneId.systemDefault()).toInstant()) method to obtain a date in UTC format. After that, it sets the subject and expiration dates of the builder using the setSubject() and setExpiration() methods respectively. The signWith() method then signs the JWT with the HS512 algorithm and the secret key provided as an argument. Finally, the compact() method is used to create a compact JSON Web Token (JWT) that can be sent in HTTP requests."
            },
            "name": "encode",
            "code": "@Override public String encode(AppJwt jwt, String secret) {\n    Date expiration = Date.from(jwt.getExpiration().atZone(ZoneId.systemDefault()).toInstant());\n    return Jwts.builder()\n        .setSubject(jwt.getUserId())\n        .setExpiration(expiration)\n        .signWith(Keys.hmacShaKeyFor(secret.getBytes()), SignatureAlgorithm.HS512).compact();\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AmenityService.java",
    "path": "service/src/main/java/com/myhome/services/AmenityService.java",
    "content": {
      "structured": {
        "description": "An interface for an Amenity Service that provides various methods for managing amenities in a community. The interface includes methods for creating, retrieving, deleting, and updating amenities, as well as listing all amenities for a given community. The code uses the `com.myhome` package, which appears to be a custom package for this project.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.AmenityService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.AmenityService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"186,-96 14,-96 14,-66 186,-66 186,-96\"/>\n<text text-anchor=\"start\" x=\"22\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Amenity</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1AmenitySDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitySDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9540f6dd-074c-ea9c-ca4f-b18d857a8539",
            "ancestors": [],
            "type": "function",
            "description": "allows for the creation, retrieval, deletion, and update of amenities within a community, using a set of methods that return optional lists, single entities, or boolean values.",
            "name": "AmenityService",
            "code": "public interface AmenityService {\n\n  Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId);\n\n  Optional<Amenity> getAmenityDetails(String amenityId);\n\n  boolean deleteAmenity(String amenityId);\n\n  Set<Amenity> listAllAmenities(String communityId);\n\n  boolean updateAmenity(AmenityDto updatedAmenityDto);\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationService.java",
    "path": "service/src/main/java/com/myhome/services/AuthenticationService.java",
    "content": {
      "structured": {
        "description": "An interface for Authentication Service. The interface provides a method called login which takes a LoginRequest object as its parameter and returns an AuthenticationData object.",
        "items": [
          {
            "id": "e6972662-ec68-4b82-bc4c-e24c974d75c9",
            "ancestors": [],
            "type": "function",
            "description": "allows for the login of a user through an incoming LoginRequest, resulting in an AuthenticationData return value.",
            "name": "AuthenticationService",
            "code": "public interface AuthenticationService {\n  AuthenticationData login(LoginRequest loginRequest);\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 3
          }
        ]
      }
    }
  },
  {
    "name": "BookingService.java",
    "path": "service/src/main/java/com/myhome/services/BookingService.java",
    "content": {
      "structured": {
        "description": "An interface for booking service, which allows for the deletion of bookings based on amenity and booking IDs. The deleteBooking method is defined in the interface, which can be implemented by any class that implements the BookingService interface.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.BookingService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.BookingService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-96 15,-96 15,-66 185,-66 185,-96\"/>\n<text text-anchor=\"start\" x=\"23\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Booking</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1BookingSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "45210edd-8909-50be-5249-18bb71ba5a26",
            "ancestors": [],
            "type": "function",
            "description": "provides a method for deleting bookings based on their amenity and ID.",
            "name": "BookingService",
            "code": "public interface BookingService {\n\n  boolean deleteBooking(String amenityId, String bookingId);\n\n}",
            "location": {
              "start": 3,
              "insert": 3,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "CommunityService.java",
    "path": "service/src/main/java/com/myhome/services/CommunityService.java",
    "content": {
      "structured": {
        "description": "An interface for a CommunityService, which provides various methods for managing communities and their associated houses and admins. The methods include creating new communities, listing all communities, finding community details by ID, and deleting communities. Additionally, the service provides methods for adding or removing admins and houses from communities, as well as deleting individual houses within a community.",
        "items": [
          {
            "id": "4dcea4d3-923f-9c96-ca46-e217e6d89b26",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for creating, listing, and retrieving communities as well as managing admins and houses within a community.",
            "name": "CommunityService",
            "code": "public interface CommunityService {\n  Community createCommunity(CommunityDto communityDto);\n\n  Set<Community> listAll();\n\n  Set<Community> listAll(Pageable pageable);\n\n  Optional<Community> getCommunityDetailsById(String communityId);\n\n  Optional<List<CommunityHouse>> findCommunityHousesById(String communityId, Pageable pageable);\n\n  Optional<List<User>> findCommunityAdminsById(String communityId, Pageable pageable);\n\n  Optional<User> findCommunityAdminById(String adminId);\n\n  Optional<Community> getCommunityDetailsByIdWithAdmins(String communityId);\n\n  Optional<Community> addAdminsToCommunity(String communityId, Set<String> admins);\n\n  Set<String> addHousesToCommunity(String communityId, Set<CommunityHouse> houses);\n\n  boolean removeHouseFromCommunityByHouseId(Community community, String houseId);\n\n  boolean deleteCommunity(String communityId);\n\n  boolean removeAdminFromCommunity(String communityId, String adminId);\n}",
            "location": {
              "start": 28,
              "insert": 28,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 27
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentService.java",
    "path": "service/src/main/java/com/myhome/services/HouseMemberDocumentService.java",
    "content": {
      "structured": {
        "description": "An interface for HouseMemberDocumentService, which includes four methods: deleteHouseMemberDocument, findHouseMemberDocument, updateHouseMemberDocument, and createHouseMemberDocument. These methods allow for the management of HouseMemberDocument data, including deleting, finding, updating, and creating new documents related to members.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.HouseMemberDocumentService Pages: 1 -->\n<svg width=\"211pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 211.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.HouseMemberDocumentService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-96 21,-96 21,-66 182,-66 182,-96\"/>\n<text text-anchor=\"start\" x=\"29\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.House</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1HouseMemberDocumentSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"203,-30 0,-30 0,0 203,0 203,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"101.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseMemberDocumentSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M101.5,-55.54C101.5,-46.96 101.5,-37.61 101.5,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"98,-55.8 101.5,-65.8 105,-55.8 98,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "475c907a-bdc8-e0b6-a143-83b66f5dc9b7",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for managing House Member Documents, including deleting, finding, updating, and creating new ones.",
            "name": "HouseMemberDocumentService",
            "code": "public interface HouseMemberDocumentService {\n\n  boolean deleteHouseMemberDocument(String memberId);\n\n  Optional<HouseMemberDocument> findHouseMemberDocument(String memberId);\n\n  Optional<HouseMemberDocument> updateHouseMemberDocument(MultipartFile multipartFile,\n      String memberId);\n\n  Optional<HouseMemberDocument> createHouseMemberDocument(MultipartFile multipartFile,\n      String memberId);\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "HouseService.java",
    "path": "service/src/main/java/com/myhome/services/HouseService.java",
    "content": {
      "structured": {
        "description": "An interface for a `HouseService` that provides various methods for interacting with houses and their members. The interface includes methods for listing all houses, listing houses by page number, adding house members, deleting members from houses, getting house details by ID, and listing house members for a specific user ID. The code also uses Spring Data packages to handle pagination and optional data retrieval.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.HouseService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.HouseService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"180.5,-96 19.5,-96 19.5,-66 180.5,-66 180.5,-96\"/>\n<text text-anchor=\"start\" x=\"27.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.House</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1services_1_1springdatajpa_1_1HouseSDJpaService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node2 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node1&#45;&gt;Node2</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "4febb1e9-16d9-36bc-9a4d-fec0448e248e",
            "ancestors": [],
            "type": "function",
            "description": "provides methods to manage houses and their members, including listing all houses and members, adding new members to a house, deleting members from a house, retrieving house details by ID, and listing members for houses belonging to a specific user.",
            "name": "HouseService",
            "code": "public interface HouseService {\n  Set<CommunityHouse> listAllHouses();\n\n  Set<CommunityHouse> listAllHouses(Pageable pageable);\n\n  Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers);\n\n  boolean deleteMemberFromHouse(String houseId, String memberId);\n\n  Optional<CommunityHouse> getHouseDetailsById(String houseId);\n\n  Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable);\n\n  Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId, Pageable pageable);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 15
          }
        ]
      }
    }
  },
  {
    "name": "MailService.java",
    "path": "service/src/main/java/com/myhome/services/MailService.java",
    "content": {
      "structured": {
        "description": "An interface for a mail service that allows for various communication between the application and the user's email account. The interface includes four methods: `sendPasswordRecoverCode`, `sendAccountCreated`, `sendPasswordSuccessfullyChanged`, and `sendAccountConfirmed`. These methods allow the mail service to send different types of messages to users, including password recovery codes, account creation confirmations, password change success notifications, and account confirmation notifications.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "96efa9b5-9202-33be-f94c-b822a691bf3b",
            "ancestors": [],
            "type": "function",
            "description": "provides methods for sending various types of emails related to user accounts, including password recovery codes, account creation and confirmation, and password changes.",
            "name": "MailService",
            "code": "public interface MailService {\n\n  boolean sendPasswordRecoverCode(User user, String randomCode);\n\n  boolean sendAccountCreated(User user, SecurityToken emailConfirmToken);\n\n  boolean sendPasswordSuccessfullyChanged(User user);\n\n  boolean sendAccountConfirmed(User user);\n}",
            "location": {
              "start": 6,
              "insert": 6,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 10
          }
        ]
      }
    }
  }
]
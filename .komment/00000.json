[
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that contains information about a page of data. The class has four fields: currentPage, pageLimit, totalPages, and totalElements, which are initialized using a constructor. Additionally, a static method `of()` is provided to create a new `PageInfo` instance based on a `Pageable` object and a `Page` object. This summary provides an overview of the main features and functions of the code without including unnecessary details or bulletpoints.",
        "items": [
          {
            "id": "cc5095f5-17e6-bfab-7342-59d97dd359d9",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "PageInfo",
            "code": "@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 19
          },
          {
            "id": "cb00d0f9-8ae3-51b9-624f-df4a877bd6fc",
            "ancestors": [
              "cc5095f5-17e6-bfab-7342-59d97dd359d9"
            ],
            "type": "function",
            "description": "creates a `PageInfo` object containing information about a given pageable and page, such as page number, size, total pages, and total elements.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information of the data being processed, providing the number of pages and the size of each page.\n\n* `getPageNumber()`: Returns the page number of the current page being processed.\n* `getPageSize()`: Returns the number of elements in a single page.\n* `getTotalPages()`: Returns the total number of pages available for processing.\n* `getTotalElements()`: Returns the total number of elements that can be processed across all pages.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page being processed, providing the total number of elements on that page and the total number of pages in the overall result set.\n\n* `getPageNumber()` returns the page number that contains the element(s) being queried.\n* `getPageSize()` returns the number of elements per page in the query result.\n* `getTotalPages()` returns the total number of pages in the result set.\n* `getTotalElements()` returns the total number of elements in the result set.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing information about the current page of a paginated result set.\n\n* pageable.getPageNumber(): The number of the current page being displayed.\n* pageable.getPageSize(): The number of elements displayed on each page.\n* page.getTotalPages(): The total number of pages in the result set.\n* page.getTotalElements(): The total number of elements in the result set.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable pageable = new PageRequest(0, 10); // get the first 10 items\nPage<?> page = someService.getAllItems();\nPageInfo pageInfo = PageInfo.of(pageable, page);\n",
              "description": ""
            },
            "name": "of",
            "code": "public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 8
          }
        ]
      }
    }
  },
  "*   \u001b[33mea904a9\u001b[m\u001b[33m (\u001b[m\u001b[1;35mrefs/stash\u001b[m\u001b[33m)\u001b[m WIP on iss#87-House-member-documents-integration-tests: 627a541 Merge branch 'master' into iss#87-House-member-documents-integration-tests\n\u001b[31m|\u001b[m\u001b[32m\\\u001b[m  \n\u001b[31m|\u001b[m * \u001b[33m53e928d\u001b[m index on iss#87-House-member-documents-integration-tests: 627a541 Merge branch 'master' into iss#87-House-member-documents-integration-tests\n\u001b[31m|\u001b[m\u001b[31m/\u001b[m  \n*   \u001b[33m627a541\u001b[m Merge branch 'master' into iss#87-House-member-documents-integration-tests\n\u001b[33m|\u001b[m\u001b[34m\\\u001b[m  \n\u001b[33m|\u001b[m *   \u001b[33m35d38a2\u001b[m Merge pull request #85 from amirabramovich/issue80-insert-data-on-startup\n\u001b[33m|\u001b[m \u001b[35m|\u001b[m\u001b[36m\\\u001b[m  \n\u001b[33m|\u001b[m \u001b[35m|\u001b[m * \u001b[33mb57b422\u001b[m fixed banner to display application name + version from gradle, merged test classes to improve performance\n\u001b[33m|\u001b[m \u001b[35m|\u001b[m * \u001b[33m3625c92\u001b[m added banner for application and moved the table's data initiation into sql file\n\u001b[33m|\u001b[m * \u001b[36m|\u001b[m   \u001b[33m2824c98\u001b[m Merge pull request #89 from DDmit04/iss#88-User-controller-create-throws-500\n\u001b[33m|\u001b[m \u001b[1;31m|\u001b[m\u001b[1;32m\\\u001b[m \u001b[36m\\\u001b[m  \n\u001b[33m|\u001b[m * \u001b[1;32m\\\u001b[m \u001b[36m\\\u001b[m   \u001b[33ma645ace\u001b[m Merge pull request #86 from DDmit04/iss#84-Create-part-of-tests-for-HouseMemberDocument-service\n\u001b[33m|\u001b[m \u001b[36m|\u001b[m\u001b[1;34m\\\u001b[m \u001b[1;32m\\\u001b[m \u001b[36m\\\u001b[m  \n\u001b[33m|\u001b[m \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m\u001b[36m_\u001b[m\u001b[1;32m|\u001b[m\u001b[36m/\u001b[m  \n\u001b[33m|\u001b[m \u001b[36m|\u001b[m\u001b[36m/\u001b[m\u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m   \n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m77810db\u001b[m try fix\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m6d7cc7f\u001b[m relocate test class\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m630f7d7\u001b[m try understand why tests runs too long\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33ma808057\u001b[m\u001b[33m (\u001b[m\u001b[1;36mHEAD -> \u001b[m\u001b[1;32miss#87-House-member-documents-integration-tests\u001b[m\u001b[33m, \u001b[m\u001b[1;31morigin/iss#87-House-member-documents-integration-tests\u001b[m\u001b[33m)\u001b[m clean up\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33mb401096\u001b[m fix given-when-then blanks\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33ma917fc1\u001b[m extract testing URL to const var\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m2ea089f\u001b[m add using @DirtiesContext\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m90651dc\u001b[m fix static final vars names\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33mad8f9bb\u001b[m fix imports\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33mad9fbed\u001b[m try understand error\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m1b44e0d\u001b[m clean up\n* \u001b[36m|\u001b[m \u001b[1;34m|\u001b[m \u001b[1;32m|\u001b[m \u001b[33m10bc44e\u001b[m strange error fix\n",
  {
    "name": "UserControllerIntegrationTest.java",
    "path": "integration-tests/src/test/java/com/myhome/controllers/UserControllerIntegrationTest.java",
    "content": {
      "structured": {
        "description": "An integration test class for a user controller in a Spring Boot application. The test class uses Spring Boot Test and TestRestTemplate to send a POST request to the registration path and verify that the response status code is HTTP 201 Created, and the returned user object matches the input parameters. Additionally, the test verifies that the user ID returned in the response matches a user stored in the database.",
        "items": [
          {
            "id": "eb772697-edfe-15ae-d740-45aaeaee5ba9",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "UserControllerIntegrationTest",
            "code": "@ExtendWith(SpringExtension.class)\n@SpringBootTest(\n    classes = MyHomeServiceApplication.class,\n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT\n)\n@TestInstance(TestInstance.Lifecycle.PER_METHOD)\nclass UserControllerIntegrationTest {\n\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n\n  @Value(\"${api.public.registration.url.path}\")\n  private String registrationPath;\n\n  @Autowired\n  private TestRestTemplate testRestTemplate;\n\n  @Autowired\n  private UserRepository userRepository;\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 53
          },
          {
            "id": "6112fd63-f1f0-fd8c-834a-d75d6fdc6b1d",
            "ancestors": [
              "eb772697-edfe-15ae-d740-45aaeaee5ba9"
            ],
            "type": "function",
            "description": "tests the successful creation of a new user through a REST API. It verifies that the response status code is `CREATED`, and that the returned user object matches the input parameters withigning fields other than the `userId`. Additionally, it checks if there is a corresponding user stored in the database with matching name and email.",
            "params": [],
            "usage": {
              "language": "java",
              "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity = testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }\n",
              "description": "\nIn this test, we are testing if a user can be created successfully through the registration path. We first create a CreateUserRequest with the necessary fields and pass it to the testRestTemplate's postForEntity method. The response body is then extracted from the response entity and compared using the assertThat methods to ensure that the status code matches the expected value and the response body contains the correct values for the name and email of the user. Additionally, we check if a user with the same ID as the one returned in the response body exists in the database."
            },
            "name": "shouldSignUpSuccessful",
            "code": "@Test\n  void shouldSignUpSuccessful() {\n    // Given a request\n    CreateUserRequest requestBody = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n\n    // When a request is made\n    ResponseEntity<User> responseEntity =\n        testRestTemplate.postForEntity(registrationPath, requestBody, User.class);\n    User responseBody = responseEntity.getBody();\n\n    // Then the response matches expectation\n    assertThat(responseEntity.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n    assertThat(responseBody)\n        .isNotNull()\n        .usingRecursiveComparison()\n        .ignoringFields(\"userId\")\n        .isEqualTo(new User()\n            .withName(TEST_NAME)\n            .withEmail(TEST_EMAIL));\n\n    // And the returned user ID should refer to a user stored in the database\n    Optional<User> databaseUser = userRepository.findByUserId(responseBody.getUserId());\n    assertTrue(databaseUser.isPresent());\n\n    // And the corresponding values in the database should match the input\n    assertThat(databaseUser.get().getName()).isEqualTo(TEST_NAME);\n    assertThat(databaseUser.get().getEmail()).isEqualTo(TEST_EMAIL);\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 31
          }
        ]
      }
    }
  },
  {
    "name": "MyHomeServiceApplication.java",
    "path": "service/src/main/java/com/myhome/MyHomeServiceApplication.java",
    "content": {
      "structured": {
        "description": "A Spring Boot application that uses the BCrypt password encryption algorithm to securely store and hash passwords. The `getPasswordEncoder()` method returns an instance of `BCryptPasswordEncoder`, which is used throughout the application for password validation and hashing.",
        "diagram": "digraph G {\n    label=\"com.todo.FixMe\"\n    bgcolor=\"#151719\"\n    fontcolor=\"#ECEDED\"\n    splines=ortho\n    fontname=\"Courier New\"\n    edge [color=\"#26de81\"]\n}\n",
        "items": [
          {
            "id": "86e6a6e9-3794-84ad-b144-262e52f97abe",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot application that provides a `BCryptPasswordEncoder` instance for encrypting passwords using the BCrypt algorithm. The encoder is designed to handle strong password validation and is suitable for use in web applications.",
            "name": "MyHomeServiceApplication",
            "code": "@SpringBootApplication\n@ConfigurationPropertiesScan\npublic class MyHomeServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }\n\n  /**\n   * returns a `BCryptPasswordEncoder` instance, which is used to encrypt passwords\n   * using the BCrypt algorithm.\n   * \n   * @returns a BCryptPasswordEncoder instance.\n   * \n   * The `BCryptPasswordEncoder` object represents a password encryption algorithm that\n   * uses the bcrypt hashing algorithm to securely store and hash passwords.\n   * It provides several methods for encrypting, hashing, and verifying passwords.\n   * The encoder is designed to handle strong password validation and is suitable for\n   * use in web applications.\n   */\n  @Bean\n  public PasswordEncoder getPasswordEncoder() {\n    return new BCryptPasswordEncoder();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 25,
            "docLength": null,
            "doc": "A Spring Boot application that uses the BCrypt password encryption algorithm to securely store and hash passwords. The `getPasswordEncoder()` method returns an instance of `BCryptPasswordEncoder`, which is used throughout the application for password validation and hashing."
          },
          {
            "id": "f3b0fd79-0007-33a8-2342-caef74e9e7e0",
            "ancestors": [
              "86e6a6e9-3794-84ad-b144-262e52f97abe"
            ],
            "type": "function",
            "description": "runs a SpringApplication with the `MyHomeServiceApplication` class as its argument, launching the application with the given command-line arguments.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the main method of the `SpringApplication`.\n\nThe `String[] args` represents an array of command-line arguments passed to the application during launching.",
                "complex_type": true
              }
            ],
            "name": "main",
            "code": "public static void main(String[] args) {\n    SpringApplication.run(MyHomeServiceApplication.class, args);\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null,
            "doc": "A Spring Boot application that uses the BCrypt password encryption algorithm to securely store and hash passwords. The `getPasswordEncoder()` method returns an instance of `BCryptPasswordEncoder`, which is used throughout the application for password validation and hashing."
          }
        ]
      }
    }
  },
  {
    "name": "CorsConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/CorsConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class `CorsConfig` that enables CORS (Cross-Origin Resource Sharing) for a Spring MVC web application. The `allowedOrigins` field specifies the origins from which requests are allowed, and the `addCorsMappings` method adds CORS mapping to allow all methods, headers, and credentials.",
        "items": [
          {
            "id": "29d27593-f2ed-43a6-be41-abf5aedda4af",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CorsConfig",
            "code": "@Configuration\npublic class CorsConfig {\n\n  @Value(\"${server.cors.allowedOrigins}\")\n  private String[] allowedOrigins;\n\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 21
          },
          {
            "id": "1774d16a-4ed1-77a8-d34d-4f082dcb884e",
            "ancestors": [
              "29d27593-f2ed-43a6-be41-abf5aedda4af"
            ],
            "type": "function",
            "description": "defines CORS mappings for a web application, allowing requests from specified origins, methods, headers, and credentials.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a set of CORS mappings that allow requests from any origin and specify which methods, headers, and credentials are allowed.\n\n* `allowedOrigins`: An array of allowed origins for CORS requests. In this case, it is empty, indicating that any origin can make a request to the server.\n* `allowedMethods`: An array of allowed HTTP methods for CORS requests. This is set to \"*\" to allow all methods.\n* `allowedHeaders`: An array of allowed headers for CORS requests. This is also set to \"*\" to allow all headers.\n* `exposedHeaders`: An array of headers that are exposed in the response. In this case, two headers are exposed: \"token\" and \"userId\".\n* `allowCredentials`: A boolean value indicating whether credentials (e.g., cookies, authentication tokens) should be allowed for CORS requests. This is set to true to allow credentials.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n        @Override\n        public void addCorsMappings(CorsRegistry registry) {\n            registry.addMapping(\"/**\")\n                .allowedOrigins(new String[]{\"*\"})\n                .allowedMethods(\"*\")\n                .allowedHeaders(\"*\")\n                .exposedHeaders(\"token\", \"userId\")\n                .allowCredentials(true);\n        }\n    };\n}\n",
              "description": "\nThis method is used to configure CORS in the Spring MVC application. The `CorsRegistry` class is used to define the allowed origins, methods, headers, and exposed headers for the API. The `allowedOrigins()` method specifies that any origin can access the API, while the `allowedMethods()`, `allowedHeaders()`, `exposedHeaders()`, and `allowCredentials()` methods specify that any method, header, or credential can be used in the request."
            },
            "name": "corsConfigurer",
            "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 14
          },
          {
            "id": "7dd3341a-dbfa-09a5-f748-c3e60bd79f35",
            "ancestors": [
              "29d27593-f2ed-43a6-be41-abf5aedda4af",
              "1774d16a-4ed1-77a8-d34d-4f082dcb884e"
            ],
            "type": "function",
            "description": "adds CORS mappings to a registry, allowing requests from any origin and specifying which methods, headers, and credentials are allowed.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that the method adds mappings to.\n\n* `registry`: This is an instance of the `CorsRegistry` class, which represents a collection of CORS configuration mappings for a server.\n* `addMapping`: This method is used to add a new CORS mapping to the registry. The method takes a string parameter representing the URL path that the mapping applies to.\n* `allowedOrigins`: An array of strings representing the origins (domains or IP addresses) that are allowed to make requests to the server.\n* `allowedMethods`: An array of strings representing the HTTP methods (such as GET, POST, PUT, DELETE, etc.) that are allowed for the mapping.\n* `allowedHeaders`: An array of strings representing the HTTP headers that are allowed for the mapping.\n* `exposedHeaders`: An array of strings representing the HTTP headers that are exposed to clients in responses.\n* `allowCredentials`: A boolean value indicating whether the CORS configuration allows credentials (such as cookies or authorized access tokens) in requests.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n            .allowedOrigins(\"http://example.com\", \"https://example.com\")\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n}\n",
              "description": ""
            },
            "name": "addCorsMappings",
            "code": "@Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }",
            "location": {
              "start": 34,
              "insert": 34,
              "offset": " ",
              "indent": 6
            },
            "item_type": "method",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/EmailTemplateConfig.java",
    "content": {
      "structured": {
        "description": "An Email Template Configuration class that sets up email template configuration for a Spring Boot application. It provides a way to locate and render email templates using Thymeleaf. The class creates a ResourceBundleMessageSource for email messages, which is used to provide message resources to the Thymeleaf template engine. The template engine is then configured with the email message source and a custom template resolver that uses the Thymeleaf ClassLoaderTemplateResolver to locate and render email templates.",
        "items": [
          {
            "id": "ff91c632-1c3f-8fad-a844-952afc467aa9",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "EmailTemplateConfig",
            "code": "@Configuration\n@RequiredArgsConstructor\npublic class EmailTemplateConfig {\n\n  private final EmailTemplateProperties templateProperties;\n  private final EmailTemplateLocalizationProperties localizationProperties;\n\n  @Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n\n  @Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n\n  private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }\n\n}",
            "location": {
              "start": 15,
              "insert": 15,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 40
          },
          {
            "id": "75742de9-7f80-cbb0-9841-12bafaf2b720",
            "ancestors": [
              "ff91c632-1c3f-8fad-a844-952afc467aa9"
            ],
            "type": "function",
            "description": "creates a `ResourceBundleMessageSource` instance that retrieves email messages from a resource bundle file. The file path, default locale, and encoding are set using properties from an external `localizationProperties` object. The cache seconds can also be set using the same object.",
            "params": [],
            "returns": {
              "type_name": "instance",
              "description": "a ResourceBundleMessageSource instance set with configuration properties for email localization.\n\n* `ResourceBundleMessageSource messageSource`: The output is a `ResourceBundleMessageSource`, which means it provides access to message keys in a resource bundle.\n* `setBasename(localizationProperties.getPath())`: The basename of the resource bundle is set to the value of `localizationProperties.getPath()`.\n* `setDefaultLocale(Locale.ENGLISH)`: The default locale for the resource bundle is set to English.\n* `setDefaultEncoding(localizationProperties.getEncoding())`: The default encoding for the resource bundle is set to the value of `localizationProperties.getEncoding()`.\n* `setCacheSeconds(localizationProperties.getCacheSeconds())`: The number of seconds that the resource bundle will be cached is set to the value of `localizationProperties.getCacheSeconds()`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }\n",
              "description": ""
            },
            "name": "emailMessageSource",
            "code": "@Bean\n  public ResourceBundleMessageSource emailMessageSource() {\n    ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n    messageSource.setBasename(localizationProperties.getPath());\n    messageSource.setDefaultLocale(Locale.ENGLISH);\n    messageSource.setDefaultEncoding(localizationProperties.getEncoding());\n    messageSource.setCacheSeconds(localizationProperties.getCacheSeconds());\n    return messageSource;\n  }",
            "location": {
              "start": 22,
              "insert": 22,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "8518a61c-def5-9e9a-4243-76d64504d213",
            "ancestors": [
              "ff91c632-1c3f-8fad-a844-952afc467aa9"
            ],
            "type": "function",
            "description": "creates a new instance of the `SpringTemplateEngine` class and sets its template resolver and message source to the specified values, returning the instance.",
            "params": [
              {
                "name": "emailMessageSource",
                "type_name": "ResourceBundleMessageSource",
                "description": "message source for email-related messages in the Spring Template Engine.\n\n1. ResourceBundleMessageSource: This is an interface that provides a way to retrieve message keys in a resource bundle format. It has methods for getting message keys and their corresponding values.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SpringTemplateEngine",
              "description": "a Spring Template Engine instance configured to use Thymeleaf templates and email message source.\n\n* The `SpringTemplateEngine` instance is created with various configuration options set, including the `templateResolver` and `templateEngineMessageSource`.\n* The `templateResolver` sets the template engine's resolver to `thymeleafTemplateResolver`, which allows for the use of Thymeleaf templates.\n* The `templateEngineMessageSource` sets the message source for the template engine, in this case an instance of `ResourceBundleMessageSource` for handling email-related messages.\n\nThe other attributes of the returned output, such as its name or any other configuration options set, are not explicitly mentioned in the provided code snippet.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }\n",
              "description": ""
            },
            "name": "thymeleafTemplateEngine",
            "code": "@Bean\n  public SpringTemplateEngine thymeleafTemplateEngine(ResourceBundleMessageSource emailMessageSource) {\n    SpringTemplateEngine templateEngine = new SpringTemplateEngine();\n    templateEngine.setTemplateResolver(thymeleafTemplateResolver());\n    templateEngine.setTemplateEngineMessageSource(emailMessageSource);\n    return templateEngine;\n  }",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "dc4bc1e2-b8c1-dfad-a643-4368e382062d",
            "ancestors": [
              "ff91c632-1c3f-8fad-a844-952afc467aa9"
            ],
            "type": "function",
            "description": "creates a Thymeleaf template resolver that sets the prefix, suffix, template mode, character encoding, and caching based on properties.",
            "params": [],
            "returns": {
              "type_name": "ITemplateResolver",
              "description": "a `ITemplateResolver` instance set up to resolve Thymeleaf templates based on properties defined in the `templateProperties` class.\n\n* `templateProperties`: This is an instance of `ITemplateProperties`, which contains information about the Thymeleaf template resolver.\n\t+ `path`: The path to the template file.\n\t+ `format`: The template file format (e.g., \"html\", \"xml\").\n\t+ `mode`: The template rendering mode (e.g., \"HTML\", \"XML\").\n\t+ `encoding`: The character encoding of the template file.\n\t+ `cacheable`: A boolean indicating whether the template is cacheable.\n\nThe properties are set using the `setPrefix`, `setSuffix`, `setTemplateMode`, and `setCharacterEncoding` methods, respectively. Additionally, the `setCacheable` method is used to indicate whether the template is cacheable or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = \"templates\";\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(\".html\");\n    templateResolver.setTemplateMode(TemplateMode.HTML);\n    templateResolver.setCharacterEncoding(\"UTF-8\");\n    templateResolver.setCacheable(true);\n    return templateResolver;\n  }\n",
              "description": ""
            },
            "name": "thymeleafTemplateResolver",
            "code": "private ITemplateResolver thymeleafTemplateResolver() {\n    ClassLoaderTemplateResolver templateResolver = new ClassLoaderTemplateResolver();\n\n    String templatePath = templateProperties.getPath();\n    String fileSeparator = System.getProperty(\"file.separator\");\n    templateResolver.setPrefix(templatePath.endsWith(fileSeparator) ? templatePath : templatePath + fileSeparator);\n\n    templateResolver.setSuffix(templateProperties.getFormat());\n    templateResolver.setTemplateMode(templateProperties.getMode());\n    templateResolver.setCharacterEncoding(templateProperties.getEncoding());\n    templateResolver.setCacheable(templateProperties.isCache());\n    return templateResolver;\n  }",
            "location": {
              "start": 40,
              "insert": 40,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadConfig.java",
    "path": "service/src/main/java/com/myhome/configuration/FileUploadConfig.java",
    "content": {
      "structured": {
        "description": "A configuration class called `FileUploadConfig` that sets up multipart file uploads for a Spring Boot application. The class sets the maximum file size in kilobytes using the `@Value` annotation and creates a `MultipartConfigElement` bean to configure the multipart settings. The `multipartConfigElement()` method returns a `MultipartConfigElement` instance with the maximum file size and request size set.",
        "items": [
          {
            "id": "8911784d-1095-ab8b-9841-e9ddacb79b76",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "FileUploadConfig",
            "code": "@Configuration\npublic class FileUploadConfig {\n\n  @Value(\"${files.maxSizeKBytes}\")\n  private int maxSizeKBytes;\n\n  @Bean\n  public MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n  }\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 14
          },
          {
            "id": "fe1b4364-9f30-539d-c144-a19d569a2c94",
            "ancestors": [
              "8911784d-1095-ab8b-9841-e9ddacb79b76"
            ],
            "type": "function",
            "description": "creates a `MultipartConfig` object, setting limits on maximum file size and request size.",
            "params": [],
            "returns": {
              "type_name": "MultipartConfig",
              "description": "a `MultipartConfig` object configured with maximum file and request sizes in kilobytes.\n\n* The MultipartConfigFactory object is created with the `setMaxFileSize()` and `setMaxRequestSize()` methods, which set the maximum file size in kilobytes (KB) and request size in KB, respectively.\n* The createMultipartConfig() method returns a newly created MultipartConfig instance.\n* The MultipartConfig instance has several attributes, including the maximum file size, maximum request size, and the number of files that can be uploaded simultaneously.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\npublic MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n}\n",
              "description": ""
            },
            "name": "multipartConfigElement",
            "code": "@Bean\n  public MultipartConfigElement multipartConfigElement() {\n    MultipartConfigFactory factory = new MultipartConfigFactory();\n    factory.setMaxFileSize(DataSize.ofKilobytes(maxSizeKBytes));\n    factory.setMaxRequestSize(DataSize.ofKilobytes(maxSizeKBytes));\n    return factory.createMultipartConfig();\n  }",
            "location": {
              "start": 32,
              "insert": 32,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateLocalizationProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateLocalizationProperties.java",
    "content": {
      "structured": {
        "description": "A class called `EmailTemplateLocalizationProperties` that is a configuration property for email location-related settings. The class has several instance fields: `path`, `encoding`, and `cacheSeconds`. These fields are used to store specific values related to email localization, such as the path to an email template file and the encoding format of the file. The class also uses various Spring Boot packages, including `@Data`, `@Component`, and `@ConfigurationProperties`, which are used to define the properties of the class and provide configuration options for the email localization settings.",
        "items": [
          {
            "id": "3b336005-92b2-b297-f04a-59244a80ec60",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot configuration class that defines properties for email localization, including path to the template file, encoding, and cache seconds.\nFields:\n\t- path (String): in the EmailTemplateLocalizationProperties class represents a string value specifying the location of an email template file. \n\t- encoding (String): in the EmailTemplateLocalizationProperties class is used to specify the character encoding of the email template files. \n\t- cacheSeconds (int): in the EmailTemplateLocalizationProperties class represents the number of seconds that an email template will be cached before it is refreshed from the source location. \n\n",
            "name": "EmailTemplateLocalizationProperties",
            "code": "@Data\n@Component\n@ConfigurationProperties(prefix = \"email.location\")\npublic class EmailTemplateLocalizationProperties {\n  private String path;\n  private String encoding;\n  private int cacheSeconds;\n}",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "EmailTemplateProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/EmailTemplateProperties.java",
    "content": {
      "structured": {
        "description": "An `EmailTemplateProperties` class that represents email template properties in a Spring Boot application. The class has various attributes for specifying the path to an email template file, the template format, encoding, and mode, as well as a cache setting. These attributes are annotated with various Spring Boot annotations, such as `@Data`, `@Component`, `@ConfigurationProperties`, and `@Prefix`, indicating their intended use and functionality within the application.",
        "items": [
          {
            "id": "c5d5eedb-fb26-3f8b-684a-fa30029ac05f",
            "ancestors": [],
            "type": "function",
            "description": "provides a set of properties for configuring email template settings, including the path to the template file, the format of the template, and caching options.\nFields:\n\t- path (String): represents a file path where an email template resides. \n\t- format (String): in the EmailTemplateProperties class is a string value specifying the template file format for sending emails. \n\t- encoding (String): in the EmailTemplateProperties class represents a string value specifying the character encoding of the email template. \n\t- mode (String): in the EmailTemplateProperties class represents the encoding mode of the email template. \n\t- cache (boolean): in EmailTemplateProperties is a boolean value indicating whether the email template data should be cached for future use. \n\n",
            "name": "EmailTemplateProperties",
            "code": "@Data\n@Component\n@ConfigurationProperties(prefix = \"email.template\")\npublic class EmailTemplateProperties {\n  private String path;\n  private String format;\n  private String encoding;\n  private String mode;\n  private boolean cache;\n}",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "MailProperties.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailProperties.java",
    "content": {
      "structured": {
        "description": "A `MailProperties` class that configures mail settings for a Spring Boot application. The class has properties for host, username, password, port, protocol, debug, and devMode. These properties can be used to configure various aspects of mail communication in the application.",
        "items": [
          {
            "id": "d0685d0e-0660-5a99-e741-5fcb0153d477",
            "ancestors": [],
            "type": "function",
            "description": "in Java provides configuration properties for email settings, including host, username, password, port, protocol, debug, and dev mode.\nFields:\n\t- host (String): in the MailProperties class represents the mail server's hostname. \n\t- username (String): in the MailProperties class represents a string value representing the username for email authentication purposes. \n\t- password (String): in MailProperties is of type String. \n\t- port (int): in MailProperties represents an integer value indicating the mail server's port number for communication. \n\t- protocol (String): in MailProperties represents a string value that specifies the email transport protocol to use for sending emails. \n\t- debug (boolean): in the MailProperties class is a boolean indicating whether debugging mode is enabled. \n\t- devMode (boolean): in the MailProperties class represents a boolean flag indicating whether the mail server configuration is intended for development or production use. \n\n",
            "name": "MailProperties",
            "code": "@Data\n@ConfigurationProperties(prefix = \"spring.mail\")\npublic class MailProperties {\n  private String host;\n  private String username;\n  private String password;\n  private int port;\n  private String protocol;\n  private boolean debug;\n  private boolean devMode;\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 11
          }
        ]
      }
    }
  },
  {
    "name": "MailTemplatesNames.java",
    "path": "service/src/main/java/com/myhome/configuration/properties/mail/MailTemplatesNames.java",
    "content": {
      "structured": {
        "description": "An enumeration of template names for email messages related to password reset, password change, account creation, and account confirmation. The enumeration provides a way to reference the specific template file name based on its label.",
        "items": []
      }
    }
  },
  {
    "name": "AmenityController.java",
    "path": "service/src/main/java/com/myhome/controllers/AmenityController.java",
    "content": {
      "structured": {
        "description": "An API for managing amenities in a community. The API endpoints include:\n* `GET /amenities`: retrieves a list of amenities in a community\n* `POST /amenities`: adds a new amenity to a community\n* `PUT /amenities/{amenityId}`: updates an existing amenity in a community\n* `DELETE /amenities/{amenityId}`: deletes an amenity from a community.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling HTTP requests related to amenities in a community. The controller provides endpoints for listing all amenities, adding new amenities, updating existing amenities, and deleting amenities. The controller utilizes the JPA service to interact with the database and perform CRUD operations on amenities. The controller also provides methods for handling error responses and returning appropriate status codes.",
            "name": "AmenityController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  /**\n   * retrieves amenity details for a given ID using JPA service and maps the result to\n   * `GetAmenityDetailsResponse` object using API mapper.\n   * \n   * @param amenityId identifier of an amenity for which details are requested.\n   * \n   * @returns an `ResponseEntity` object containing the details of the specified amenity.\n   * \n   * \t- `ResponseEntity<GetAmenityDetailsResponse>`: This is a generic response entity\n   * that contains the amenity details in the `getAmenityDetailsResponse` object.\n   * \t- `getAmenityDetailsResponse()`: This is a method that maps the amenity details\n   * to an `AmenityDetailsResponse` object.\n   * \t- `map(amenityApiMapper::amenityToAmenityDetailsResponse)`: This line calls the\n   * `map` function again with the `amenityToAmenityDetailsResponse` method as its\n   * argument, which converts the amenity details into an `AmenityDetailsResponse` object.\n   * \t- `map(ResponseEntity::ok)`: This line calls the `map` function again with the\n   * `ok` method as its argument, which sets the status code of the response entity to\n   * 200 (OK).\n   * \t- `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());`: This line\n   * provides an alternative response if the amenity details cannot be retrieved. The\n   * status code is set to `HttpStatus.NOT_FOUND` and the response entity is built with\n   * the appropriate details.\n   */\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  /**\n   * returns a set of amenities for a given community ID, maps them to a set of\n   * `GetAmenityDetailsResponse`, and returns an `Ok` response entity.\n   * \n   * @param communityId ID of the community for which the list of amenities is being retrieved.\n   * \n   * @returns a set of `GetAmenityDetailsResponse` objects containing the list of\n   * amenities for a given community ID.\n   * \n   * \t- `ResponseEntity`: This is the top-level class representing an HTTP response\n   * entity, which contains a `body` property that holds the actual response data.\n   * \t- `ok`: This is a sub-class of `ResponseEntity` that indicates the response status\n   * code is 200 (OK).\n   * \t- `Set<GetAmenityDetailsResponse>`: This is the set of `AmenityDetailsResponse`\n   * objects returned by the function, which have been transformed from the `Amenity`\n   * objects returned by the `listAllAmenities` method.\n   * \t- `amenitySDJpaService`: This is a Java interface that provides methods for\n   * interacting with the amenity data stored in a SQL database.\n   * \t- `amenityApiMapper`: This is an instance of a class that maps `Amenity` objects\n   * to `GetAmenityDetailsResponse` objects, which is used to transform the data returned\n   * by the `listAllAmenities` method into the desired response format.\n   */\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  /**\n   * takes a community ID and an AddAmenityRequest, creates new amenities using the JPA\n   * service, and returns a ResponseEntity with the created amenities or a NOT_FOUND\n   * response if any error occurs.\n   * \n   * @param communityId ID of the community to which the amenities will be added.\n   * \n   * @param request AddAmenityRequest object containing the amenities to be added to\n   * the community, which is used by the method to create the new amenities in the database.\n   * \n   * \t- `communityId`: The ID of the community to which the amenities will be added.\n   * \t- `request.getAmenities()`: An array of `AddAmenityRequest.Amenity` objects\n   * representing the amenities to be added to the community. Each object contains\n   * information such as the name, type, and location of the amenity.\n   * \n   * @returns a `ResponseEntity` object representing a successful addition of amenities\n   * to a community.\n   * \n   * \t- `ResponseEntity<AddAmenityResponse>`: This is a generic type that represents\n   * an entity with a response message and data. In this case, the response message is\n   * an instance of `AddAmenityResponse`, which contains information about the added amenities.\n   * \t- `AddAmenityResponse`: This class represents the response message returned by\n   * the function, containing a list of `Amenity` objects that were added to the community.\n   * \t- `amenityList`: This is a list of `Amenity` objects that were added to the community.\n   * \t- `communityId`: This is the ID of the community where the amenities were added.\n   * \n   * Overall, the function returns a response entity with an `AddAmenityResponse` message\n   * and a list of `Amenity` objects representing the added amenities.\n   */\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  /**\n   * deletes an amenity based on its ID, returning a response entity with a status code\n   * indicating the outcome of the operation.\n   * \n   * @param amenityId identifier of an amenity to be deleted.\n   * \n   * @returns a HTTP `NO_CONTENT` status code indicating successful deletion of the amenity.\n   * \n   * \t- `isAmenityDeleted`: A boolean value indicating whether the amenity was successfully\n   * deleted or not. If the amenity was successfully deleted, this property is set to\n   * `true`, otherwise it is set to `false`.\n   * \t- `HttpStatus`: The HTTP status code of the response entity. In case the amenity\n   * was successfully deleted, the status code is set to `NO_CONTENT` (HTTP 204),\n   * otherwise it is set to `NOT_FOUND` (HTTP 404).\n   */\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  /**\n   * updates an amenity in the database based on a valid request body, and returns a\n   * response entity indicating the result of the update operation.\n   * \n   * @param amenityId ID of the amenity being updated, which is used to identify the\n   * amenity in the database for updating purposes.\n   * \n   * @param request UpdateAmenityRequest object containing the updated amenity data,\n   * which is converted to an AmenityDto object by the amenityApiMapper and then used\n   * to update the amenity in the database by the amenitySDJpaService.\n   * \n   * \t- `@Valid`: This annotation is used to indicate that the request body must contain\n   * valid data.\n   * \t- `@RequestBody`: This annotation specifies that the request body contains the\n   * request details.\n   * \t- `UpdateAmenityRequest` : This is the class that represents the request body,\n   * which contains fields for updating amenity details.\n   * \n   * @returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT` status code indicating\n   * that the amenity was successfully updated.\n   * \n   * \t- `isUpdated`: This boolean variable indicates whether the amenity was updated\n   * successfully or not.\n   * \t- `HttpStatus`: The HTTP status code associated with the response entity. In this\n   * case, it can be either `NO_CONTENT` (204) or `NOT_FOUND` (404).\n   */\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 37,
                "end": 43
              }
            },
            "item_type": "class",
            "length": 174
          },
          {
            "id": "0f7754fd-3aa5-3780-4e49-52003769f3cf",
            "ancestors": [
              "9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"
            ],
            "type": "function",
            "description": "retrieves amenity details from the database using the `amenitySDJpaService`. It then maps the result to an `AmenityDetailsResponse` object using the `amenityApiMapper` and returns a `ResponseEntity` with a status of `OK` or an error message if the amenity ID is not found.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "identifier of an amenity that is being requested, and it is used to retrieve the details of that amenity from the database by the `amenitySDJpaService`.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `OkResponseEntity` containing the details of the amenity with the provided ID.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response to a REST API call. It contains information about the status code and body of the response.\n* `ok`: This is a method on `ResponseEntity` that indicates whether the response was successful (i.e., with a 200 status code). If `orElse` is called with a non-empty `Optional`, this property will be set to `true`. Otherwise, it will be set to `false`.\n* `status`: This is an instance of `HttpStatus`, which represents the status code of the response. In this case, it will be either `HttpStatus.NOT_FOUND` if the amenity could not be found, or `HttpStatus.OK` otherwise.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n",
              "description": "\nIn this example, the getAmenityDetails method is called with a parameter of type String (amenityId), which is used to identify an amenity in the database for retrieving its details.\n\nThe code inside the method first uses the amenitySDJpaService's getAmenityDetails method to retrieve the amenity details based on the given amenity ID.\n\nThen, it maps the AmenityDto object returned by the getAmenityDetails method into an AmenityDetailsResponse object using the amenityApiMapper's amenityToAmenityDetailsResponse method.\n\nFinally, it wraps the response entity with an OK (200) status code and returns it as a ResponseEntity object. If the amenity is not found in the database, then a NOT_FOUND (404) status code is returned instead."
            },
            "name": "getAmenityDetails",
            "code": "@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 51,
                "end": 74
              }
            },
            "item_type": "method",
            "length": 8
          },
          {
            "id": "53aefc5a-0de1-adbc-e648-8e7988ef5ff4",
            "ancestors": [
              "9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"
            ],
            "type": "function",
            "description": "list all amenities for a given community ID and map them to `GetAmenityDetailsResponse` objects for return in a `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of the community whose amenities are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "SetGetAmenityDetailsResponse",
              "description": "a `ResponseEntity` object containing a set of `GetAmenityDetailsResponse` objects, representing the list of amenities for the specified community.\n\n* `Set<GetAmenityDetailsResponse>` represents a set of `GetAmenityDetailsResponse` objects, which contain details of each amenity.\n* `amenitySDJpaService.listAllAmenities(communityId)` returns a set of `Amenity` objects, which are the entities being transformed into `GetAmenityDetailsResponse` objects.\n* `amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities)` maps each `Amenity` object to a `GetAmenityDetailsResponse` object, using a custom mapping logic.\n\nTherefore, the output of the `listAllAmenities` function is a set of `GetAmenityDetailsResponse` objects, each containing details of an amenity.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n    @PathVariable String communityId) {\n  Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n  Set<GetAmenityDetailsResponse> response =\n      amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n  return ResponseEntity.ok(response);\n}\n",
              "description": "\nThis method would be used when a client wants to retrieve all the available amenities for a specific community. The method would first get all the amenities from the `AmenitySDJpaService` class, which would then return a set of `Amenity` objects. The response entity would then map the retrieved amenities using the `amenityApiMapper` and convert them into a set of `GetAmenityDetailsResponse` objects. The method would finally return an HTTP status code indicating success (200) with the converted response object as the value of the `ResponseEntity`."
            },
            "name": "listAllAmenities",
            "code": "@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }",
            "location": {
              "start": 106,
              "insert": 106,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 83,
                "end": 105
              }
            },
            "item_type": "method",
            "length": 8
          },
          {
            "id": "83b83abf-de8c-4592-ad4b-920275048dfe",
            "ancestors": [
              "9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"
            ],
            "type": "function",
            "description": "adds amenities to a community through JPA service, maps the result to AddAmenityResponse object and returns ResponseEntity with ok status or notFound status if error occurs.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to which the amenities are being added.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "AddAmenityRequest",
                "description": "AddAmenityRequest object containing the amenities to be added to a community, which is used by the `amenitySDJpaService` to create new amenities in the community.\n\n* `communityId`: The ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of `AddAmenityRequest.Amenity` objects representing the amenities to be added to the community. Each object in the array contains properties such as `name`, `description`, and `type`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddAmenityResponse",
              "description": "a `ResponseEntity` object with an `ok` status and a list of created amenities.\n\n* `ResponseEntity<AddAmenityResponse>`: This is an entity that contains a `AddAmenityResponse` object and an `HttpStatusCode`. The `AddAmenityResponse` object represents the result of adding amenities to a community, and it has several attributes, including `amenities`, which is a list of added amenities.\n* `map(function)`: This method is used to map the output of the `createAmenities()` method, which returns a list of amenities, to an `AddAmenityResponse` object. The `map()` method takes a function as its argument, which in this case is a lambda expression that extracts the `amenities` list from the returned list of amenities and returns it as a `AddAmenityResponse` object.\n* `orElse(function)`: This method is used to provide an alternative output if the `createAmenities()` method returns an empty list. The `orElse()` method takes a function as its argument, which in this case is a lambda expression that creates a `ResponseEntity` with an `HttpStatusCode` of `404` and builds it using the `build()` method.\n* `map(function)`: This method is used to map the output of the `orElse()` method to an `AddAmenityResponse` object. The `map()` method takes a function as its argument, which in this case is a lambda expression that extracts the `HttpStatusCode` and the `AddAmenityResponse` object from the returned `ResponseEntity` and returns them as a single output.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate AmenitySDJpaService amenitySDJpaService;\n\n@Override\npublic void addAmenitiesToCommunity(String communityId, AddAmenityRequest request) {\n    ResponseEntity<AddAmenityResponse> response =\n            this.amenitySDJpaService.addAmenityToCommunity(communityId, request);\n    // response contains the result of the operation\n}\n",
              "description": "\nThis code would add amenities to a community based on the `communityId` and the `AddAmenityRequest`. The method would return an instance of `ResponseEntity<AddAmenityResponse>` that contains the result of the operation."
            },
            "name": "addAmenityToCommunity",
            "code": "@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 114,
                "end": 143
              }
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "8922992f-b675-4c84-494b-885b5148b83e",
            "ancestors": [
              "9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"
            ],
            "type": "function",
            "description": "deletes an amenity from the database based on its ID, returning a HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "ID of the amenity to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the amenity was successfully deleted and no content was returned in response.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found, and the function returned an error message.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = this.amenityController.deleteAmenity(\"1\");\nassertEquals(response.statusCode(), HttpStatus.NO_CONTENT);\n",
              "description": "\nHere, the parameter \"1\" is passed to the method deleteAmenity, which represents the ID of an amenity to be deleted. The response variable is assigned to the result of calling this method, and then the HTTP status code of the response is asserted to be HttpStatus.NO_CONTENT. This indicates that the amenity was successfully deleted."
            },
            "name": "deleteAmenity",
            "code": "@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 169,
              "insert": 169,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 153,
                "end": 168
              }
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "b13be521-3774-6ca6-e644-dcca04bb8083",
            "ancestors": [
              "9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"
            ],
            "type": "function",
            "description": "updates an amenity in the system by receiving a request with the amenity details and updating the amenity information in the database using the `amenitySDJpaService`. If the update is successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT`.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "unique identifier of the amenity being updated.",
                "complex_type": false
              },
              {
                "name": "request",
                "type_name": "UpdateAmenityRequest",
                "description": "UpdateAmenityRequest object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must contain valid data according to the schema defined in the JPA annotation.\n* `@RequestBody`: Marks the request body as a serialized object containing the update amenity details.\n* `UpdateAmenityRequest` is the class that contains the attributes of the amenity to be updated, along with any additional information required for the update operation.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the update was successful or not.\n\n* `HttpStatus.NO_CONTENT`: This indicates that the amenity was successfully updated, and no additional content was returned in the response body.\n* `HttpStatus.NOT_FOUND`: This indicates that the amenity could not be found, and the function returned an error message.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = updateAmenity(\"1\", new UpdateAmenityRequest()\n    .setName(\"Updated name\")\n    .setDescription(\"New description\")\n    .setType(AmenityType.FITNESS_CENTER)\n);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"The amenity was updated successfully\");\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    System.out.println(\"The amenity with the provided ID does not exist\");\n}\n",
              "description": "\nIn this example, we first set the amenity ID to \"1\". Then, we create an instance of UpdateAmenityRequest and set its name, description, and type properties. Finally, we call the updateAmenity method and pass in the amenityId parameter as well as the UpdateAmenityRequest object. The response entity returned by the method is then checked for a status code of HttpStatus.NO_CONTENT, indicating that the amenity was updated successfully. If the response does not contain this status code, it means that the amenity with the provided ID does not exist."
            },
            "name": "updateAmenity",
            "code": "@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 205,
              "insert": 205,
              "offset": " ",
              "indent": 2,
              "comment": {
                "start": 178,
                "end": 204
              }
            },
            "item_type": "method",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationController.java",
    "path": "service/src/main/java/com/myhome/controllers/AuthenticationController.java",
    "content": {
      "structured": {
        "description": "An `AuthenticationController` class that implements `AuthenticationApi`, a Spring Boot REST controller responsible for handling login requests. The class has a single method, `login()`, which takes a valid `LoginRequest` object as input and returns a `ResponseEntity<Void>` object with the user ID and JWT token in the HTTP headers. The `createLoginHeaders()` method is used to generate the HTTP headers based on the `AuthenticationData` object returned by the `authenticationService.login()` method.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "09b5bd6d-7823-0fa4-754e-08b5ad87a0b7",
            "ancestors": [],
            "type": "function",
            "description": "is a Spring Boot REST controller that implements the AuthenticationApi interface. It handles login requests and returns an HTTP response with the user ID and JWT token for authentication. The class has one method, `login()`, which takes a valid `LoginRequest` object as input and returns a ResponseEntity with the user ID and JWT token.",
            "name": "AuthenticationController",
            "code": "@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 21
          },
          {
            "id": "116b4777-f5c0-8489-274f-fe9776d0f3fb",
            "ancestors": [
              "09b5bd6d-7823-0fa4-754e-08b5ad87a0b7"
            ],
            "type": "function",
            "description": "authenticates a user using the provided login request data and returns an `ResponseEntity` with a `Void` body and custom headers containing authentication data.",
            "params": [
              {
                "name": "loginRequest",
                "type_name": "LoginRequest",
                "description": "authentication request containing the user credentials for authentication verification and validation by the `authenticationService`.\n\n* The `@Valid` annotation on the `LoginRequest` parameter indicates that the object must be validated before it can be processed by the method.\n* The `authenticationService` field is used to call the `login` method, which takes the `LoginRequest` object as a parameter and returns an authentication data object.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing an `OK` status and custom headers generated based on the `AuthenticationData` result.\n\n* `ResponseEntity`: This is an instance of a class that represents a response entity, which is a general-purpose response class in Spring WebFlux. It contains information about the status code, headers, and body of the response.\n* `ok()`: This is a method that returns a `ResponseEntity` instance with a status code of 200 (OK), indicating that the login request was successful.\n* `headers()`: This is a method that returns a list of headers, which are key-value pairs that provide additional information about the response. In this case, the headers contain information about the authentication data.\n* `build()`: This is a method that builds the response entity by combining the status code, headers, and body.\n\nOverall, the output of the `login` function is a successful response with information about the authentication data.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@RestController\npublic class AuthenticationController implements AuthenticationApi {\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n}\n",
              "description": ""
            },
            "name": "login",
            "code": "@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "224a2b39-e5e9-c49d-4e4e-89b1a12ce74e",
            "ancestors": [
              "09b5bd6d-7823-0fa4-754e-08b5ad87a0b7"
            ],
            "type": "function",
            "description": "generates HTTP headers for login authentication, adding user ID and JWT token to the headers.",
            "params": [
              {
                "name": "authenticationData",
                "type_name": "AuthenticationData",
                "description": "login data of a user, providing the user ID and JWT token for authentication purposes.\n\n* `getUserId()`: Retrieves the user ID associated with the authentication data.\n* `getJwtToken()`: Retrieves the JWT token issued for the user ID.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpHeaders",
              "description": "a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class in Java, which contains a collection of HTTP headers.\n* `userId`: The value of this header is a string representing the user ID associated with the login credentials provided in the `authenticationData` parameter.\n* `token`: The value of this header is a string representing the JWT token issued to the user for authentication purposes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "private void Example() {\n    AuthenticationData authenticationData = new AuthenticationData(\"user\", \"token\");\n    HttpHeaders headers = createLoginHeaders(authenticationData);\n}\n",
              "description": "\nIn this example, a user with the id 'user' and jwt token 'token' is created. Then, the method createLoginHeaders is called with the object as an argument. The returned value, headers, contains two headers, the user id header with the value of \"userId\" and the JWT token header with the value of \"token\"."
            },
            "name": "createLoginHeaders",
            "code": "private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "BookingController.java",
    "path": "service/src/main/java/com/myhome/controllers/BookingController.java",
    "content": {
      "structured": {
        "description": "A `BookingController` class that implements `BookingsApi`, a RESTful API for managing bookings. The controller handles DELETE requests for deleting bookings based on their amenity and booking IDs. It uses the `BookingService` to delete bookings, returning a response indicating whether the deletion was successful or not.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.BookingController Pages: 1 -->\n<svg width=\"190pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 190.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.BookingController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"182,-30 0,-30 0,0 182,0 182,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Booking</text>\n<text text-anchor=\"middle\" x=\"91\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129.5,-85 52.5,-85 52.5,-66 129.5,-66 129.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91,-55.65C91,-47.36 91,-37.78 91,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"87.5,-55.87 91,-65.87 94.5,-55.87 87.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "08b0e386-47db-a28a-9342-cfc1608d6efd",
            "ancestors": [],
            "type": "function",
            "description": "is a Java class that implements the BookingsApi interface and provides methods for managing bookings. The class has a single method, deleteBooking(), which takes two path variables (amenityId and bookingId) and uses the BookingService to delete a booking. If the booking is successfully deleted, a ResponseEntity with a status code of NO_CONTENT is returned. Otherwise, a ResponseEntity with a status code of NOT_FOUND is returned.",
            "name": "BookingController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class BookingController implements BookingsApi {\n\n  private final BookingService bookingSDJpaService;\n\n  @Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 18
          },
          {
            "id": "44c358b0-9ae9-58bf-134d-419fbe6204b8",
            "ancestors": [
              "08b0e386-47db-a28a-9342-cfc1608d6efd"
            ],
            "type": "function",
            "description": "deletes a booking based on the provided amenity ID and booking ID, returning a ResponseEntity with a status code indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "amenityId",
                "type_name": "String",
                "description": "unique identifier for an amenity associated with the booking being deleted.",
                "complex_type": false
              },
              {
                "name": "bookingId",
                "type_name": "String",
                "description": "ID of the booking that needs to be deleted.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted.\n\n* `ResponseEntity`: This is the class that represents an HTTP response entity, which contains the status code and body of the response. In this case, the status code is `NO_CONTENT` or `NOT_FOUND`, depending on whether the booking was successfully deleted or not.\n* `status`: This is a method that returns the HTTP status code of the response entity. The value of this method is `NO_CONTENT` if the booking was successfully deleted, and `NOT_FOUND` otherwise.\n* `build()`: This is a method that builds the response entity by setting its status code and body.\n\nIn summary, the output of the `deleteBooking` function is an HTTP response entity with a status code indicating whether the booking was successfully deleted or not.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = bookingController.deleteBooking(\"amenityId\", \"bookingId\");\n    if (response.getStatusCode().equals(HttpStatus.NO_CONTENT)) {\n        System.out.println(\"The booking was deleted successfully.\");\n    } else {\n        System.err.println(\"Error: The booking could not be found.\");\n    }\n",
              "description": ""
            },
            "name": "deleteBooking",
            "code": "@Override\n  public ResponseEntity<Void> deleteBooking(@PathVariable String amenityId,\n      @PathVariable String bookingId) {\n    boolean isBookingDeleted = bookingSDJpaService.deleteBooking(amenityId, bookingId);\n    if (isBookingDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityController.java",
    "path": "service/src/main/java/com/myhome/controllers/CommunityController.java",
    "content": {
      "structured": {
        "description": "An API for managing communities and their associated houses, admins, and details. The API handles various CRUD (create, read, update, delete) operations on these entities, including listing all communities, listing community details, adding or removing admins or houses from a community, deleting a community, and updating community details. The code uses Spring WebFlux as the web framework and Spring Data JPA as the data access layer.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "d5e94d83-38f9-a092-3341-a76ecb7ad225",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "CommunityController",
            "code": "@RequiredArgsConstructor\n@RestController\n@Slf4j\npublic class CommunityController implements CommunitiesApi {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  @Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 56,
              "insert": 56,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 152
          },
          {
            "id": "236a1b8d-9afc-12a6-9349-e605cc1dfa36",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "receives a `CreateCommunityRequest` from the client and creates a new community using the provided information. It then mappers the created community into a `CreateCommunityResponse` and returns it as a response entity with a status code of `CREATED`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateCommunityRequest",
                "description": "CreateCommunityRequest object that contains the details of the community to be created, which is used by the method to create the community and return the response.\n\n* `@Valid` - The input is validated using bean validation.\n* `@RequestBody` - The input is passed as a JSON object in the request body.\n* `CreateCommunityRequest request` - The input represents a create community request, containing attributes such as name, description, and tags.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "CreateCommunityResponse",
              "description": "a `CreateCommunityResponse` object containing the created community details.\n\n* `CreateCommunityResponse`: This class represents the response to the create community request, containing information about the created community.\n* `communityId`: A unique identifier for the created community.\n* `name`: The name of the created community.\n* `description`: A brief description of the created community.\n* `members`: A list of members in the created community.\n* `owners`: A list of owners in the created community.\n\nThe function returns a `ResponseEntity` with a status code of `CREATED` and the `CreateCommunityResponse` object as its body.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityService communityService;\n\n// Create a new community using CreateCommunityRequest as the body and the name as \"My Community\"\nCreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My Community\");\n\nResponseEntity<CreateCommunityResponse> response = createCommunity(request);\nassertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n",
              "description": "\nThe above code will test the `createCommunity` method by creating a new community using the `CreateCommunityRequest` class and setting the name to \"My Community\". It then asserts that the response status is equal to `HttpStatus.CREATED`."
            },
            "name": "createCommunity",
            "code": "@Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }",
            "location": {
              "start": 63,
              "insert": 63,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "acc4c505-876d-32a3-414e-c22f9cca1e82",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "receives a `Pageable` object and lists all communities from the service, maps them to a REST API response, and returns it in a `ResponseEntity` with an HTTP status code of OK and the response body containing the listed communities.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page request parameters, such as the number of communities to display per page, and enables the function to retrieve the requested number of communities from the database.\n\n* `@PageableDefault(size = 200)` - This annotation sets the default page size to 200.\n* `Pageable` - This interface defines the methods for navigating through a page of results, such as `getPageNumber()` and `getPageSize()`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetCommunityDetailsResponse",
              "description": "a list of community details in REST API format.\n\n* `GetCommunityDetailsResponse`: This class represents the response to the list community request. It has a field `getCommunities()` containing a set of `GetCommunityDetailsResponseCommunity` objects.\n* `GetCommunityDetailsResponseCommunity`: This class represents an individual community detail in the response. It has fields for the community ID, name, and description.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable page = PageRequest.of(0, 200); // create a new pageable object with a starting index of zero and size 200\nList<Community> communityDetails = communityService.listAll(page);\nSet<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n    communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\nGetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\nresponse.getCommunities().addAll(communityDetailsResponse);\n\nreturn ResponseEntity.status(HttpStatus.OK).body(response);\n",
              "description": "\nThe method listAllCommunity is returning a list of all communities, with each community in the list being represented by a Community object.  It then maps each of these objects to a GetCommunityDetailsResponseCommunity object using communityApiMapper.communitySetToRestApiResponseCommunitySet().  These objects are then added to the response object GetCommunityDetailsResponse, which is returned as a ResponseEntity with a status of HttpStatus.OK."
            },
            "name": "listAllCommunity",
            "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 75,
              "insert": 75,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 14
          },
          {
            "id": "39bf4f5d-459b-9eb3-8c48-4d5ff200b353",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "retrieves community details for a given ID using the `communityService` and maps the response to a `GetCommunityDetailsResponse`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which details are requested.\n\n* `log.trace(\"Received request to get details about community with id[{}],\", communityId)`: This line logs a trace message indicating that a request has been received to retrieve details about a community with a specific ID. The ID is included in the message as a parameter.\n* `@PathVariable String communityId`: This annotation indicates that the `communityId` variable is passed in from the URL path and is of type `String`.\n* `communityService.getCommunityDetailsById(communityId)`: This line calls the `getCommunityDetailsById` method of the `communityService` class, passing in the `communityId` as a parameter. This method retrieves the details of a community with the provided ID.\n* `map(Function<T, ResponseEntity> mappingFunction)`: This line applies a mapping function to the result of the `getCommunityDetailsById` method. The function maps the resulting `Community` object to a `GetCommunityDetailsResponse` object.\n* `new GetCommunityDetailsResponse().communities(communities)`: This line creates a new instance of the `GetCommunityDetailsResponse` class and sets its `communities` field to the list of communities retrieved from the database.\n* `map(Function<T, ResponseEntity> mappingFunction)`: This line applies another mapping function to the result of the previous mapping function. The function maps the resulting `ResponseEntity` object to an instance of `ResponseEntity` with a status code of `OK`.\n\nTherefore, the `listCommunityDetails` function retrieves the details of a community with a specific ID and returns a `GetCommunityDetailsResponse` object containing the list of communities retrieved from the database.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing a successful response with a list of communities.\n\n* `ResponseEntity<GetCommunityDetailsResponse>`: This is the type of the returned response entity, which contains a list of community details in the `communities` field.\n* `GetCommunityDetailsResponse`: This class represents the response to the request for community details. It has a single field called `communities`, which is a list of community details.\n* `communities(List<Community>)': This method converts the list of community details returned by the service into a list of `GetCommunityDetailsResponse` objects, which are then returned in the response entity.\n* `map(Function<ResponseEntity<GetCommunityDetailsResponse>, ResponseEntity<GetCommunityDetailsResponse>> mapper)`: This line uses a lambda function to map the original response entity to a new one with the same type but with additional fields added. In this case, the lambda function takes the original response entity and returns a new one with the `communities` field set to a list of community details.\n* `map(Function<ResponseEntity<GetCommunityDetailsResponse>, ResponseEntity<GetCommunityDetailsResponse>> mapper)`: This line is similar to the previous one, but it maps the original response entity to a new one with the same type but with different fields removed. In this case, the lambda function takes the original response entity and returns a new one with the `communities` field removed.\n* `map(Function<ResponseEntity<GetCommunityDetailsResponse>, ResponseEntity<GetCommunityDetailsResponse>> mapper)`: This line is similar to the previous two, but it maps the original response entity to a new one with a different type. In this case, the lambda function takes the original response entity and returns a new one with the `communities` field set to a list of `Community` objects instead of a list of `GetCommunityDetailsResponse` objects.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line provides an alternative way to handle the response if the original request fails. It returns a `ResponseEntity.notFound()` object, which is a standard response for a 404 status code.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityController communityController;\n\n@Test\npublic void shouldReturnCommunityDetails() {\n    ResponseEntity<GetCommunityDetailsResponse> response =\n            communityController.listCommunityDetails(\"1\");\n\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    assertThat(response.getBody().getCommunities())\n            .containsOnly(new GetCommunityDetailsResponseCommunity(\"community-name\", \"1\"));\n}\n",
              "description": "\nThis test will check if the endpoint returns a 200 OK status and that it contains the community with ID 1."
            },
            "name": "listCommunityDetails",
            "code": "@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 90,
              "insert": 90,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "f70a9b30-8f50-369b-3b41-868dda05b1d8",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "receives a community ID and page number, retrieves the list of admins for that community from the database using `communityService.findCommunityAdminsById`, maps the results to a `HashSet`, converts the `HashSet` to a `ListCommunityAdminsResponse` object, and returns the response entity.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community for which the admins are to be listed.\n\n* `String communityId`: The ID of the community for which the admins need to be listed.\n\nThe function performs the following operations:\n\n1. Logs a trace message to track the request.\n2. Calls the `findCommunityAdminsById` method of the `communityService` to retrieve a list of admins for the specified community ID.\n3. Maps the result to a new `HashSet` object.\n4. Calls the `communityApiMapper` to map the `CommunityAdmin` objects to the desired REST API response format.\n5. Maps the resulting `List<CommunityAdmin>` to a `ListCommunityAdminsResponse` object.\n6. Returns an `ResponseEntity` with a status code of `OK`. If the call fails, it returns an `ResponseEntity` with a status code of `NOT FOUND`.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and page size of the result list, which allows for pagination of the community admins.\n\n* `@PageableDefault(size = 200)` specifies that the pageable should have a default size of 200.\n* `Pageable` is an interface that provides methods for navigating through a sequence of objects, typically in a paginated manner.\n* `map()` method is used to map the deserialized input to a new object, which in this case is a `HashSet` containing the community admins.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of community admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the overall response entity, which contains the list of community admins in its `admins` field.\n* `ListCommunityAdminsResponse`: This class represents the list of community admins, which includes a list of `CommunityAdmin` objects.\n* `CommunityAdmin`: This class represents a single community admin, including their ID, username, and email address.\n* `HashSet<CommunityAdmin>`: This is the container for the list of community admins, which is created using the `map()` method to transform the result of the `findCommunityAdminsById()` method into a list of `CommunityAdmin` objects.\n* `communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet`: This method is used to map the list of `CommunityAdmin` objects to a list of `ListCommunityAdminsResponse` objects, which is the desired output format for the function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Example 1: List the admins for a community with id \"my_community\"\nResponseEntity<ListCommunityAdminsResponse> response = restTemplate.getForEntity(\n    \"/communities/my_community/admins\",\n    new ParameterizedTypeReference<>() {});\nif (response.getStatusCode() == HttpStatus.OK) {\n  ListCommunityAdminsResponse body = response.getBody();\n  Set<String> admins = body.getAdmins();\n  // Do something with the list of community admins here\n}\n",
              "description": "\nIn this example, we are using a Spring `RestTemplate` to send an HTTP GET request to `/communities/my_community/admins`, which is the endpoint for listing the admins in the community with the ID \"my_community\". The `ParameterizedTypeReference` is used to specify that the response body should be deserialized into a `ListCommunityAdminsResponse` object.\nThis method call would return an HTTP 200 OK response if the community exists and has admins associated with it, and a `ListCommunityAdminsResponse` object in the response body containing the list of admin IDs for that community. If the community does not exist or has no admins associated with it, it would return an HTTP 404 NOT FOUND response."
            },
            "name": "listCommunityAdmins",
            "code": "@Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 104,
              "insert": 104,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "164828a4-c8bf-71a4-d54c-d407ee705910",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "receives a community ID and pageable parameters, retrieves community houses from the service, maps them to a set, converts them to a REST API response, and returns an `ResponseEntity`.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community for which the user is requesting to list all houses.\n\n* `communityId`: A string representing the unique identifier for a community.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "default page request, allowing for pagination of results from the community service.\n\nThe `@PageableDefault(size = 200)` annotation on the `pageable` parameter sets the default page size to 200.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityGetHouseDetailsResponse",
              "description": "a `ResponseEntity` containing a list of houses belonging to the specified community.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This represents an entity that contains a response to the list community houses request. The response is in the form of a list of `CommunityHouseSet`, which are sets of `CommunityHouse` objects.\n* `GetHouseDetailsResponse`: This class represents the response to the list community houses request, which contains a list of `CommunityHouse` objects.\n* `houses`: This is a list of `CommunityHouse` objects that make up the response. Each object in the list contains information about a particular house in the community.\n* `Pageable`: This represents the pageable response, which allows for pagination of the list of houses. The `size` attribute specifies the number of houses to include on each page.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "GetHouseDetailsResponse response = communityApi.listCommunityHouses(communityId, pageable).getBody();\nSet<GetHouseDetailsResponseCommunity> houses = response.getCommunities();\nfor (GetHouseDetailsResponseCommunity house : houses) {\n    String houseId = house.getHouseId();\n}\n",
              "description": "\nNote that the method returns a ResponseEntity which wraps the GetHouseDetailsResponse object. Therefore, to get the response body, we need to use the getBody() method. Afterwards, we can iterate over the Set of GetHouseDetailsResponseCommunity objects, where each object contains information about a particular house in the community. In this case, we are extracting the houseId of each house and printing it to the console."
            },
            "name": "listCommunityHouses",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 118,
              "insert": 118,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "29fef72f-86b4-7bae-d64f-1eb678021626",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "adds admins to a community based on a request and returns a response entity with the updated community information.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community whose admins are being added.\n\n* `communityId`: A string representing the ID of the community for which admins are being added.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddCommunityAdminRequest",
                "description": "AddCommunityAdminRequest object containing the information about the new admin users to be added to the community, which is validated and used to add them to the community.\n\n* `@Valid`: Indicates that the request body must contain a valid `AddCommunityAdminRequest` object.\n* `@PathVariable`: Represents the community ID passed as a path variable in the URL.\n* `@RequestBody`: Marks the `AddCommunityAdminRequest` object as the request body, which is deserialized from the JSON format.\n* `AddCommunityAdminRequest`: A Java class that contains properties for adding admins to a community. These properties may include the user IDs of the admins to be added, and other relevant details.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityAdminResponse",
              "description": "a `ResponseEntity` with a status code of `CREATED` and a `AddCommunityAdminResponse` object containing the updated list of admins for the specified community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message with a status code and a body. The status code indicates whether the request was successful or not, while the body contains the response data.\n* `status`: This is an instance of the `HttpStatus` class, which represents the HTTP status code of the response. The possible values are 200 (OK), 400 (Bad Request), 401 (Unauthorized), etc.\n* `body`: This is an instance of the `AddCommunityAdminResponse` class, which contains the response data for the request. Specifically, it has a single attribute called `admins`, which is a set of strings representing the IDs of the newly added community administrators.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate CommunityController communityController;\n\n...\n\nSet<String> admins = new HashSet<>();\nadmins.add(\"userId1\");\nadmins.add(\"userId2\");\n\nAddCommunityAdminRequest addCommunityAdminsRequest = new AddCommunityAdminRequest();\naddCommunityAdminsRequest.setAdmins(admins);\n\nResponseEntity<AddCommunityAdminResponse> response = communityController.addCommunityAdmins(\"communityId\", addCommunityAdminsRequest);\n\nif (response.getStatusCode() == HttpStatus.CREATED) {\n    Set<String> adminsAdded = response.getBody().getAdmins();\n}\n",
              "description": "\nHere, we have a community with ID \"communityId\". We create an instance of the request object `AddCommunityAdminRequest` and set its property `admins` to two user IDs: \"userId1\" and \"userId2\".\nWe then call the method `addCommunityAdmins` on our `CommunityController` with these inputs, expecting a response with status code 201 (created). If this happens, we extract the set of admins that were added from the response body. Note that in this case, we assume that only user IDs are relevant for us, and so we simply use `getBody().getAdmins()` to retrieve them as a `Set<String>`.\n\nDo not use the following:\n"
            },
            "name": "addCommunityAdmins",
            "code": "@Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "e20a1c00-0766-c399-0f43-56d3f9018847",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "adds houses to a community identified by its ID. It receives a request with the houses to be added, converts them into a set of community house objects, and then adds them to the community using the `communityService`. If successful, it returns a response with the IDs of the added houses.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "identifier of the community to which the houses are being added.\n\n* `communityId`: A string representing the ID of the community to which houses will be added.\n\nThe function performs the following operations:\n\n1. Logs a trace message with the community ID.\n2. Maps the `AddCommunityHouseRequest` body's `houses` field to a set of `CommunityHouse` objects using the `communityApiMapper`.\n3. Calls the `addHousesToCommunity` method on the `communityService` with the community ID and the set of `CommunityHouse` objects as arguments.\n4. Checks if any houses were successfully added to the community by comparing the size of the `houseIds` set to 0. If it is not 0, a `AddCommunityHouseResponse` object is created with the `houseIds` set as its body and the response status code is set to `HttpStatus.CREATED`.\n5. Otherwise, the response status code is set to `HttpStatus.BAD_REQUEST`.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddCommunityHouseRequest",
                "description": "AddCommunityHouseRequest object containing the house names to be added to the specified community, which is passed from the client side as a valid JSON request body.\n\n* `@Valid`: This annotation is used to indicate that the input request body must be valid according to the specified schema.\n* `@PathVariable`: This annotation is used to inject a path variable from the URL into the function as a String parameter. In this case, it is used to pass the `communityId` parameter from the URL.\n* `@RequestBody`: This annotation is used to indicate that the input request body must be serialized and passed to the function as a single entity.\n* `AddCommunityHouseRequest`: This is the class that contains the properties of the input request, which are described below:\n\t+ `getHouses()`: This method returns a set of `CommunityHouseName` objects, which represent the houses to be added to the community.\n\t+ `getCommunityId()`: This method returns the ID of the community where the houses will be added.\n\nThe function first logs a trace message indicating that it has received a request to add houses to a community with the specified ID. Then, it performs the following actions:\n\n1. It converts the set of `CommunityHouseName` objects returned by `request.getHouses()` into a set of `CommunityHouse` objects using the `communityApiMapper.communityHouseNamesSetToCommunityHouseSet()` method.\n2. It adds the houses to the community using the `communityService.addHousesToCommunity()` method, passing in the ID of the community and the set of `CommunityHouse` objects as arguments.\n3. If the addition was successful (i.e., the number of added houses is non-zero and the number of house IDs in the response is non-zero), it returns a `ResponseEntity` with a status code of `CREATED` and a body containing an `AddCommunityHouseResponse` object. Otherwise, it returns a `ResponseEntity` with a status code of `BAD_REQUEST`.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddCommunityHouseResponse",
              "description": "a `ResponseEntity` object with a status code of `CREATED` and a `AddCommunityHouseResponse` object containing the added house IDs.\n\n* `AddCommunityHouseResponse`: This is the class that represents the response to the API request. It has a single property called `houses`, which is a set of strings representing the IDs of the added houses.\n* `HttpStatus`: This is an enumeration that represents the HTTP status code of the response. In this case, it can be either `CREATED` or `BAD_REQUEST`.\n* `ResponseEntity`: This is a class that represents the overall response to the API request. It has a `status` property and an `body` property, where the body contains the `AddCommunityHouseResponse` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void shouldAddCommunityHouse() {\n    // given\n    String communityId = \"1\";\n    List<CommunityHouseName> houseNames = new ArrayList<>();\n    houseNames.add(new CommunityHouseName(\"House-1\"));\n    AddCommunityHouseRequest request = new AddCommunityHouseRequest(houseNames);\n\n    // when\n    ResponseEntity<AddCommunityHouseResponse> response = communityController.addCommunityHouses(communityId, request);\n\n    // then\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n  }\n",
              "description": "\nThis example tests the method addCommunityHouses from CommunityController by providing a community id and a list of house names in the AddCommunityHouseRequest object. It checks that the response status code is equal to HttpStatus.CREATED, indicating that the houses were successfully added to the community."
            },
            "name": "addCommunityHouses",
            "code": "@Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }",
            "location": {
              "start": 149,
              "insert": 149,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 17
          },
          {
            "id": "625b9c9b-eec7-9799-e64e-8b8686730e99",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "deletes a house from a community based on the given community ID and house ID, returning a response entity indicating whether the operation was successful or not.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "12-digit unique identifier of a community that contains the house to be removed.\n\n* `String communityId`: The unique identifier for a community.\n* `String houseId`: The unique identifier for a house within a community.",
                "complex_type": true
              },
              {
                "name": "houseId",
                "type_name": "String",
                "description": "identifier of the house to be removed from the specified community.\n\n* `communityId`: The ID of the community that the house belongs to.\n* `houseId`: The unique identifier of the house to be removed from the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntityVoid",
              "description": "a `ResponseEntity` object representing a successful deletion of a house from a community, with a status code of `noContent`.\n\n* `ResponseEntity<Void>`: The type of the output is a response entity with a void type.\n* `<Void>`: The type parameter of the response entity is void.\n* `.noContent()`: The `build()` method returns a response entity with a status code of 204 (No Content).\n* `.orElseGet()`: This method allows for alternative ways to return a response entity if the `getCommunityDetailsById` and `removeHouseFromCommunityByHouseId` methods return a null value.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Void> removeCommunityHouse(\n    @PathVariable String communityId, @PathVariable String houseId) {\n  log.trace(\"Received request to delete house with id[{}] from community with id[{}]\",\n      houseId, communityId);\n\n  Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n  return communityOptional.filter(\n      community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n      .map(removed -> ResponseEntity.noContent().<Void>build())\n      .orElseGet(() -> ResponseEntity.notFound().build());\n}\n",
              "description": ""
            },
            "name": "removeCommunityHouse",
            "code": "@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 167,
              "insert": 167,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 15
          },
          {
            "id": "2a6946dc-40c7-a28b-4b4d-e71d02eb0118",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "receives the community ID and admin ID as path variables, and uses the `communityService` to remove an admin from a community. If successful, it returns a HTTP NO_CONTENT status code, otherwise it returns a NOT_FOUND status code.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "id of the community that the admin belongs to.\n\n* `communityId`: This is a string that represents the unique identifier for a community in the application. It could be a UUID or any other suitable identifier.",
                "complex_type": true
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "identifier of the admin to be removed from the community.\n\n* `communityId`: The ID of the community where the admin is to be removed.\n* `adminId`: The ID of the admin to be removed from the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the admin was successfully removed from the community.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the admin was successfully removed from the community.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the admin could not be found in the community, which means that either the admin ID or the community ID is invalid.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testRemoveAdminFromCommunity() {\n    String communityId = \"123\";\n    String adminId = \"456\";\n    \n    ResponseEntity<Void> response = communityService.removeAdminFromCommunity(communityId, adminId);\n    \n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n}\n",
              "description": "\nThis test removes an admin from a community with the id \"123\" and checks that the response status code is equal to HttpStatus.NO_CONTENT (204)."
            },
            "name": "removeAdminFromCommunity",
            "code": "@Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 183,
              "insert": 183,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "a4872a7a-c4cc-a4b8-624e-aef68901a1a8",
            "ancestors": [
              "d5e94d83-38f9-a092-3341-a76ecb7ad225"
            ],
            "type": "function",
            "description": "deletes a community identified by the `communityId` parameter, returning a `ResponseEntity` object indicating whether the deletion was successful or not.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "ID of the community to be deleted.\n\n* `communityId`: A string representing the ID of the community to be deleted.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP NO_CONTENT status code if the community was successfully deleted, and a NOT_FOUND status code otherwise.\n\n* HttpStatus.NO_CONTENT: This indicates that the community was successfully deleted.\n* HttpStatus.NOT_FOUND: This indicates that the specified community could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  void deleteCommunity_deletesGivenCommunity() {\n    String communityId = \"test-community\";\n\n    ResponseEntity<Void> response = controller.deleteCommunity(communityId);\n\n    assertThat(response).isEqualTo(ResponseEntity.status(HttpStatus.NO_CONTENT).build());\n  }\n",
              "description": ""
            },
            "name": "deleteCommunity",
            "code": "@Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 197,
              "insert": 197,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "HouseController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseController.java",
    "content": {
      "structured": {
        "description": "A HouseController class that implements the HousesApi interface. It provides RESTful endpoints for listing all houses, getting details of a specific house, and adding or deleting members of a house. The controller uses dependency injection and maps the responses to appropriate object types using Jackson mapping.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "ea2e243e-45ee-79af-6c42-bc3d4b5e1d26",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "HouseController",
            "code": "@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class HouseController implements HousesApi {\n  private final HouseMemberMapper houseMemberMapper;\n  private final HouseService houseService;\n  private final HouseApiMapper houseApiMapper;\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 81
          },
          {
            "id": "c21e08d1-7b76-8e88-bb4d-a178dcf62116",
            "ancestors": [
              "ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"
            ],
            "type": "function",
            "description": "receives a pageable request and returns a set of houses through the `houseService.listAllHouses()` method, which is then converted to a REST API response using `houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet()`. The response is then returned with the list of houses in the set.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "default page size and sorting options for listing all houses.\n\n* `@PageableDefault`: This annotation is used to specify default values for the pageable parameters, in this case, the size of the page to be retrieved. The value `200` indicates that the function will return a maximum of 200 houses per page.\n* `size`: This property represents the number of houses to be returned per page. It can take any non-negative integer value, and in this case, it is set to `200`.\n\nIn summary, the `pageable` input to the function has a single property, `size`, which specifies the maximum number of houses to be retrieved per page.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetHouseDetailsResponse",
              "description": "a `GetHouseDetailsResponse` object containing a set of `CommunityHouse` objects converted from the service's response.\n\n* `GetHouseDetailsResponse`: This class represents the response to the list all houses request. It has a set of `CommunityHouse` objects as its attribute.\n* `CommunityHouse`: This class represents an individual house in the list. It has several attributes, including the house ID, name, address, and more.\n* `Pageable`: This interface provides methods for pagination, which is used to page the results of the list all houses request. The `size` attribute specifies the number of houses to return per page.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "Pageable pageable = PageRequest.of(0, 20);\nResponseEntity<GetHouseDetailsResponse> response = houseController.listAllHouses(pageable);\nif (response.getStatusCode() == HttpStatus.OK) {\n    GetHouseDetailsResponse getHouseDetailsResponse = response.getBody();\n    // Use the response object to access the houses returned in the response body\n}\n",
              "description": ""
            },
            "name": "listAllHouses",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "93898c2e-f859-0ca8-dd45-d5000987a1ca",
            "ancestors": [
              "ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"
            ],
            "type": "function",
            "description": "receives a house ID and retrieves the details of that house from the service layer, mapping the response to a `GetHouseDetailsResponse` object and returning it as an `ResponseEntity`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "id of the house for which details are requested, and is used to retrieve the relevant house details from the service.\n\n* `log.trace(\"Received request to get details of a house with id[{}],\"` - This line traces the receiving of the request for the details of a particular house using the `log` facility in the logging framework. The format string `\"Received request to get details of a house with id[{}]\"`, where `houseId` is the actual value being passed as an argument, is used to generate a log message that provides additional context and information about the request.\n* `houseService.getHouseDetailsById(houseId)` - This line calls the `getHouseDetailsById` method of the `houseService` class, passing in the `houseId` as an argument. This method is responsible for retrieving the details of a particular house based on its ID.\n* `map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)` - This line uses the `map` method to apply a function to the result of the `getHouseDetailsById` call. The function being applied is `houseApiMapper::communityHouseToRestApiResponseCommunityHouse`, which is responsible for converting the house details from the API format used by the `houseService` to the REST API format expected by the `getHouseDetails` function.\n* `map(Collections::singleton)` - This line uses the `map` method again to apply a function to the result of the previous mapping operation. The function being applied is `Collections::singleton`, which returns a single item (i.e., the converted house details) from the result of the previous mapping operation.\n* `map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))` - This line uses the `map` method again to apply a function to the result of the previous mapping operation. The function being applied is `getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses)`, which creates a new `GetHouseDetailsResponse` instance and sets its `houses` field to the result of the previous mapping operation.\n* `map(ResponseEntity::ok) - This line uses the `map` method again to apply a function to the result of the previous mapping operation. The function being applied is `ResponseEntity::ok`, which returns a `ResponseEntity` instance with an HTTP status code of 200 (i.e., OK).\n* `orElse(ResponseEntity.notFound().build())` - This line provides an alternative to the previous mapping operation if it fails. The function being applied is `ResponseEntity.notFound().build()`, which creates a new `ResponseEntity` instance with an HTTP status code of 404 (i.e., NOT FOUND).",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of house details in REST API format.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the generic type of the response entity, which is a wrapper class for the actual response data.\n* `getHouseDetailsResponseCommunityHouses`: This is a list of community houses, which is the primary output of the function. Each house in the list is represented as an object with several attributes, including the house ID, name, and address.\n* `houses(getHouseDetailsResponseCommunityHouses)`: This is a method that takes a list of community houses as input and returns a single list of houses, which is the actual output of the function.\n* `ok`: This is a constant that indicates the response status code for a successful request. In this case, it means the response was successful and the requested data was found.\n* `notFound()`: This is a builder class that creates a response entity with a 404 status code, indicating that the requested data could not be found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<GetHouseDetailsResponse> response = houseController.getHouseDetails(\"houseId\");\n",
              "description": "\nIn this example, the house controller would return a Response Entity that contains a Get House Details Response with details about the house with id \"houseId\"."
            },
            "name": "getHouseDetails",
            "code": "@Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 68,
              "insert": 68,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          },
          {
            "id": "b2516efe-3749-128d-2344-4747d751263e",
            "ancestors": [
              "ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"
            ],
            "type": "function",
            "description": "receives a house ID and page size, retrieves the members of the house using the `houseService`, maps them to a `HashSet`, converts them to a REST API response, and returns it as an `ResponseEntity`.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house for which members are to be listed.\n\n* `houseId`: The unique identifier for a house, which can be used to retrieve information about the house and its members.\n* `@PageableDefault(size = 200)`: An annotation that specifies the default page size for the list of members returned in the response.",
                "complex_type": true
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "200 members of the house that are to be listed, as specified by the default page size of 200.\n\nThe `@PageableDefault` annotation specifies that the page size should be 200 by default.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "OkResponseEntity",
              "description": "a `ListHouseMembersResponse` object containing the list of members of the specified house.\n\n* `ResponseEntity`: This is the generic type of the response entity, which is an extension of the `ResponseEntity` class.\n* `ListHouseMembersResponse`: This is a custom response class that represents the list of house members. It has a single field called `members`, which is a list of `HouseMember` objects.\n* `ok`: This is a method on the `ResponseEntity` class that indicates the response was successful and includes the requested data.\n* `notFound`: This is a method on the `ResponseEntity` class that indicates the response was not successful (i.e., the house could not be found).\n* `houseId`: This is the ID of the house for which members are being listed.\n* `pageable`: This is a parameter that represents the pageable request, which allows for pagination of the list of members. It has a default value of `@PageableDefault(size = 200)`, which sets the page size to 200.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n",
              "description": ""
            },
            "name": "listAllMembersOfHouse",
            "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 79,
              "insert": 79,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "ae72589f-ebf0-cd93-c54f-9e939ec0d069",
            "ancestors": [
              "ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"
            ],
            "type": "function",
            "description": "receives a request to add members to a house, validates the request, and adds the members to the house's member list. If the addition is successful, it returns a response indicating the new members, otherwise it returns a NOT_FOUND status.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "ID of the house for which members are being added, and it is used to identify the house in the addHouseMembers method.\n\n* `houseId`: A string representing the ID of the house to which members will be added.\n\nThe function then performs the following operations:\n\n* Logs a trace message with the ID of the house and the request.\n* Maps the `AddHouseMemberRequest` DTO to a `Set` of `House Member` objects using the `houseMemberMapper`.\n* Calls the `addHouseMembers` method on the `houseService` with the ID of the house and the `Set` of `House Member` objects as arguments.\n* Checks if any members were saved successfully, and if not, returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND` status code.\n* If successful, creates a new `AddHouseMemberResponse` object with the saved `House Member` objects, and returns it as the response entity with a `HttpStatus.CREATED` status code.",
                "complex_type": true
              },
              {
                "name": "request",
                "type_name": "AddHouseMemberRequest",
                "description": "AddHouseMemberRequest object containing the information about the members to be added to the house.\n\n* `houseId`: The ID of the house to which members will be added.\n* `request.getMembers()`: A set of `HouseMemberDto` objects representing the new members to be added to the house.\n* `houseService.addHouseMembers(houseId, members)`: This method adds the members provided in the `request.getMembers()` set to the house with the given ID. The return value is a set of newly created `HouseMember` objects.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "AddHouseMemberResponse",
              "description": "a `ResponseEntity` object with a status code of either `HttpStatus.NOT_FOUND` or `HttpStatus.CREATED`, depending on whether any members were added successfully.\n\n* `response`: This is an instance of `AddHouseMemberResponse`, which contains a list of `House Member` objects representing the newly added members to the house.\n* `savedHouseMembers`: This is a set of `House Member` objects representing the members that were successfully saved in the database.\n* `size`: The size of the `savedHouseMembers` set, which can be used to determine the number of successfully added members.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Add members to a house with the given houseId and request\nAddHouseMemberRequest addHouseMemberRequest = new AddHouseMemberRequest();\naddHouseMemberRequest.setMembers(List.of(new HouseMember(\"John\", \"Doe\"), new HouseMember(\"Jane\", \"Doe\")));\nhouseController.addHouseMembers(houseId, addHouseMemberRequest);\n",
              "description": "\nIn this example, the method `addHouseMembers` is being used to add a list of members (`List<HouseMember>`) to a house with the given `houseId`. The request object `AddHouseMemberRequest` contains a list of members to be added and is passed as an argument to the method. If any member fails to be added, an error response is returned with status code 404 (Not Found). Otherwise, a success response is returned with status code 201 (Created) and the list of saved members in the body of the response object `AddHouseMemberResponse`."
            },
            "name": "addHouseMembers",
            "code": "@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 18
          },
          {
            "id": "64682819-d26c-10b5-a64b-3090c7f81e9d",
            "ancestors": [
              "ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"
            ],
            "type": "function",
            "description": "deletes a member from a house based on the specified house ID and member ID, returning a response entity with HTTP status code indicating the result of the operation.",
            "params": [
              {
                "name": "houseId",
                "type_name": "String",
                "description": "unique identifier of the house for which a member is to be deleted.\n\n* `log`: a logging object used to log messages related to the function's execution.\n* `houseService`: an interface or class that provides methods for managing houses.\n* `houseId`: a string representing the unique identifier of a house.\n* `memberId`: a string representing the unique identifier of a member to be deleted from the specified house.",
                "complex_type": true
              },
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the member to be deleted from the specified house.\n\n* `houseId`: The unique identifier for a house, which is used to identify the house in the system.\n* `memberId`: A unique identifier for a member within a house, which is used to identify the member in the system.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a HTTP NO_CONTENT status code indicating successful deletion of the member from the house.\n\n* The `ResponseEntity` object is built with an HTTP status code of either `NO_CONTENT` (204) or `NOT_FOUND` (404).\n* The `status` field of the `ResponseEntity` object contains the HTTP status code.\n* The `build()` method is used to create the complete `ResponseEntity` object.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = controller.deleteHouseMember(houseId, memberId);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    // Member was successfully deleted from house\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    // Member could not be found in the house or the house does not exist\n} else {\n    // Unexpected error occurred while trying to delete member from house\n}\n",
              "description": ""
            },
            "name": "deleteHouseMember",
            "code": "@Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberDocumentController.java",
    "path": "service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java",
    "content": {
      "structured": {
        "description": "A HouseMemberDocumentController that provides endpoints for managing house member documents through RESTful APIs. The controller uses Lombok and Spring Web Flux to handle HTTP requests and responses. It provides methods such as getHouseMemberDocument, uploadHouseMemberDocument, updateHouseMemberDocument, and deleteHouseMemberDocument to manage house member documents. These methods handle requests related to document retrieval, creation, updating, and deletion respectively.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "9194f9d6-389e-fe8b-7044-b3536731708b",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "HouseMemberDocumentController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}",
            "location": {
              "start": 39,
              "insert": 39,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 66
          },
          {
            "id": "609a6054-0cb8-4d84-394a-584d7bfc9dc8",
            "ancestors": [
              "9194f9d6-389e-fe8b-7044-b3536731708b"
            ],
            "type": "function",
            "description": "retrieves a house member document from the service and returns it as a byte array with an appropriate HTTP status code and headers.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member whose document is requested.\n\n* `memberId`: A string representing the member ID for which the document is being requested.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntitybyte",
              "description": "a `ResponseEntity` object containing the requested document content as a byte array, with appropriate headers and status code.\n\n* `HttpHeaders headers`: This object contains metadata about the response, such as caching instructions and content type.\n* `byte[] content`: The document's contents, represented as a byte array.\n* `ContentDisposition contentDisposition`: A builder for creating a ContentDisposition header, which specifies how the response should be handled by the client. In this case, it is set to \"inline\" and includes the filename of the document.\n* `ResponseEntity<byte[]> entity`: The overall response object, containing the headers and content.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<byte[]> response = getHouseMemberDocument(\"memberId\");\nif (response.getStatusCode() == HttpStatus.OK) {\n    // Handle successful request\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    // Handle not found request\n}\n",
              "description": ""
            },
            "name": "getHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 46,
              "insert": 46,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 24
          },
          {
            "id": "1ea06872-03c3-0c8a-dd44-6081387ad083",
            "ancestors": [
              "9194f9d6-389e-fe8b-7044-b3536731708b"
            ],
            "type": "function",
            "description": "processes a request to add a house member document, creating a new document entity if one does not exist for the provided member ID, and returning a `NO_CONTENT` status code upon successful addition or a `NOT_FOUND` status code otherwise.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of the house member whose document is being uploaded.\n\n* `memberId`: A string representing the unique identifier for a house member.",
                "complex_type": true
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "document to be uploaded for the specified member ID.\n\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: This is a request parameter containing the file to be uploaded as a house member document. The type of this parameter is `MultipartFile`, which means it can contain only files and not other types of data.\n* `log.trace(\"Received request to add house member documents\"`: This line logs a trace message indicating that the function has received a request to upload a house member document.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code indicating whether the operation was successful or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT)` - This status code indicates that the request was successful and no content was returned.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND)` - This status code indicates that the requested member document could not be found.\n\nThe function returns an `Optional` object, which contains a `HouseMemberDocument` object if it exists, or an empty `Optional` if it does not exist. The `map` method is used to transform the `Optional` into a `ResponseEntity` object with a status code indicating whether the request was successful or not. If the `Optional` is empty, the function returns a `ResponseEntity` with a status code of `HttpStatus.NOT_FOUND`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// The path variable \"memberId\" could be any string value representing the id of a house member\nString memberId = \"123456789\";\n\n// The request parameter \"memberDocument\" is a MultipartFile instance that holds the file content and meta-data\nMultipartFile memberDocument = new MultipartFile(\"file\", \"document.pdf\");\n\n// Calling the method with the path variable and request parameter would create a new document for the house member with id \"memberId\"\nhouseMemberDocumentController.uploadHouseMemberDocument(memberId, memberDocument);\n",
              "description": ""
            },
            "name": "uploadHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 71,
              "insert": 71,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "d6a95626-95c8-20bf-b147-fc625e05b1ae",
            "ancestors": [
              "9194f9d6-389e-fe8b-7044-b3536731708b"
            ],
            "type": "function",
            "description": "updates a house member's document based on a provided MultipartFile and member ID, returning a ResponseEntity with a NO_CONTENT status if successful or a NOT_FOUND status otherwise.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "12-digit unique identifier of the member whose document is being updated.\n\n* `memberId`: A string representing the unique identifier of a house member.\n\nThe function first logs a message to trace the request receipt and then attempts to update the house member document using the `houseMemberDocumentService`. If the update is successful, the function returns a `ResponseEntity` with a status code of `NO_CONTENT`, indicating that the operation was successful. Otherwise, it returns a `ResponseEntity` with a status code of `NOT_FOUND`, indicating that the house member document could not be found.",
                "complex_type": true
              },
              {
                "name": "memberDocument",
                "type_name": "MultipartFile",
                "description": "file containing the member's document that needs to be updated.\n\n* `memberId`: A string representing the ID of the house member whose document is being updated.\n* `memberDocument`: A `MultipartFile` object containing the updated document for the house member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully updated or not.\n\n* `map`: This method is used to map the Optional<HouseMemberDocument> to a ResponseEntity. If the update operation was successful, it returns a ResponseEntity with a status code of NO_CONTENT (204).\n* `orElseGet`: This method is used as a fallback when the `map` method returns an empty Optional. It returns a ResponseEntity with a status code of NOT_FOUND (404).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\n  public void testUpdateHouseMemberDocument() {\n    // Set up mocks\n    HouseMemberDocumentService houseMemberDocumentService = Mockito.mock(HouseMemberDocumentService.class);\n    MultipartFile memberDocument = Mockito.mock(MultipartFile.class);\n    String memberId = \"1234\";\n\n    // Call method\n    ResponseEntity updateResponse =\n        HouseMemberDocumentController.updateHouseMemberDocument(houseMemberDocumentService, memberId, memberDocument);\n\n    // Assertions\n    assertEquals(HttpStatus.NO_CONTENT, updateResponse.getStatusCode());\n  }\n",
              "description": ""
            },
            "name": "updateHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 83,
              "insert": 83,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          },
          {
            "id": "8354f41d-9892-ea8e-9347-ed93b93eefa7",
            "ancestors": [
              "9194f9d6-389e-fe8b-7044-b3536731708b"
            ],
            "type": "function",
            "description": "deletes a house member document based on the provided `memberId`. If the document is successfully deleted, a `HttpStatus.NO_CONTENT` response is returned. If the document cannot be found, a `HttpStatus.NOT_FOUND` response is returned.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "ID of the house member whose document is to be deleted.\n\n* `memberId`: This is a string variable that represents the unique identifier for a house member. It could be obtained from various sources such as user input or data stored in a database.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully deleted or not.\n\n* `isDocumentDeleted`: A boolean value indicating whether the house member document was successfully deleted or not.\n* `HttpStatus`: The HTTP status code returned by the function, which can be either `NO_CONTENT` (204) or `NOT_FOUND` (404).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\npublic ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n}\n",
              "description": ""
            },
            "name": "deleteHouseMemberDocument",
            "code": "@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }",
            "location": {
              "start": 94,
              "insert": 94,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentController.java",
    "path": "service/src/main/java/com/myhome/controllers/PaymentController.java",
    "content": {
      "structured": {
        "description": "A REST controller responsible for managing payments in a community. The controller provides endpoints for scheduling payments, listing all member payments, and listing all admin scheduled payments. It uses packages from Spring Data, Spring Web Flux, and Lombok to perform these tasks efficiently.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "c9e54eb0-ee35-f2a5-5847-24eef544ff82",
            "ancestors": [],
            "type": "function",
            "description": "is responsible for handling payment-related requests in a housing platform. It provides endpoints for scheduling payments, listing all member and admin scheduled payments, and listing all payments for a given community or member. The controller uses dependency injection to inject the required services, such as the PaymentService, CommunityService, and SchedulePaymentApiMapper. The controller also implements security constraints using the @Auth decorator to ensure only authorized users can access the endpoints.",
            "name": "PaymentController",
            "code": "@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 47,
                "end": 50
              }
            },
            "item_type": "class",
            "length": 94
          },
          {
            "id": "6b2f6831-82fb-f28b-ba4c-eeb0f81ad324",
            "ancestors": [
              "c9e54eb0-ee35-f2a5-5847-24eef544ff82"
            ],
            "type": "function",
            "description": "receives a Schedule Payment Request from the API and checks if the user is an admin of the community house. If so, it schedules a payment using the API and returns the response. Otherwise, it returns a `NOT_FOUND` status.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "SchedulePaymentRequest object containing the details of the payment to be scheduled, which is used to generate an enriched Schedule Payment Request, schedule the payment, and return the resulting Schedule Payment Response.\n\n* `request.getMemberId()`: A unique identifier for a member within a community house.\n* `request.getAdminId()`: A unique identifier for an administrator within a community house.\n* `paymentService.getHouseMember(request.getMemberId())`: Returns a HouseMember object associated with the specified member ID, or throws an exception if the member does not exist.\n* `communityService.findCommunityAdminById(request.getAdminId())`: Returns a User object associated with the specified administrator ID, or throws an exception if the administrator does not exist.\n* `isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)`: A boolean value indicating whether the administrator is an admin of the community house associated with the member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "SchedulePaymentResponse",
              "description": "a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a generic response object that can hold any type of data. In this case, it holds a `SchedulePaymentResponse` object.\n* `status`: This is a field of type `HttpStatus`, which indicates the HTTP status code of the response. In this case, it is set to `CREATED`, indicating that the payment has been scheduled successfully.\n* `body`: This is a field of type `SchedulePaymentResponse`, which contains the details of the scheduled payment.\n\nThe various attributes of the `SchedulePaymentResponse` object are as follows:\n\n* `id`: A unique identifier for the scheduled payment.\n* `paymentId`: The ID of the payment that has been scheduled.\n* `amount`: The amount of the payment that has been scheduled.\n* `memberId`: The ID of the member who has scheduled the payment.\n* `adminId`: The ID of the admin who has scheduled the payment.\n* `scheduledDate`: The date and time when the payment is scheduled to be made.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "SchedulePaymentRequest request = new SchedulePaymentRequest();\nrequest.setAdminId(\"admin-id\");\nrequest.setMemberId(\"member-id\");\nrequest.setAmount(10);\nrequest.setDate(LocalDateTime.now());\n\nResponseEntity<SchedulePaymentResponse> response = schedulePayment(request);\n",
              "description": "\nIn this example, the request object is constructed and its adminId, memberId, amount, and date are set to values that would satisfy the conditions specified in the method's documentation. The response returned by the method is stored in a variable called 'response'. Since the response status code is HTTP_CREATED (201), it means that the request was successful and a new resource has been created. The response body contains the payment details, which can be accessed through the SchedulePaymentResponse object.\n\nIt's important to note that this example only works if the adminId provided in the request actually exists and is an admin of the community house where the member belongs. If either of these conditions are not met, then a HTTP_NOT_FOUND (404) status code would be returned."
            },
            "name": "schedulePayment",
            "code": "@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }",
            "location": {
              "start": 59,
              "insert": 59,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 25
          },
          {
            "id": "afea1598-8231-438b-db4b-17f5a8611b65",
            "ancestors": [
              "c9e54eb0-ee35-f2a5-5847-24eef544ff82"
            ],
            "type": "function",
            "description": "checks if a given `User` is an admin of a specified `CommunityHouse`. It does so by checking if the `User` is present in the community's admin list.",
            "params": [
              {
                "name": "communityHouse",
                "type_name": "CommunityHouse",
                "description": "CommunityHouse object that is being checked for the presence of the provided `admin` parameter among its list of admins.\n\n* `communityHouse`: A `CommunityHouse` object that represents a community house with various attributes and methods for managing community members and their roles.\n* `getCommunity()`: A method that returns a `Community` object, representing the community associated with the `CommunityHouse`.\n* `getAdmins()`: A method that returns a list of `User` objects, representing the admins of the community house.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "User object to be checked for admin status within the CommunityHouse community.\n\n* `CommunityHouse communityHouse`: This represents an object of type `CommunityHouse`, which contains information about a community house.\n* `getCommunity()`: This method returns an object of type `Community`, which contains information about the community associated with the community house.\n* `getAdmins()`: This method returns a list of objects of type `User`, which represents the admins of the community.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the specified user is an admin of the community house.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void isUserAdminOfCommunityHouse() {\n    Community community = new Community();\n    User admin = new User();\n    community.setAdmins(Collections.singletonList(admin));\n    CommunityHouse communityHouse = new CommunityHouse();\n    communityHouse.setCommunity(community);\n    \n    assertTrue(isUserAdminOfCommunityHouse(communityHouse, admin));\n}\n",
              "description": "\nExplanation:\n* First, we create a `Community` object with a single administrator.\n* Then, we create a `User` object that is the same as the administrator from the previous step.\n* Next, we create a `CommunityHouse` object with its `community` attribute set to the community created in the first step.\n* Finally, we assert that the method returns `true` when both the `admin` and the `communityHouse` objects are passed as arguments.\n\nThis test shows that the method is working correctly by testing whether an administrator of a community is also an administrator of any community house belonging to that community."
            },
            "name": "isUserAdminOfCommunityHouse",
            "code": "private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }",
            "location": {
              "start": 85,
              "insert": 85,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 5
          },
          {
            "id": "38680162-f08f-37b2-1d41-353c2920646e",
            "ancestors": [
              "c9e54eb0-ee35-f2a5-5847-24eef544ff82"
            ],
            "type": "function",
            "description": "retrieves payment details for a given payment ID from the payment service and maps them to a `SchedulePaymentResponse` object using the provided API mapper. It returns a `ResponseEntity` with the payment details or an error response if not found.",
            "params": [
              {
                "name": "paymentId",
                "type_name": "String",
                "description": "id of the payment for which details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object representing the payment details or an error message indicating that the payment does not exist.\n\n* `paymentId`: The unique identifier of the payment for which details are being requested.\n* `paymentService`: A service responsible for retrieving payment details.\n* `schedulePaymentApiMapper`: An object that maps payment details to `SchedulePaymentResponse` objects.\n* `ResponseEntity`: A class representing a response entity, which contains the status code and body of the response.\n* `ok`: The status code indicating that the request was successful and the payment details were retrieved.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n  final PaymentDto processedPayment = paymentService.getPaymentDetails(paymentId);\n  return ResponseEntity.ok(schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment));\n}\n",
              "description": "\nThe method listPaymentDetails uses the paymentService to get the details of a payment with the specified id, and then maps the result to a SchedulePaymentResponse using schedulePaymentApiMapper.paymentToSchedulePaymentResponse. The response is then returned as an OK HTTP status code ResponseEntity."
            },
            "name": "listPaymentDetails",
            "code": "@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 91,
              "insert": 91,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "63702157-7ff0-92a9-cb4c-6494f67d87ef",
            "ancestors": [
              "c9e54eb0-ee35-f2a5-5847-24eef544ff82"
            ],
            "type": "function",
            "description": "receives a member ID and retrieves all payments associated with that member from multiple sources, maps them to a standardized response format, and returns it as a `ResponseEntity`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "id of the house member for whom all payments are to be listed.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `List Member Payments Response` object containing the list of payments for the specified member ID.\n\n* `ResponseEntity`: This is an object that represents a response entity with a status code and a body. The status code indicates whether the request was successful or not, and the body contains the list of member payments.\n* `ok`: This is a method on the `ResponseEntity` object that returns a `ResponseEntity` instance with a status code of 200 (OK).\n* `notFound`: This is a method on the `ResponseEntity` object that returns a `ResponseEntity` instance with a status code of 404 (Not Found).\n* `payments`: This is an attribute of the `ListMemberPaymentsResponse` class that contains the list of member payments.\n\nThe `listAllMemberPayments` function takes in a `memberId` parameter and uses it to retrieve the list of payments for that member from the payment service. It then maps the payment service response to a `ListMemberPaymentsResponse` object, which is then returned as the output of the function.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "List<Payment> payments = paymentService.getPaymentsByMember(memberId);\nSet<AdminPayment> adminPayments = schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet(new HashSet<>(payments));\nListMemberPaymentsResponse response = new ListMemberPaymentsResponse().payments(adminPayments);\nreturn ResponseEntity.ok().body(response);\n",
              "description": "\nThis example uses the paymentService to retrieve a list of payments for the member with ID `memberId`. It then creates a set from this list and passes it as an argument to `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()` which returns a set of `AdminPayment` objects that represent the response for the list payments endpoint. This response is then used to create a new instance of `ListMemberPaymentsResponse` and returned as a `ResponseEntity<ListMemberPaymentsResponse>`.\n\nPlease note that the use of `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()` in this example is not necessary, since it returns a set of `AdminPayment` objects which is the same type as the `payments` variable. However, using this method ensures that the code will work correctly regardless if the `payments` variable is already a set or not."
            },
            "name": "listAllMemberPayments",
            "code": "@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 12
          },
          {
            "id": "cac862f3-5330-3bba-0644-57c05716fbf8",
            "ancestors": [
              "c9e54eb0-ee35-f2a5-5847-24eef544ff82"
            ],
            "type": "function",
            "description": "receives a request to list all scheduled payments for an admin, retrieves the payments from the payment service, and returns them in a response entity along with pagination information.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "community for which the payments are being listed, and is used to filter the list of payments to only those that are scheduled by the specified admin.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of the admin for whom scheduled payments are to be listed, and is used to filter the payments returned in the response.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and size of the payment list that the administrator wants to view, which is used to retrieve the relevant payments from the database.\n\n* `communityId`: A string representing the ID of the community to filter payments for.\n* `adminId`: A string representing the ID of the admin to filter payments by.\n* `isAdminInGivenCommunity`: A boolean indicating whether the given admin is present in the specified community.\n\nThe function then makes use of these properties to retrieve a list of payments scheduled by the admin and return it in the response.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListAdminPaymentsResponse",
              "description": "a `ResponseEntity` object containing a `ListAdminPaymentsResponse` body with the scheduled payments and pagination information.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin.\n* `pageInfo`: Represents the pagination information of the payments, including the current page, total pages, and total number of payments.\n\nThe function first checks if the admin is in the given community by calling `isAdminInGivenCommunity`. If the admin is present in the community, it retrieves the scheduled payments using `paymentService.getPaymentsByAdmin()` and maps them to an `AdminPaymentSet` using `schedulePaymentApiMapper`. The mapped `AdminPaymentSet` is then returned as the output of the function. If the admin is not present in the community, a `ResponseEntity.notFound().build()` is returned indicating that the admin is not found.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Autowired\nprivate SchedulePaymentApiController schedulePaymentApiController;\n\nvoid demonstrateListingAdminPayments() {\n  // Given: A community with id \"1\" and admin with id \"2\".\n  String communityId = \"1\";\n  String adminId = \"2\";\n\n  Pageable pageable = new PageRequest(0, 5);\n\n  // When: Listing all the payments scheduled by the admin.\n  ResponseEntity<ListAdminPaymentsResponse> response = schedulePaymentApiController.listAllAdminScheduledPayments(communityId, adminId, pageable);\n\n  // Then: The returned list of payments should be non-empty and contain only those payments that were scheduled by the admin in the given community.\n  assertThat(response.getBody().getPayments()).isNotEmpty();\n  assertThat(response.getBody().getPayments().stream()\n                    .map(AdminPayment::getCommunityId)\n                    .allMatch(communityId::equals)).isTrue();\n}\n",
              "description": "\nHere, we demonstrate the usage of listAllAdminScheduledPayments by listing all payments scheduled by an admin in a given community. We first set up some input parameters (the community and admin IDs), then pass them to the method to retrieve the response. Finally, we assert that the response contains non-empty list of payments, and that all payments were indeed scheduled by the admin in the given community."
            },
            "name": "listAllAdminScheduledPayments",
            "code": "@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 22
          },
          {
            "id": "f9735451-daf8-4087-9343-186266f2a500",
            "ancestors": [
              "c9e54eb0-ee35-f2a5-5847-24eef544ff82"
            ],
            "type": "function",
            "description": "checks if a user is an admin in a specific community by querying the community details and admins, then filtering the admins based on the user ID, and returning true if the user is an admin or false otherwise.",
            "params": [
              {
                "name": "communityId",
                "type_name": "String",
                "description": "unique identifier of a Community, which is used to retrieve the details of that Community and its associated Admins.",
                "complex_type": false
              },
              {
                "name": "adminId",
                "type_name": "String",
                "description": "12-digit ID of an admin user who belongs to the community, and is used to filter the list of admins in the community to check if the provided user ID matches any of them.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "Boolean",
              "description": "a `Boolean` value indicating whether the specified admin is an administrator of the given community.\n\n* `communityId`: The ID of the community being checked for the admin role.\n* `adminId`: The ID of the admin to be checked for membership in the community.\n* `map(Function)`: The map method is used to apply a function to each element of the input stream, in this case, `Community::getAdmins`. This function takes a `Community` object and returns a stream of `Admin` objects.\n* `map(Function<Admin, Boolean>)`: The map method is applied again to the stream of `Admin` objects, this time with a function that takes an `Admin` object and returns a `Boolean` value indicating whether the admin is in the given community.\n* `orElseThrow()`: This method is used to provide a default value if the stream of `Admin` objects is empty. If no admins are found in the community, an exception is thrown with a message containing the ID of the community and the ID of the admin.\n\nOverall, the function returns a `Boolean` value indicating whether the specified admin is present in the given community.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Test\npublic void testIsAdminInGivenCommunity() {\n  //Arrange\n  final String communityId = \"1\";\n  final String adminId = \"adminId\";\n  \n  //Act\n  Boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n  \n  //Assert\n  assertTrue(isAdminInGivenCommunity);\n}\n",
              "description": "\nThis test case demonstrates the following:\n* The input values for communityId and adminId are given.\n* The method isAdminInGivenCommunity is called with these input values.\n* The output value of the call to the method, isAdminInGivenCommunity, is asserted to be true. This indicates that the admin with the ID \"adminId\" exists in the community with the ID \"1\"."
            },
            "name": "isAdminInGivenCommunity",
            "code": "private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }",
            "location": {
              "start": 137,
              "insert": 137,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserController.java",
    "path": "service/src/main/java/com/myhome/controllers/UserController.java",
    "content": {
      "structured": {
        "description": "A `UserController` that handles user-related operations for an API. It provides endpoints for creating new users, listing all users, getting details of a specific user, resetting a user's password, and confirming or resending an email confirmation for a user's account. The controller uses dependencies from packages such as Spring Data JPA, Spring Validation, Lombok, and Slf4j.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "74291a74-6501-1bbe-c643-448666d3497d",
            "ancestors": [],
            "type": "function",
            "description": "is a REST controller that provides endpoints for managing users, houses, and email confirmation. It receives requests to create new users, list all users, get details of a specific user, reset passwords, and confirm or resend email confirmations. The class uses dependency injection and maps the responses from the service layers to the corresponding REST API responses.",
            "name": "UserController",
            "code": "@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}",
            "location": {
              "start": 50,
              "insert": 50,
              "offset": " ",
              "indent": 0,
              "comment": {
                "start": 46,
                "end": 49
              }
            },
            "item_type": "class",
            "length": 96
          },
          {
            "id": "377e61a7-757a-b680-944b-504b6f842cd6",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "handles a `CreateUserRequest` and creates a new user in the system, mapping the user entity to a `CreateUserResponse`. If the creation is successful, it returns a `ResponseEntity` with a status code of `CREATED`, otherwise it returns a `ResponseEntity` with a status code of `CONFLICT`.",
            "params": [
              {
                "name": "request",
                "type_name": "CreateUserRequest",
                "description": "`CreateUserRequest` object passed to the method, which contains the user's details for creation.\n\n* `@Valid`: This annotation indicates that the input object `request` is validated by the framework.\n* `CreateUserRequest`: This is the class that represents the request body sent by the client. It contains attributes such as `username`, `email`, `password`, and `nickname`.\n* `userApiMapper`: This is an injected class that performs mapping between the request body and the desired response format.\n* `UserDto`: This is a class representing the user entity, which is created or updated in the function.\n* `userService`: This is an injected class that provides the functionality to create or update a user.\n* `Optional<UserDto>`: This represents the result of calling `createUser` on the `userService`, which may return `None` if the user already exists.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of `HTTP_CREATED` and a body containing a `CreateUserResponse`.\n\n* `ResponseEntity<CreateUserResponse>` is a generic class that represents a response entity with a status code and a body. The status code indicates whether the request was successful (201 Created) or not (409 Conflict).\n* `CreateUserResponse` is a class that contains the data returned to the client after a successful sign-up operation. It has properties for the user's ID, name, email, and password.\n* `map` method is used to transform the `Optional<UserDto>` into a `ResponseEntity` with a status code and a body. If the `Optional` contains a value, the method returns a response entity with a status code of 201 Created and a body containing the transformed `CreateUserResponse`. Otherwise, it returns a response entity with a status code of 409 Conflict.\n* `orElseGet` method is used to provide an alternative response entity if the `map` method does not produce one. In this case, the alternative response entity has a status code of 409 Conflict.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto requestUserDto = new UserDto();\nrequestUserDto.setId(\"12345\");\nrequestUserDto.setUsername(\"bobsmith\");\nrequestUserDto.setEmail(\"bob@example.com\");\nrequestUserDto.setPassword(\"password\");\nCreateUserRequest request = new CreateUserRequest();\nrequest.setUser(requestUserDto);\nResponseEntity<CreateUserResponse> response = \n    userService.signUp(request);\n",
              "description": "\nThe method signUp in the User Service is called, passing a CreateUserRequest object as input. The CreateUserRequest contains a UserDto object that has fields for id, username, email, and password. The createUser method creates a new user with the given information and returns an Optional containing the newly created UserDto object if successful, or an empty Optional otherwise. The response is then returned to the caller."
            },
            "name": "signUp",
            "code": "@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }",
            "location": {
              "start": 60,
              "insert": 60,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 12
          },
          {
            "id": "374b050e-5023-96b4-5942-947b53dcc9f1",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "receives a `Pageable` parameter and returns a response with a list of users fetched from the user service and mapped to the API response format using the `userApiMapper`.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pagination information for listing all users, allowing the listAllUsers method to retrieve a subset of user details from the database based on the specified page number and page size.\n\n* `log.trace(\"Received request to list all users\")` - This line logs a trace message indicating that the function has received a request to list all users.\n* `Set<User> userDetails = userService.listAll(pageable);` - This line calls the `listAll` method of the `userService` class, passing in `pageable` as a parameter. The `listAll` method returns a set of `User` objects representing all users in the system.\n* `Set<GetUserDetailsResponseUser> userDetailsResponse = userApiMapper.userSetToRestApiResponseUserSet(userDetails);` - This line maps the `User` objects returned by the `listAll` method to a set of `GetUserDetailsResponseUser` objects using the `userApiMapper` class. The resulting `userDetailsResponse` set represents the users in the system in a format suitable for return as part of the API response.\n* `GetUserDetailsResponse response = new GetUserDetailsResponse();` - This line creates a new instance of the `GetUserDetailsResponse` class, which is the response object for this API endpoint.\n* `response.setUsers(userDetailsResponse);` - This line sets the `users` field of the `GetUserDetailsResponse` object to the `userDetailsResponse` set, thereby populating the response with the mapped users.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "GetUserDetailsResponse",
              "description": "a list of user details in REST API format.\n\n* `response`: This is the main output of the function, which contains a set of `GetUserDetailsResponseUser` objects representing all the users in the system.\n* `users`: This is a Set containing the user details, where each user detail is represented as a `GetUserDetailsResponseUser` object.\n* `HttpStatus.OK`: This is the status code of the response, indicating that the request was successful.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "// Invoke the method using a Pageable object with default page and size values\nPageable pageable = new Pageable();\nGetUserDetailsResponse response = userController.listAllUsers(pageable);\n\n// Print the total number of users found, along with the users in the current page\nSystem.out.println(\"Total Number of Users: \" + response.getTotalElements());\nSystem.out.println(\"Number of Users in Page: \" + response.getUsers().size());\nfor (GetUserDetailsResponseUser user : response.getUsers()) {\n    System.out.println(user.getEmail() + \", \" + user.getName());\n}\n",
              "description": ""
            },
            "name": "listAllUsers",
            "code": "@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }",
            "location": {
              "start": 73,
              "insert": 73,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 13
          },
          {
            "id": "14615890-e2e6-2599-6341-a977bcbdb81d",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "receives a user ID and returns a `ResponseEntity` with a `GetUserDetailsResponseUser` object containing user details or a `HttpStatus.NOT_FOUND` status code if the user is not found.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "ID of the user for whom the details are being requested.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with an HTTP status code of OK and a body containing the user details.\n\n* The response entity is of type `ResponseEntity`, which indicates that it contains a result and an HTTP status code.\n* The status code is set to `HttpStatus.OK`, indicating that the request was successful.\n* The body of the response entity contains an instance of `GetUserDetailsResponse`, which represents the details of the user requested. This class has a single property, `userDto`, which is a `UserDTO` object representing the user's details.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "String userId = \"123456789\"; // replace with a valid user ID\nResponseEntity<GetUserDetailsResponseUser> responseEntity = userController.getUserDetails(userId);\n",
              "description": ""
            },
            "name": "getUserDetails",
            "code": "@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }",
            "location": {
              "start": 87,
              "insert": 87,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "5cfe3e05-077a-1487-0d4b-468a86efc69d",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "processes password reset requests. It checks if the action is FORGOT or RESET, and if the request is valid, it calls the corresponding method in the `userService` to reset the password. If the password is successfully reset, it returns a `ResponseEntity` with a status code of `OK`. Otherwise, it returns a `ResponseEntity` with a status code of `BAD_REQUEST`.",
            "params": [
              {
                "name": "action",
                "type_name": "String",
                "description": "password action type, which determines the corresponding action to be taken by the method.",
                "complex_type": false
              },
              {
                "name": "forgotPasswordRequest",
                "type_name": "ForgotPasswordRequest",
                "description": "Forgot Password Request object that contains the user's email address and other information required to initiate the password reset process.\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `forgotPasswordRequest` parameter must be validated by the framework.\n* `@RequestBody`: The `forgotPasswordRequest` parameter is passed as a request body in the HTTP request.\n* `ForgotPasswordRequest`: This class represents the request body for resetting a user's password. It contains properties such as:\n\t+ `email`: The email address of the user to whom the password should be reset.\n\t+ `password`: The new password to be set.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status code of either `ok` or `badRequest`, depending on the success of the password reset process.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a RESTful API request. It contains information about the status of the response, such as whether it was successful or not, and any additional details that may be useful for handling the response.\n* `ok`: This is a boolean attribute of the `ResponseEntity` class, indicating whether the response was successful (i.e., true) or not (i.e., false).\n* `build`: This is a method of the `ResponseEntity` class that returns a new instance of the `ResponseEntity` class with the specified attributes. In this case, it returns a new instance of the `ResponseEntity` class with the `ok` attribute set to true.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class UserControllerTest {\n    @Autowired\n    private MockMvc mockMvc;\n    \n    @MockBean\n    private UserService userService;\n    \n    @Test\n    void testUsersPasswordPost() throws Exception {\n        // given\n        ForgotPasswordRequest request = new ForgotPasswordRequest();\n        \n        String action = \"FORGOT\";\n        boolean result = true;\n        PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n        if (parsedAction == PasswordActionType.FORGOT) {\n            result = true;\n            userService.requestResetPassword(request);\n        } else if (parsedAction == PasswordActionType.RESET) {\n            result = userService.resetPassword(request);\n        }\n        \n        // when\n        mockMvc.perform(post(\"/users/password\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"action\", action)\n                .content(new ObjectMapper().writeValueAsString(request)))\n            .andExpect(status().isOk());\n    }\n}\n",
              "description": ""
            },
            "name": "usersPasswordPost",
            "code": "@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16
          },
          {
            "id": "997524e3-4cc4-f396-8642-fd756fab0f03",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "receives a user ID and a pageable parameter, retrieves the list of house members for all houses associated with the given user ID, maps them to a `HashSet`, and returns a `ResponseEntity` object representing the list of house members.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "user for whom the list of housemates is being requested.",
                "complex_type": false
              },
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "page number and page size for fetching a subset of the list of house members, allowing for efficient pagination and result set retrieval.\n\n* `userId`: The ID of the user whose houses are to be listed.\n* `pageable`: A `Pageable` object representing the pagination parameters for listing all housemates. The various properties and attributes of `pageable` include:\n\t+ `pageNumber`: The current page number being requested (optional)\n\t+ `pageSize`: The number of housemates to be listed per page (optional)\n\t+ `sort`: The field by which the list of housemates should be sorted (optional)\n\t+ `direction`: The direction of the sort order (optional)",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object containing a list of `HouseMemberSet` objects, representing all members of all houses belonging to the specified user.\n\n* `ResponseEntity`: This is the type of the outermost component of the return value, indicating whether the call was successful or not. In this case, it is `ok`, indicating a successful response.\n* `ListHouseMembersResponse`: This is the inner component of the return value, representing the list of house members returned by the function. It contains a list of `HouseMemberSet` objects, which are the actual data returned by the function.\n* `members`: This is a list of `HouseMemberSet` objects, each representing a set of house members for a particular house. The `House Member Set` class has several properties, including the `houseId`, `userId`, and `members` fields.\n\nOverall, the `listAllHousemates` function returns a list of house members belonging to the user with the specified ID, organized into sets for each house.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n",
              "description": ""
            },
            "name": "listAllHousemates",
            "code": "@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 11
          },
          {
            "id": "e265dcdb-9505-28b9-7c43-23340a51e572",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "confirms an email address for a user using a confirmation token provided by the server. If the email is confirmed, a `ResponseEntity.ok()` is returned. Otherwise, a `ResponseEntity.badRequest()` is returned.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "identity of the user whose email confirmation is being checked.",
                "complex_type": false
              },
              {
                "name": "emailConfirmToken",
                "type_name": "String",
                "description": "token sent to the user's email address for confirmation of their email address.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "a `ResponseEntity` object with a status of either `ok` or `badRequest`, depending on whether the email confirmation was successful or not.\n\nThe `ResponseEntity` object is an instance of the `ResponseEntity` class, which represents a response entity in a web application. The `ok` method returns a ResponseEntity with a status code of 200 (OK), indicating that the email confirmation was successful. On the other hand, the `badRequest` method returns a ResponseEntity with a status code of 400 (Bad Request), indicating that there was an error in processing the request.\n\nThe `Void` parameter represents the lack of any content returned by the function. It is a type parameter passed to the `ResponseEntity` constructor, indicating that no content is being returned.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserController userController = new UserController(userService, userApiMapper, houseService);\nString userId = \"abc123\"; // ID of the user to confirm email for\nString emailConfirmToken = \"xyz789\"; // Confirmation token sent in an email\nResponseEntity<Void> response = userController.confirmEmail(userId, emailConfirmToken);\n",
              "description": ""
            },
            "name": "confirmEmail",
            "code": "@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 126,
              "insert": 126,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "fc137a95-9142-40a3-2744-b954d4305fb7",
            "ancestors": [
              "74291a74-6501-1bbe-c643-448666d3497d"
            ],
            "type": "function",
            "description": "resends an email confirmation to a user if one was previously sent, and returns a response entity indicating the result of the operation.",
            "params": [
              {
                "name": "userId",
                "type_name": "String",
                "description": "identifier of the user for whom an email confirmation link is to be resent.",
                "complex_type": false
              }
            ],
            "returns": {
              "type_name": "ResponseEntity",
              "description": "an `OK` response entity indicating successful email resending for the specified user ID.\n\n* `ResponseEntity`: This is an object that represents the response of the API. It has several attributes, including the status code (either 200 for success or a non-200 status code for failure), the body of the response (which can be empty or contain data depending on the response), and the headers of the response.\n* `ok`: This is a boolean attribute that indicates whether the resending of the email confirmation was successful or not. If `emailConfirmResend` is true, then the response entity has an `statusCode` of 200 and an empty body. Otherwise, it has a status code of 400 (bad request) and an empty body.\n* `build`: This is a method that creates a new instance of `ResponseEntity` with the specified attributes. It is called automatically when the function returns an instance of `ResponseEntity`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "ResponseEntity<Void> response = userController.resendConfirmEmailMail(userId);\nif (response.getStatusCode() == HttpStatus.OK) {\n    System.out.println(\"Email confirmation resent successfully\");\n} else {\n    System.out.println(\"Error resending email confirmation\");\n}\n",
              "description": ""
            },
            "name": "resendConfirmEmailMail",
            "code": "@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }",
            "location": {
              "start": 136,
              "insert": 136,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "AmenityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/AmenityDto.java",
    "content": {
      "structured": {
        "description": "An object called `AmenityDto` with fields for `id`, `amenityId`, `name`, `description`, `price`, and `communityId`. These fields are annotated with various annotations such as `@AllArgsConstructor`, `@NoArgsConstructor`, `@Builder`, `@With`, and `@Data`. The code uses Lombok, a Java library for generating getters and setters automatically.",
        "items": [
          {
            "id": "b04a40db-4532-2188-7743-2cfeaa3182f5",
            "ancestors": [],
            "type": "function",
            "description": "has a structure with fields for id, amenityId, name, description, price, and communityId, allowing for construction and manipulation of DTO objects representing amenities.\nFields:\n\t- id (Long): represents an identifier for each amenity, which could be a unique number assigned to it. \n\t- amenityId (String): represents a unique identifier for an amenity within a community, as defined by the AmenityDto class. \n\t- name (String): in the AmenityDto class represents a string value that refers to the name of an amenity. \n\t- description (String): in the AmenityDto class represents a string value of variable length. \n\t- price (BigDecimal): represents a decimal value representing the cost of an amenity. \n\t- communityId (String): in the AmenityDto class represents a unique identifier for the community to which the amenity belongs. \n\n",
            "name": "AmenityDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Builder\n@With\n@Data\npublic class AmenityDto {\n  private Long id;\n  private String amenityId;\n  private String name;\n  private String description;\n  private BigDecimal price;\n  private String communityId;\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityDto.java",
    "content": {
      "structured": {
        "description": "A class called `CommunityDto` that represents a community object. The class has properties for the community ID, name, district, and set of admin users. The class also uses Lombok packages `@AllArgsConstructor` and `@NoArgsConstructor` for constructors, and `@Data` for getting and setting values.",
        "items": [
          {
            "id": "1e001b06-46c4-c98a-b642-2b74f49492cf",
            "ancestors": [],
            "type": "function",
            "description": "represents a community with an ID, community ID, name, district, and a set of admins.\nFields:\n\t- id (Long): represents a unique identifier for a community object in the program. \n\t- communityId (String): in the CommunityDto class represents a unique identifier for a specific community. \n\t- name (String): in the CommunityDto class is a string representing the name of a community. \n\t- district (String): in the CommunityDto class represents a string value specifying the name of the district associated with the community. \n\t- admins (Set<UserDto>): in the CommunityDto class is a set of UserDtos representing the administrators of a community. \n\n",
            "name": "CommunityDto",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class CommunityDto {\n  private Long id;\n  private String communityId;\n  private String name;\n  private String district;\n  private Set<UserDto> admins;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "CommunityHouseDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/CommunityHouseDto.java",
    "content": {
      "structured": {
        "description": "A data transfer object (DTO) called CommunityHouseDto, which has two fields: houseId and name. The @Data and @AllArgsConstructor annotations indicate that these fields can be populated using constructor arguments, while the @NoArgsConstructor annotation indicates that they can also be populated using default values. The Lombok packages are used for generating getters and setters, as well as constructors.",
        "items": [
          {
            "id": "02411c2e-9a64-bba8-2c4b-44d9d61062d5",
            "ancestors": [],
            "type": "function",
            "description": "has a String houseId field and a String name field used for representing community houses.\nFields:\n\t- houseId (String): represents a unique identifier for a community house within a given context. \n\t- name (String): in the CommunityHouseDto class represents the name of a house. \n\n",
            "name": "CommunityHouseDto",
            "code": "@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class CommunityHouseDto {\n  private String houseId;\n  private String name;\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "PaymentDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/PaymentDto.java",
    "content": {
      "structured": {
        "description": "A `PaymentDto` class for representing payment information. It includes fields for payment ID, charge amount, payment type, description, recurring status, due date, administrator user ID, and member house member ID. The class uses Lombok to automatically generate getters and setters for the fields, and it also defines a builder class to construct instances of the `PaymentDto` class.",
        "items": [
          {
            "id": "1f798457-f07b-0aa7-c146-bb48dacd0fdf",
            "ancestors": [],
            "type": "function",
            "description": "is a data transfer object for representing payment information, including payment ID, charge amount, payment type, description, recurring status, due date, and admin and member details.\nFields:\n\t- paymentId (String): in the PaymentDto class represents a unique identifier for each payment made by a member of a house. \n\t- charge (BigDecimal): represents a monetary value. \n\t- type (String): in the PaymentDto class represents a string indicating the type of payment, such as \"credit card\", \"bank transfer\", or \"other\". \n\t- description (String): in the PaymentDto class represents a human-readable explanation of the payment, which may include information about the purpose of the payment or any relevant details. \n\t- recurring (boolean): in the PaymentDto represents whether the payment is ongoing or a one-time transfer. \n\t- dueDate (String): represents the date by which a payment is intended to be made. \n\t- admin (UserDto): in the PaymentDto class represents an user who manages or oversees payments. \n\t- member (HouseMemberDto): in the PaymentDto class represents an association between a payment and a specific house member. \n\n",
            "name": "PaymentDto",
            "code": "@Builder\n@Getter\n@Setter\npublic class PaymentDto {\n  private String paymentId;\n  private BigDecimal charge;\n  private String type;\n  private String description;\n  private boolean recurring;\n  private String dueDate;\n  private UserDto admin;\n  private HouseMemberDto member;\n}",
            "location": {
              "start": 25,
              "insert": 25,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "UserDto.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/UserDto.java",
    "content": {
      "structured": {
        "description": "A `UserDto` class for representing user data as a DTO (Data Transfer Object). The class has fields for id, userId, name, email, password, and encryptedPassword, as well as methods for getting and setting these fields. Additionally, the class includes methods for accessing community membership and confirming email addresses. Overall, the code defines a structured way of representing user data in a DTO format, making it easier to work with and manipulate within an application.",
        "items": [
          {
            "id": "61f81aec-aaf1-fa85-6446-29b0beed02a3",
            "ancestors": [],
            "type": "function",
            "description": "in Java is a data transfer object for storing and manipulating user information, including id, userId, name, email, password, encryptedPassword, communityIds, and emailConfirmed fields.\nFields:\n\t- id (Long): of the UserDto class represents a unique identifier for each user. \n\t- userId (String): in the UserDto class represents a unique identifier for a user. \n\t- name (String): in the UserDto class represents the user's name. \n\t- email (String): in the UserDto class stores an user's email address. \n\t- password (String): in the UserDto class stores the user's password as a string value. \n\t- encryptedPassword (String): in the UserDto class is likely an encoded version of the user's password for added security. \n\t- communityIds (Set<String>): in the UserDto class represents a set of strings indicating the communities to which a user belongs. \n\t- emailConfirmed (boolean): in the UserDto class indicates whether an user's email address has been confirmed through a verification process. \n\n",
            "name": "UserDto",
            "code": "@Builder\n@Getter\n@Setter\npublic class UserDto {\n  private Long id;\n  private String userId;\n  private String name;\n  private String email;\n  private String password;\n  private String encryptedPassword;\n  private Set<String> communityIds;\n  private boolean emailConfirmed;\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/CommunityMapper.java",
    "content": {
      "structured": {
        "description": "An interface `CommunityMapper` that maps between `CommunityDto` and `Community` objects using MapStruct, a dependency injection framework for Java. The interface provides a single method `communityDtoToCommunity()` that converts a `CommunityDto` instance into a corresponding `Community` object.",
        "items": [
          {
            "id": "d54805ad-1f2e-078b-ce49-7cce181dd294",
            "ancestors": [],
            "type": "function",
            "description": "maps between CommunityDto and Community objects through a single method, communityDtoToCommunity().",
            "name": "CommunityMapper",
            "code": "@Mapper\npublic interface CommunityMapper {\n\n  Community communityDtoToCommunity(CommunityDto communityDto);\n}",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 5
          }
        ]
      }
    }
  },
  {
    "name": "HouseMemberMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/HouseMemberMapper.java",
    "content": {
      "structured": {
        "description": "An interface for mapping between HouseMember objects and their corresponding REST API responses. The mapper provides three methods: houseMemberSetToRestApiResponseHouseMemberSet, houseMemberDtoSetToHouseMemberSet, and houseMemberSetToRestApiResponseAddHouseMemberSet. These methods map sets of House Member objects to/from REST API responses, allowing for the conversion of data between the two formats. The mapper utilizes the Mapstruct package to provide a structured approach to mapping data between different formats.",
        "items": [
          {
            "id": "d4782b49-94e1-16a7-f645-b1e463b08758",
            "ancestors": [],
            "type": "function",
            "description": "provides mapping between House Member objects and their corresponding REST API response versions.",
            "name": "HouseMemberMapper",
            "code": "@Mapper\npublic interface HouseMemberMapper {\n  Set<com.myhome.model.HouseMember> houseMemberSetToRestApiResponseHouseMemberSet(\n      Set<HouseMember> houseMemberSet);\n\n  Set<HouseMember> houseMemberDtoSetToHouseMemberSet(Set<HouseMemberDto> houseMemberDtoSet);\n\n  Set<com.myhome.model.HouseMember> houseMemberSetToRestApiResponseAddHouseMemberSet(\n      Set<HouseMember> houseMemberSet);\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 10
          }
        ]
      }
    }
  },
  {
    "name": "PaymentMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/PaymentMapper.java",
    "content": {
      "structured": {
        "description": "A Mapper interface called PaymentMapper that provides conversions between objects of the PaymentDto and Payment classes. The interface includes two mappings: one that maps a PaymentDto object to a Payment object, and another that maps a Payment object to a PaymentDto object. The mappings involve setting properties on the target objects based on values in the source objects, such as the due date of a payment.",
        "items": [
          {
            "id": "1cae7400-3764-ad8c-5b40-6793c181b287",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between DTO and entity objects for the Payment domain object.",
            "name": "PaymentMapper",
            "code": "@Mapper\npublic interface PaymentMapper {\n  Payment paymentDtoToPayment(PaymentDto paymentDto);\n\n  @Mapping(source = \"payment.dueDate\", target = \"dueDate\", dateFormat = \"yyyy-MM-dd\")\n  PaymentDto paymentToPaymentDto(Payment payment);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/dto/mapper/UserMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserMapper` that provides conversion between `UserDto` and `User` objects using mapstruct. The interface includes two methods: `userDtoToUser()` which converts a `UserDto` object to a `User` object, and `userToUserDto()` which converts a `User` object to a `UserDto` object.",
        "items": [
          {
            "id": "b8930b23-0913-ba94-194a-e56176849fef",
            "ancestors": [],
            "type": "function",
            "description": "provides conversion between Domain Entity and DTO objects for User entities.",
            "name": "UserMapper",
            "code": "@Mapper\npublic interface UserMapper {\n  User userDtoToUser(UserDto userDto);\n\n  UserDto userToUserDto(User user);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "FileUploadExceptionAdvice.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java",
    "content": {
      "structured": {
        "description": "an exception handler for handling two types of exceptions: `MaxUploadSizeExceededException` and `IOException`. The code creates a `ResponseEntity` object with a custom message body that is returned as a HTTP response when an exception occurs. The handler methods are annotated with `@ExceptionHandler` and specify the type of exception they handle. The `handleMaxSizeException` method returns a `HttpStatus.PAYLOAD_TOO_LARGE` status code with a custom message in the body, while the `handleIOException` method returns a `HttpStatus.CONFLICT` status code with a different custom message in the body.",
        "items": [
          {
            "id": "3b83795a-5e0b-89ab-5e46-dd54af551ede",
            "ancestors": [],
            "type": "function",
            "description": "TODO",
            "name": "FileUploadExceptionAdvice",
            "code": "@ControllerAdvice\npublic class FileUploadExceptionAdvice {\n\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n\n  @ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n}",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 17
          },
          {
            "id": "64bd28e4-d0d3-40a4-2249-c7b7eabf5d16",
            "ancestors": [
              "3b83795a-5e0b-89ab-5e46-dd54af551ede"
            ],
            "type": "function",
            "description": "processes an exception thrown by the server when a file size exceeds the allowed limit, returning a customized response entity with an error message.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "MaxUploadSizeExceededException that occurred and is passed to the function for handling.\n\n* `MaxUploadSizeExceededException`: This is the exception class that was caught and handled by the function.\n* `class`: This refers to the class of the exception, which in this case is `MaxUploadSizeExceededException`.\n* `exc`: This refers to the instance of the exception class that was caught and handled by the function.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` with a status code of `PAYLOAD_TOO_LARGE` and a body containing a map with a single entry containing the message \"File size exceeds limit!\".\n\n* The HTTP status code is `PAYLOAD_TOO_LARGE`, indicating that the file size exceeds the limit.\n* The body of the response entity contains a map with a single key-value pair. The key is `\"message\"` and the value is a string containing the error message `\"File size exceeds limit!\"`.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(MaxUploadSizeExceededException.class)\npublic ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n        put(\"message\", \"File size exceeds limit!\");\n    }});\n}\n",
              "description": "\nIn this example, the method handleMaxSizeException would be called when a MaxUploadSizeExceededException is thrown. The method returns a ResponseEntity with an HTTP status of 413 (PAYLOAD_TOO_LARGE) and a HashMap containing a message key-value pair."
            },
            "name": "handleMaxSizeException",
            "code": "@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          },
          {
            "id": "abbed543-ae6d-7285-c646-dcce9855d1e1",
            "ancestors": [
              "3b83795a-5e0b-89ab-5e46-dd54af551ede"
            ],
            "type": "function",
            "description": "processes an `MaxUploadSizeExceededException` and returns a custom response entity with a message indicating something went wrong during document saving.",
            "params": [
              {
                "name": "exc",
                "type_name": "MaxUploadSizeExceededException",
                "description": "`MaxUploadSizeExceededException` that needs to be handled by the function.\n\n* `MaxUploadSizeExceededException`: This exception is an instance of the `IOException` class and represents an error that occurred during document saving due to exceeding the maximum upload size limit.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HttpStatus",
              "description": "a `ResponseEntity` with a status code of `CONFLICT` and a message body containing the error message \"Something went wrong with document saving!\".\n\n* `HttpStatus`: The HTTP status code of the response entity, which is set to `CONFLICT`.\n* `body`: A map containing a single key-value pair, where the key is `\"message\"` and the value is a string representing an error message related to document saving.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n",
              "description": "\nIn this code snippet, we are handling an IOException by returning a ResponseEntity object with the status code HttpStatus.CONFLICT and a message body that contains a HashMap with one entry (\"message\", \"Something go wrong with document saving!\"). This method is used to handle any unhandled IOExceptions that may occur during the processing of file uploads."
            },
            "name": "handleIOException",
            "code": "@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }",
            "location": {
              "start": 37,
              "insert": 37,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "AuthenticationException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/AuthenticationException.java",
    "content": {
      "structured": {
        "description": "An exception class called AuthenticationException, which extends the RuntimeException class. The class includes a private static final String error message that displays \"Credentials are incorrect or user does not exist.\" The constructor creates a new instance of the class by calling the superclass's constructor and passing in the error message as a parameter.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "aa08f1ab-985f-228a-6849-0ad7e35c5d02",
            "ancestors": [],
            "type": "function",
            "description": "is an extension of RuntimeException with a custom error message for unauthorized requests.\nFields:\n\t- ERROR_MESSAGE (String): is a static string representing an error message related to incorrect or non-existent user credentials. \n\n",
            "name": "AuthenticationException",
            "code": "@Slf4j\n@ResponseStatus(value = HttpStatus.UNAUTHORIZED)\npublic class AuthenticationException extends RuntimeException {\n  private static final String ERROR_MESSAGE = \"Credentials are incorrect or user does not exists\";\n  public AuthenticationException() {\n    super(ERROR_MESSAGE);\n  }\n}",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "CredentialsIncorrectException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/CredentialsIncorrectException.java",
    "content": {
      "structured": {
        "description": "An exception class called `CredentialsIncorrectException` that extends the `AuthenticationException` class. The code uses Lombok's `@Slf4j` annotation to enable log statements in the class. The class constructor logs an info message when it is created, along with the user ID that was passed in as a parameter.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "29dc9c9c-ab18-ea8f-2449-bc7710d5668d",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and provides a custom message for user Id when credentials are incorrect.\n",
            "name": "CredentialsIncorrectException",
            "code": "@Slf4j\npublic class CredentialsIncorrectException extends AuthenticationException {\n  public CredentialsIncorrectException(String userId) {\n    super();\n    log.info(\"Credentials are incorrect for userId: \" + userId);\n  }\n}",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "UserNotFoundException.java",
    "path": "service/src/main/java/com/myhome/controllers/exceptions/UserNotFoundException.java",
    "content": {
      "structured": {
        "description": "A custom exception class `UserNotFoundException` that extends `AuthenticationException`. The class has a constructor that logs an error message when a user with a given email is not found. The log statement includes the user's email address.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.exceptions.AuthenticationException Pages: 1 -->\n<svg width=\"582pt\" height=\"86pt\"\n viewBox=\"0.00 0.00 582.00 86.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 82)\">\n<title>com.myhome.controllers.exceptions.AuthenticationException</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"340,-54 142,-54 142,-24 340,-24 340,-54\"/>\n<text text-anchor=\"start\" x=\"150\" y=\"-42\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"241\" y=\"-31\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationException</text>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1CredentialsIncorrectException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-78 376,-78 376,-48 574,-48 574,-78\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-66\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-55\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CredentialsIncorrectException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node3 -->\n<g id=\"edge2_Node000001_Node000003\" class=\"edge\">\n<title>Node1&#45;&gt;Node3</title>\n<g id=\"a_edge2_Node000001_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-50.18C358.73,-51.08 367.39,-51.97 375.93,-52.85\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"350.36,-46.69 340.05,-49.14 349.64,-53.65 350.36,-46.69\"/>\n</a>\n</g>\n</g>\n<!-- Node4 -->\n<g id=\"Node000004\" class=\"node\">\n<title>Node4</title>\n<g id=\"a_Node000004\"><a xlink:href=\"classcom_1_1myhome_1_1controllers_1_1exceptions_1_1UserNotFoundException.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"574,-30 376,-30 376,0 574,0 574,-30\"/>\n<text text-anchor=\"start\" x=\"384\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.exceptions.</text>\n<text text-anchor=\"middle\" x=\"475\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UserNotFoundException</text>\n</a>\n</g>\n</g>\n<!-- Node1&#45;&gt;Node4 -->\n<g id=\"edge3_Node000001_Node000004\" class=\"edge\">\n<title>Node1&#45;&gt;Node4</title>\n<g id=\"a_edge3_Node000001_Node000004\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M350.12,-27.82C358.73,-26.92 367.39,-26.03 375.93,-25.15\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"349.64,-24.35 340.05,-28.86 350.36,-31.31 349.64,-24.35\"/>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"106,-48.5 0,-48.5 0,-29.5 106,-29.5 106,-48.5\"/>\n<text text-anchor=\"middle\" x=\"53\" y=\"-36.5\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">RuntimeException</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M116.49,-39C124.71,-39 133.27,-39 141.9,-39\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"116.31,-35.5 106.31,-39 116.31,-42.5 116.31,-35.5\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "19bf6a90-353a-788b-7340-f1e47530b751",
            "ancestors": [],
            "type": "function",
            "description": "extends AuthenticationException and provides additional logging information when a user is not found using their email address.\n",
            "name": "UserNotFoundException",
            "code": "@Slf4j\npublic class UserNotFoundException extends AuthenticationException {\n  public UserNotFoundException(String userEmail) {\n    super();\n    log.info(\"User not found - email: \" + userEmail);\n  }\n}",
            "location": {
              "start": 5,
              "insert": 5,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 7
          }
        ]
      }
    }
  },
  {
    "name": "AmenityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/AmenityApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `AmenityApiMapper` that provides mappings between different objects related to amenities in a home. The interface defines four methods: `amenityToAmenityDetailsResponse`, `amenitiesSetToAmenityDetailsResponseSet`, `amenityDtoToAmenity`, and `amenityToAmenityDto`. These methods convert objects of various types, including `Amenity`, `AmenityDto`, and `UpdateAmenityRequest`, into other forms that can be used for different purposes. The interfaces uses the `Mapper` package to define the mappings.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "3023b346-ce16-2b85-d549-b84d7764e556",
            "ancestors": [],
            "type": "function",
            "description": "provides mappings between Amenity objects and their corresponding Dto representations, as well as vice versa, using Mapper methods for each of these mappings.",
            "name": "AmenityApiMapper",
            "code": "@Mapper\npublic interface AmenityApiMapper {\n\n  GetAmenityDetailsResponse amenityToAmenityDetailsResponse(Amenity amenity);\n\n  Set<GetAmenityDetailsResponse> amenitiesSetToAmenityDetailsResponseSet(Set<Amenity> amenity);\n\n  Amenity amenityDtoToAmenity(AmenityDto amenityDto);\n\n  AmenityDto amenityToAmenityDto(Amenity amenity);\n\n  AmenityDto updateAmenityRequestToAmenityDto(UpdateAmenityRequest request);\n}",
            "location": {
              "start": 26,
              "insert": 26,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 13
          }
        ]
      }
    }
  },
  {
    "name": "CommunityApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/CommunityApiMapper.java",
    "content": {
      "structured": {
        "description": "an interface `CommunityApiMapper` through which various mappings between domain models and REST API responses can be performed. The interface provides several mapping methods, including:\n\n* `createCommunityRequestToCommunityDto`: maps a `CreateCommunityRequest` to a `CommunityDto`.\n* `communityToRestApiResponseCommunity`: maps a `Community` to a `GetCommunityDetailsResponseCommunity`.\n* `communitySetToRestApiResponseCommunitySet`: maps a set of `Community` objects to a set of `GetCommunityDetailsResponseCommunity` responses.\n* `createCommunityResponse`: maps a `Community` object to a `CreateCommunityResponse`.\n* `communityAdminSetToRestApiResponseCommunityAdminSet`: maps a set of `User` objects to a set of `ListCommunityAdminsResponseCommunityAdmin` responses.\n* `@Mapping(source = \"userId\", target = \"adminId\")`: maps a `User` object's `userId` field to its `adminId` field for the purpose of generating REST API responses.\n* `communityHouseNamesSetToCommunityHouseSet`: maps a set of `CommunityHouseName` objects to a set of `CommunityHouse` objects.\n* `communityHouseSetToRestApiResponseCommunityHouseSet`: maps a set of `CommunityHouse` objects to a set of `GetHouseDetailsResponseCommunityHouse` responses.",
        "items": [
          {
            "id": "e7fd7962-f46a-1cb3-6348-e4ef0ac7ed44",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between various data structures in the Community domain and their corresponding REST API responses.",
            "name": "CommunityApiMapper",
            "code": "@Mapper\npublic interface CommunityApiMapper {\n  CommunityDto createCommunityRequestToCommunityDto(CreateCommunityRequest request);\n\n  GetCommunityDetailsResponseCommunity communityToRestApiResponseCommunity(\n      Community community);\n\n  Set<GetCommunityDetailsResponseCommunity> communitySetToRestApiResponseCommunitySet(\n      Set<Community> communitySet);\n\n  CreateCommunityResponse communityToCreateCommunityResponse(Community community);\n\n  Set<ListCommunityAdminsResponseCommunityAdmin> communityAdminSetToRestApiResponseCommunityAdminSet(\n      Set<User> communityAdminSet);\n\n  @Mapping(source = \"userId\", target = \"adminId\")\n  ListCommunityAdminsResponseCommunityAdmin userAdminToResponseAdmin(User user);\n\n  Set<CommunityHouse> communityHouseNamesSetToCommunityHouseSet(\n      Set<CommunityHouseName> communityHouseNamesSet);\n\n  Set<GetHouseDetailsResponseCommunityHouse> communityHouseSetToRestApiResponseCommunityHouseSet(\n      Set<CommunityHouse> communityHouse);\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 24
          }
        ]
      }
    }
  },
  {
    "name": "HouseApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/HouseApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `HouseApiMapper` that maps between two data structures: `Set<CommunityHouse>` and `Set<GetHouseDetailsResponseCommunityHouse>`, and vice versa. The interface implements the `Mapper` interface from the `org.mapstruct` package, which provides a way to map between different data structures in a type-safe manner.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.CommunityHouse Pages: 1 -->\n<svg width=\"192pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 192.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.CommunityHouse</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-30 0,-30 0,0 184,0 184,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">House</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-85 2.5,-85 2.5,-66 181.5,-66 181.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-55.65C92,-47.36 92,-37.78 92,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-55.87 92,-65.87 95.5,-55.87 88.5,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-140 55,-140 55,-121 129,-121 129,-140\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-110.66C92,-101.93 92,-91.99 92,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-110.75 92,-120.75 95.5,-110.75 88.5,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "d0ce816a-436f-64bc-5d4d-59d79674d5e4",
            "ancestors": [],
            "type": "function",
            "description": "defines a mapping between sets of CommunityHouse objects and GetHouseDetailsResponseCommunityHouse objects using MapStruct.",
            "name": "HouseApiMapper",
            "code": "@Mapper\npublic interface HouseApiMapper {\n  Set<GetHouseDetailsResponseCommunityHouse> communityHouseSetToRestApiResponseCommunityHouseSet(\n      Set<CommunityHouse> communityHouse);\n\n  GetHouseDetailsResponseCommunityHouse communityHouseToRestApiResponseCommunityHouse(\n      CommunityHouse communityHouse);\n}",
            "location": {
              "start": 24,
              "insert": 24,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 8
          }
        ]
      }
    }
  },
  {
    "name": "SchedulePaymentApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface named SchedulePaymentApiMapper that implements MapStruct and Lombok annotations for mapping between different types of payment requests and payment responses. The code provides various methods for mapping payments, including enriching the payment request with user details, mapping the payment to a payment response, and setting user fields in the payment response. Additionally, the code defines several named mappings and expressions for mapping various field types. Overall, the code is used for mapping between different types of payment requests and responses in an API context.",
        "items": [
          {
            "id": "697d6958-331d-9281-d54e-626cc4e03a16",
            "ancestors": [],
            "type": "function",
            "description": "provides a mapping between various request and response objects for schedule payments, including PaymentDto, EnrichedSchedulePaymentRequest, SchedulePaymentResponse, UserDto, HouseMemberDto, and others.",
            "name": "SchedulePaymentApiMapper",
            "code": "@Mapper\npublic interface SchedulePaymentApiMapper {\n\n  @Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }\n\n  @Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n\n  @Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }\n\n  @Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }\n\n  @Mappings({\n      @Mapping(source = \"adminId\", target = \"admin\", qualifiedByName = \"adminIdToAdmin\"),\n      @Mapping(source = \"memberId\", target = \"member\", qualifiedByName = \"memberIdToMember\")\n  })\n  PaymentDto schedulePaymentRequestToPaymentDto(SchedulePaymentRequest schedulePaymentRequest);\n\n  PaymentDto enrichedSchedulePaymentRequestToPaymentDto(\n      EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest);\n\n  @AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n\n  Set<MemberPayment> memberPaymentSetToRestApiResponseMemberPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"memberId\", expression = \"java(payment.getMember().getMemberId())\")\n  MemberPayment paymentToMemberPayment(Payment payment);\n\n  Set<AdminPayment> adminPaymentSetToRestApiResponseAdminPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"adminId\", expression = \"java(payment.getAdmin().getUserId())\")\n  AdminPayment paymentToAdminPayment(Payment payment);\n\n  @Mappings({\n      @Mapping(source = \"admin\", target = \"adminId\", qualifiedByName = \"adminToAdminId\"),\n      @Mapping(source = \"member\", target = \"memberId\", qualifiedByName = \"memberToMemberId\")\n  })\n  SchedulePaymentResponse paymentToSchedulePaymentResponse(PaymentDto payment);\n\n  default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }\n\n  default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }\n\n  default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }\n}",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 103
          },
          {
            "id": "9e3ac240-4154-d69a-494c-974edd37620e",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "converts a `String` representing an admin ID into a `UserDto` object with the admin's ID as its `userId`.",
            "params": [
              {
                "name": "adminId",
                "type_name": "String",
                "description": "ID of an administrator for which an `AdminDto` object is to be constructed.\n\n* `userId`: This field contains the user ID of the admin in question.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object with a `userId` field set to the given `adminId`.\n\n* `userId`: A String attribute that contains the admin ID passed as an argument to the function.\n* Built using a `UserDto.builder()` method, which creates a new instance of the `UserDto` class with the specified attributes.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto user = adminIdToAdminDto(\"123456789\");\nSystem.out.println(user);  // Output: UserDto(userId=123456789)\n",
              "description": ""
            },
            "name": "adminIdToAdminDto",
            "code": "@Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }",
            "location": {
              "start": 44,
              "insert": 44,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          },
          {
            "id": "a1e07a5b-0181-5a9d-994b-1250627b0412",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "converts a `memberId` string into an instance of `HouseMemberDto`.",
            "params": [
              {
                "name": "memberId",
                "type_name": "String",
                "description": "unique identifier of a member within the scope of the `HouseMemberDto` class.\n\n* `memberId`: A String attribute representing the unique identifier for a member in the House.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the `memberId` property.\n\n* memberId: This is a String attribute that contains the member ID.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n",
              "description": ""
            },
            "name": "memberIdToMemberDto",
            "code": "@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }",
            "location": {
              "start": 51,
              "insert": 51,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 5
          },
          {
            "id": "21715b5e-914a-0c86-8d45-ebcc313b89a4",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "converts a `UserDto` object to its corresponding `UserId`.",
            "params": [
              {
                "name": "userDto",
                "type_name": "UserDto",
                "description": "user object containing the user ID, which is returned as the output of the `adminToAdminId` function.\n\n* `UserId`: This field contains the user ID of the administrative user.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the user ID of the admin entity.\n\n* The output is a string representing a user ID.\n* The user ID is obtained by using the `getUserId()` method of the `UserDto` object passed as an argument to the function.\n* The `UserDto` object contains information about a user, including their ID.\n* The `adminToAdminId` function extracts the user ID from the `UserDto` object and returns it as a string.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto userDto = new UserDto();\nuserDto.setUserId(\"admin123\");\nString adminId = adminToAdminId(userDto); // outputs \"admin123\"\n",
              "description": ""
            },
            "name": "adminToAdminId",
            "code": "@Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }",
            "location": {
              "start": 57,
              "insert": 57,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "234c07cb-cb52-6d91-b544-a7eae2fd22b7",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "maps a `HouseMemberDto` object to its corresponding member ID.",
            "params": [
              {
                "name": "houseMemberDto",
                "type_name": "HouseMemberDto",
                "description": "House Member object containing information about a member of a household, which is passed to the function to retrieve their member ID.\n\n* `getMemberId()`: Returns the member ID of the House Member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a string representing the member ID of the inputted House Member DTO.\n\n* The output is a string containing the member ID of the inputted House Member Dto.\n* The string consists of a unique identifier for the member within the context of the House application.\n* The member ID serves as a reference point for interactions between members within the application, enabling efficient communication and data exchange.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    HouseMemberDto houseMemberDto = new HouseMemberDto();\n    houseMemberDto.setMemberId(\"123\");\n    String result = memberToMemberId(houseMemberDto);\n    System.out.println(result); // prints 123\n}\n",
              "description": ""
            },
            "name": "memberToMemberId",
            "code": "@Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 4
          },
          {
            "id": "94e444c8-fe2a-388d-d449-25c74417637d",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "maps the user details of a `PaymentRequest` to its corresponding administrator and member fields in a `PaymentDto`.",
            "params": [
              {
                "name": "paymentDto",
                "type_name": "PaymentDto.PaymentDtoBuilder",
                "description": "PaymentDto instance that will be populated with user details from the enriched schedule payment request.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a builder class for the `PaymentDto` class, which is annotated with `@Builder`. The `PaymentDtoBuilder` allows for the configuration and modification of the `PaymentDto` instance through method calls.\n* `EnrichedSchedulePaymentRequest`: This is an instance of a class that contains enriched payment request details. It has various attributes, including `member` and `admin`, which are used in the `setUserFields` function.",
                "complex_type": true
              },
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "enriched payment request with additional user details, which are then mapped to admin and member fields in the `PaymentDto` object using the `setUserFields` method.\n\n* `paymentDto`: The `PaymentDto` object that is being populated with user details from the input.\n* `paymentDto.member`: A reference to the `Member` property of the `PaymentDto`, which will be set to an enriched version of the `house Member` property of the input.\n* `paymentDto.admin`: A reference to the `Admin` property of the `PaymentDto`, which will be set to an enriched version of the `house Admin` property of the input.\n\nThe `enrichedSchedulePaymentRequest` object contains various properties and attributes, including:\n\n* `member`: A `Member` object representing the user's details for the payment request.\n* `admin`: An `Admin` object representing the user's details for the payment request.",
                "complex_type": true
              }
            ],
            "usage": {
              "language": "java",
              "code": "PaymentDto paymentDto = new PaymentDto()\n    .description(\"Description\")\n    .charge(BigDecimal.TEN)\n    .dueDate(LocalDate.now().plusDays(1))\n    .recurring(false);\nEnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest()\n    .type(\"Type\")\n    .description(\"Description\")\n    .isRecurring(true)\n    .charge(BigDecimal.TEN)\n    .dueDate(LocalDate.now().plusDays(1))\n    .adminId(\"admin-id\")\n    .memberId(\"member-id\");\npaymentDto.setUserFields(enrichedSchedulePaymentRequest);\n",
              "description": ""
            },
            "name": "setUserFields",
            "code": "@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }",
            "location": {
              "start": 76,
              "insert": 76,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 7
          },
          {
            "id": "8459ebcc-9568-4ca1-5d48-1906ca594492",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "enriches a `SchedulePaymentRequest` object with additional information, such as community IDs, admin and member details, and additional fields for recurring payments.",
            "params": [
              {
                "name": "request",
                "type_name": "SchedulePaymentRequest",
                "description": "Schedule Payment Request to be enriched, providing its type, description, recurrence, charge, due date, and other relevant information.\n\n* `type`: The type of payment request, which could be either \"schedule\" or \"one-time\".\n* `description`: A brief description of the payment request.\n* `isRecurring`: Whether the payment is recurring or not.\n* `charge`: The amount of the payment request.\n* `dueDate`: The date by which the payment is due.\n* `adminId`: The ID of the administrator who created the payment request.\n* `adminName`: The name of the administrator who created the payment request.\n* `adminEmail`: The email address of the administrator who created the payment request.\n* `encryptedPassword`: The encrypted password of the administrator who created the payment request.\n* `communityIds`: A set of community IDs that the payment request is related to.\n* `memberId`: The ID of the member whose payment request this is.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the member.\n* `memberName`: The name of the member whose payment request this is.\n* `communityHouseId`: The ID of the community house associated with the member.",
                "complex_type": true
              },
              {
                "name": "admin",
                "type_name": "User",
                "description": "user who is authorizing the payment request, providing their ID, name, email address, and encrypted password to enrich the request with additional information.\n\n* `getCommunities()` returns a stream of `Community` objects, which represent the communities that the admin is a member of.\n* `map()` is used to transform each `Community` object into a `String` representing its community ID.\n* `collect()` is used to collect the transformed strings into a set called `communityIds`.\n* `getAdminId()` returns the ID of the admin who created the schedule payment request.\n* `getId()` returns the ID of the admin who created the schedule payment request.\n* `getName()` returns the name of the admin who created the schedule payment request.\n* `getEmail()` returns the email address of the admin who created the schedule payment request.\n* `getEncryptedPassword()` returns the encrypted password of the admin who created the schedule payment request.\n* `getCommunityIds()` returns a set of community IDs that are associated with the admin who created the schedule payment request.\n* `getMemberId()` returns the ID of the member whose payment request is being enriched.\n* `getHouseMemberDocument()` returns a `Document` object representing the member's house membership document, or an empty string if no document is available.",
                "complex_type": true
              },
              {
                "name": "member",
                "type_name": "HouseMember",
                "description": "HouseMember object associated with the Schedule Payment Request, providing additional information such as the member's ID and community house ID.\n\n* `member.getMemberId()`: The unique identifier of the member in the community.\n* `member.getId()`: The ID of the member.\n* `member.getHouseMemberDocument() != null ? member.getHouseMemberDocument().getDocumentFilename() : \"\"`: The filename of the document associated with the member's household, if available.\n* `member.getName()`: The name of the member.\n* `member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\"\": The ID of the community house associated with the member.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "EnrichedSchedulePaymentRequest",
              "description": "an enriched `SchedulePaymentRequest` object containing additional information.\n\n* `type`: The type of payment request, which can be either \"ONE_TIME\" or \"RECURRING\".\n* `description`: A brief description of the payment request.\n* `isRecurring`: Indicates whether the payment request is recurring or not.\n* `charge`: The amount of the payment request.\n* `dueDate`: The date by which the payment must be made.\n* `adminId`: The ID of the admin who created the payment request.\n* `adminName`: The name of the admin who created the payment request.\n* `adminEmail`: The email address of the admin who created the payment request.\n* `encryptedPassword`: The encrypted password of the admin who created the payment request.\n* `communityIds`: A set of community IDs associated with the payment request.\n* `memberId`: The ID of the member who made the payment request.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the payment request (only if it exists).\n* `memberName`: The name of the member who made the payment request.\n* `communityHouseId`: The ID of the community house associated with the payment request (only if it exists).",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class App {\n  public static void main(String[] args) {\n    UserDto admin = new UserDto()\n        .setUserId(\"admin\")\n        .setId(\"admin_id\")\n        .setName(\"Admin Name\")\n        .setEmail(\"admin@example.com\")\n        .setEncryptedPassword(\"encrypted_password\");\n    HouseMemberDto member = new HouseMemberDto()\n        .setHouseMemberDocument(\"document_filename\")\n        .setCommunityId(\"community_id\")\n        .setCommunityHouse(\"house_id\")\n        .setId(\"member_id\")\n        .setName(\"Member Name\");\n    SchedulePaymentRequest request = new SchedulePaymentRequest()\n        .setType(SchedulePaymentRequest.Type.SCHEDULED)\n        .setDescription(\"This is a scheduled payment\")\n        .setRecurring(true)\n        .setCharge(10.0)\n        .setDueDate(LocalDate.now())\n        .setAdminId(\"admin_id\")\n        .setMemberId(\"member_id\");\n    EnrichedSchedulePaymentRequest enriched = new App().enrichSchedulePaymentRequest(request, admin, member);\n  }\n}\n",
              "description": ""
            },
            "name": "enrichSchedulePaymentRequest",
            "code": "default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }",
            "location": {
              "start": 102,
              "insert": 102,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 24
          },
          {
            "id": "d1b7b23b-8645-0a80-754d-59efd09b9c35",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "builds a `UserDto` object representing the administrator of an enriched schedule payment request, fetching their details from the provided `EnrichedSchedulePaymentRequest`.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "administrative user for whom the `UserDto` is being built, providing its ID, name, email, and encrypted password.\n\n* `userId`: The ID of the user who made the request.\n* `id`: The ID of the administrative entity associated with the request.\n* `name`: The name of the administrative entity associated with the request.\n* `email`: The email address of the administrative entity associated with the request.\n* `encryptedPassword`: The encrypted password for the administrative entity associated with the request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "UserDto",
              "description": "a `UserDto` object containing the administrator's details.\n\n* `userId`: The ID of the administrator associated with the enriched schedule payment request.\n* `id`: The entity ID of the administrator associated with the enriched schedule payment request.\n* `name`: The name of the administrator associated with the enriched schedule payment request.\n* `email`: The email address of the administrator associated with the enriched schedule payment request.\n* `encryptedPassword`: The encrypted password of the administrator associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "UserDto admin = getEnrichedRequestAdmin(enrichedSchedulePaymentRequest);\n",
              "description": "\nHere, the value of enrichedSchedulePaymentRequest.getAdminId() is passed to the getEnrichedRequestAdmin method which returns an instance of UserDto.\n\nThe UserDto class has a builder for creating instances with the following properties: userId, id, name, email, encryptedPassword. The values are extracted from enrichedSchedulePaymentRequest and assigned accordingly to the fields in the UserDto object. Then, the build method is called to return an instance of UserDto containing these properties.\n\nThe example above would create a new UserDto object with the userId, id, name, email and encryptedPassword fields set according to enrichedSchedulePaymentRequest.\n\nIt's important to note that this method only works if the EnrichedSchedulePaymentRequest class has the properties adminId, adminEntityId, adminName and adminEmail, otherwise a NullPointerException will be thrown."
            },
            "name": "getEnrichedRequestAdmin",
            "code": "default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }",
            "location": {
              "start": 127,
              "insert": 127,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 9
          },
          {
            "id": "78d52396-3c6c-5b9a-8f4f-860993ad8b89",
            "ancestors": [
              "697d6958-331d-9281-d54e-626cc4e03a16"
            ],
            "type": "function",
            "description": "generates a `HouseMemberDto` object with information from an `EnrichedSchedulePaymentRequest`. It provides the member entity ID, ID, and name.",
            "params": [
              {
                "name": "enrichedSchedulePaymentRequest",
                "type_name": "EnrichedSchedulePaymentRequest",
                "description": "HouseMemberDto object that contains additional information about the member, such as their ID, name, and entity ID.\n\n* `getMemberEntityId()` returns the ID of the member entity associated with the schedule payment request.\n* `getMemberId()` returns the ID of the member associated with the schedule payment request.\n* `getHouseMemberName()` returns the name of the house member associated with the schedule payment request.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "HouseMemberDto",
              "description": "a `HouseMemberDto` object containing the member's ID, name, and entity ID.\n\n* `id`: This property represents the ID of the house member entity associated with the enriched schedule payment request.\n* `memberId`: This property represents the ID of the member associated with the enriched schedule payment request.\n* `name`: This property represents the name of the house member associated with the enriched schedule payment request.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "public class SchedulePaymentUseCase {\n  private final PaymentRepository paymentRepository;\n  private final UserService userService;\n  private final HouseMemberService houseMemberService;\n  private final PaymentDtoMapper paymentDtoMapper;\n  \n  public SchedulePaymentUseCase(PaymentRepository paymentRepository, UserService userService, HouseMemberService houseMemberService, PaymentDtoMapper paymentDtoMapper) {\n    this.paymentRepository = paymentRepository;\n    this.userService = userService;\n    this.houseMemberService = houseMemberService;\n    this.paymentDtoMapper = paymentDtoMapper;\n  }\n  \n  public SchedulePaymentResponse schedulePayment(SchedulePaymentRequest request) {\n    User admin = userService.getUserByEmail(request.getAdminEmail());\n    HouseMember member = houseMemberService.getHouseMemberByMemberId(request.getMemberId());\n    \n    EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = paymentDtoMapper.enrichSchedulePaymentRequest(request, admin, member);\n    PaymentDto paymentDto = new PaymentDto();\n    paymentDtoMapper.setEnrichedSchedulePaymentRequestToPaymentDto(enrichedSchedulePaymentRequest, paymentDto);\n    \n    Payment payment = paymentRepository.save(paymentDto);\n    return paymentDtoMapper.paymentToSchedulePaymentResponse(payment);\n  }\n}\n",
              "description": "\nThe example uses the SchedulePaymentUseCase class that has a method called schedulePayment, which takes in a SchedulePaymentRequest object as input and saves it to the database using PaymentRepository and HouseMemberService. The method also uses UserService to retrieve an admin and a member by their email addresses from the request. The mapper is then used to enrich the request with these entities and save the payment using PaymentDtoMapper.\n\nThis is an example of how the code would be tested:\n"
            },
            "name": "getEnrichedRequestMember",
            "code": "default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }",
            "location": {
              "start": 137,
              "insert": 137,
              "offset": " ",
              "indent": 2
            },
            "item_type": "method",
            "length": 6
          }
        ]
      }
    }
  },
  {
    "name": "UserApiMapper.java",
    "path": "service/src/main/java/com/myhome/controllers/mapper/UserApiMapper.java",
    "content": {
      "structured": {
        "description": "An interface `UserApiMapper` that uses Mapstruct to automatically convert between different types related to user management. The interface includes four methods: `createUserRequestToUserDto`, `userSetToRestApiResponseUserSet`, `userDtoToCreateUserResponse`, and `userDtoToGetUserDetailsResponse`. These methods allow for the conversion of a `CreateUserRequest` object to a `UserDto`, a `Set<User>` to a `Set<GetUserDetailsResponseUser>`, a `UserDto` to a `CreateUserResponse`, and a `UserDto` to a `GetUserDetailsResponse`.",
        "items": [
          {
            "id": "e3977f1f-4910-708d-ba41-95289a15d14f",
            "ancestors": [],
            "type": "function",
            "description": "provides a mapping between different data structures related to users, such as from CreateUserRequest to UserDto and vice versa, and from Set<User> to RestApiResponseUserSet.",
            "name": "UserApiMapper",
            "code": "@Mapper\npublic interface UserApiMapper {\n\n  UserDto createUserRequestToUserDto(CreateUserRequest createUserRequest);\n\n  Set<GetUserDetailsResponseUser> userSetToRestApiResponseUserSet(\n      Set<User> userSet);\n\n  CreateUserResponse userDtoToCreateUserResponse(UserDto userDto);\n\n  GetUserDetailsResponseUser userDtoToGetUserDetailsResponse(UserDto userDto);\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0
            },
            "item_type": "interface",
            "length": 12
          }
        ]
      }
    }
  },
  {
    "name": "EnrichedSchedulePaymentRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/EnrichedSchedulePaymentRequest.java",
    "content": {
      "structured": {
        "description": "An enriched `SchedulePaymentRequest` class that extends the base `SchedulePaymentRequest` class with additional fields for admin and house member details. The enriched request provides more information to map to the user and house member fields in payment successfully, avoiding the need to specify all extra details in the request. The code includes constructors, data and equals and hashCode methods, and uses Lombok packages for automated creation of getters and setters, as well as for generating a no-args constructor, all-args constructor, and equals and hashCode implementation.",
        "image": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.request.EnrichedSchedulePaymentRequest Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.request.EnrichedSchedulePaymentRequest</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.request.</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">EnrichedSchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"164,-85 21,-85 21,-66 164,-66 164,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">SchedulePaymentRequest</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n",
        "items": [
          {
            "id": "e2e3c5ff-cfca-958a-cc4d-2c19bff457cc",
            "ancestors": [],
            "type": "function",
            "description": "extends SchedulePaymentRequest and provides additional information on admin and house member details to enrich the payment request.\nFields:\n\t- adminEntityId (Long): represents an entity associated with the admin user, such as a department or organization, based on which the request is enriched. \n\t- adminName (String): represents the human name of an administrative user associated with the payment request. \n\t- adminEmail (String): represents an email address associated with the admin entity ID. \n\t- adminEncryptedPassword (String): likely stores an encrypted password for an administrator of a house member in the system. \n\t- adminCommunityIds (Set<String>): stores a set of community IDs associated with the admin user who created or updated the EnrichedSchedulePaymentRequest. \n\t- memberEntityId (Long): represents an entity in the system of interest. \n\t- houseMemberDocumentName (String): represents the name of a document related to the member's house information. \n\t- houseMemberName (String): represents the name of a member of a particular household. \n\t- houseMemberHouseID (String): represents the unique identifier of the member's house within their community. \n\n",
            "name": "EnrichedSchedulePaymentRequest",
            "code": "@NoArgsConstructor\n@AllArgsConstructor\n@Data\n@EqualsAndHashCode(callSuper = false)\npublic class EnrichedSchedulePaymentRequest extends SchedulePaymentRequest {\n  private Long adminEntityId;\n  private String adminName;\n  private String adminEmail;\n  private String adminEncryptedPassword;\n  private Set<String> adminCommunityIds;\n  private Long memberEntityId;\n  private String houseMemberDocumentName;\n  private String houseMemberName;\n  private String houseMemberHouseID;\n\n  public EnrichedSchedulePaymentRequest(String type, String description, boolean recurring,\n      BigDecimal charge, String dueDate, String adminId, Long adminEntityId, String adminName,\n      String adminEmail, String adminEncryptedPassword, Set<String> adminCommunityIds,\n      String memberId, Long memberEntityId, String houseMemberDocumentName, String houseMemberName,\n      String houseMemberHouseID) {\n\n    super.type(type).description(description).recurring(recurring).charge(charge).dueDate(dueDate).adminId(adminId).memberId(memberId);\n\n    this.adminName = adminName;\n    this.adminEmail = adminEmail;\n    this.adminEncryptedPassword = adminEncryptedPassword;\n    this.adminCommunityIds = adminCommunityIds;\n    this.adminEntityId = adminEntityId;\n    this.memberEntityId = memberEntityId;\n    this.houseMemberDocumentName = houseMemberDocumentName;\n    this.houseMemberName = houseMemberName;\n    this.houseMemberHouseID = houseMemberHouseID;\n  }\n}",
            "location": {
              "start": 33,
              "insert": 33,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 34
          }
        ]
      }
    }
  },
  {
    "name": "ForgotPasswordRequest.java",
    "path": "service/src/main/java/com/myhome/controllers/request/ForgotPasswordRequest.java",
    "content": {
      "structured": {
        "description": "A class called ForgotPasswordRequest, which contains three fields: email, token, and newPassword. The email field is required to be an email address, the token field is generated and unique for each request, and the newPassword field allows the user to enter their new password.",
        "items": [
          {
            "id": "db0e7924-213a-f68e-b945-6600b8cae163",
            "ancestors": [],
            "type": "function",
            "description": "represents a data class for storing email address, token, and new password for forgot password functionality.\nFields:\n\t- email (String): in the ForgotPasswordRequest class is of type String and represents an email address associated with the requester's account. \n\t- token (String): in the ForgotPasswordRequest class is likely used to store a unique code or identifier for the user to reset their password. \n\t- newPassword (String): in the ForgotPasswordRequest class represents a string value that a user enters to reset their password. \n\n",
            "name": "ForgotPasswordRequest",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Data\npublic class ForgotPasswordRequest {\n  @Email\n  public String email;\n  public String token;\n  public String newPassword;\n}",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 9
          }
        ]
      }
    }
  },
  {
    "name": "CreateUserResponse.java",
    "path": "service/src/main/java/com/myhome/controllers/response/CreateUserResponse.java",
    "content": {
      "structured": {
        "description": "A response model for creating a user request. The `CreateUserResponse` class has three fields: `userId`, `name`, and `email`. These fields are annotated with various Lombok annotations, indicating that they should be automatically generated by the Lombok tool. The summary is of a high-level overview of the code, including the packages used and any notable technical details.",
        "items": [
          {
            "id": "e245cb49-9c47-2fb6-874d-1daf754b4a96",
            "ancestors": [],
            "type": "function",
            "description": "represents a model for responding to a create user request with attributes for user ID, name, and email.\nFields:\n\t- userId (String): represents a unique identifier for a user in the system. \n\t- name (String): of the CreateUserResponse class holds a string value representing the user's name. \n\t- email (String): represents a string value in the CreateUserResponse class. \n\n",
            "name": "CreateUserResponse",
            "code": "@AllArgsConstructor\n@NoArgsConstructor\n@Getter\n@Setter\npublic class CreateUserResponse {\n  private String userId;\n  private String name;\n  private String email;\n}",
            "location": {
              "start": 30,
              "insert": 30,
              "offset": " ",
              "indent": 0
            },
            "item_type": "class",
            "length": 9
          }
        ]
      }
    }
  }
]
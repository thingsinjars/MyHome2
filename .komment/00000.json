[
  {
    "name": "PageInfo.java",
    "path": "api/src/main/java/com/myhome/utils/PageInfo.java",
    "content": {
      "structured": {
        "description": "A `PageInfo` class that holds information about a page of data, including the current page number, page size, total pages, and total elements. It also provides a factory method for creating instances of `PageInfo` based on a `Pageable` object and a page of data.",
        "items": [
          {
            "id": "f83d7e51-4ca3-32af-7b43-9dc19128b7d8",
            "ancestors": [],
            "type": "function",
            "description": "is a data structure that represents a page of results from a query. It contains information about the current page being viewed, the number of elements on the page, and the total number of pages in the result set. The class also includes methods for creating new instances of the class based on pageable and page parameters.",
            "name": "PageInfo",
            "code": "@EqualsAndHashCode\n@ToString\n@Getter\n@RequiredArgsConstructor(access = AccessLevel.PRIVATE)\npublic class PageInfo {\n  private final int currentPage;\n  private final int pageLimit;\n  private final int totalPages;\n  private final long totalElements;\n\n  public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }\n}",
            "location": {
              "start": 11,
              "insert": 11,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 19,
            "docLength": null,
            "doc": "A `PageInfo` class that holds information about a page of data, including the current page number, page size, total pages, and total elements. It also provides a factory method for creating instances of `PageInfo` based on a `Pageable` object and a page of data."
          },
          {
            "id": "c950959e-69ea-dd99-514a-c8c8dc62ecc6",
            "ancestors": [
              "f83d7e51-4ca3-32af-7b43-9dc19128b7d8"
            ],
            "type": "function",
            "description": "creates a `PageInfo` object containing information about the number of pages, page size, total pages, and total elements for a given pageable and page.",
            "params": [
              {
                "name": "pageable",
                "type_name": "Pageable",
                "description": "pageable object that contains information about the current page being processed, including its page number and size.\n\n* `pageable.getPageNumber()`: The page number of the current page being processed.\n* `pageable.getPageSize()`: The number of elements in each page.\n* `page.getTotalPages()`: The total number of pages in the collection.\n* `page.getTotalElements()`: The total number of elements in the collection.",
                "complex_type": true
              },
              {
                "name": "page",
                "type_name": "Page<?>",
                "description": "current page being processed, providing information on its position, size, and total pages and elements in the collection.\n\n* `pageNumber`: The page number that contains the element(s) being processed.\n* `pageSize`: The number of elements in each page.\n* `totalPages`: The total number of pages that contain elements.\n* `totalElements`: The total number of elements across all pages.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "PageInfo",
              "description": "a `PageInfo` object containing various metadata about a pageable and its corresponding page.\n\n* pageable.getPageNumber(): The number of the current page being accessed.\n* pageable.getPageSize(): The size of each page being displayed.\n* page.getTotalPages(): The total number of pages available in the dataset.\n* page.getTotalElements(): The total number of elements within the current page and all previous pages.",
              "complex_type": true
            },
            "name": "of",
            "code": "public static PageInfo of(Pageable pageable, Page<?> page) {\n    return new PageInfo(\n        pageable.getPageNumber(),\n        pageable.getPageSize(),\n        page.getTotalPages(),\n        page.getTotalElements()\n    );\n  }",
            "location": {
              "start": 21,
              "insert": 21,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 8,
            "docLength": null,
            "doc": "A `PageInfo` class that holds information about a page of data, including the current page number, page size, total pages, and total elements. It also provides a factory method for creating instances of `PageInfo` based on a `Pageable` object and a page of data."
          }
        ]
      }
    }
  }
]
{"name":"AmenitySDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/AmenitySDJpaServiceTest.java","content":{"structured":{"description":"An AmenitySDJpaService class that handles CRUD (create, read, update, delete) operations on amenities in a Spring Data JPA-backed repository. The service uses Jackson2 to map JSON responses into and out of Java objects, and it interacts with the repository through JPA queries. Specifically, the code defines methods for creating new amenities, reading existing amenities, updating existing amenities, and deleting amenities. Additionally, the code defines a test class for verifying that the service behaves correctly in various scenarios.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Amenity Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Amenity</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173.5,-19 5.5,-19 5.5,0 173.5,0 173.5,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Amenity</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93","ancestors":[],"type":"function","description":"TODO","name":"AmenitySDJpaServiceTest","code":"class AmenitySDJpaServiceTest {\n\n  private static final String TEST_AMENITY_NAME = \"test-amenity-name\";\n  private static final BigDecimal TEST_AMENITY_PRICE = BigDecimal.valueOf(1);\n  private final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private final String TEST_AMENITY_DESCRIPTION = \"test-amenity-description\";\n  private final String TEST_COMMUNITY_ID = \"test-community-id\";\n  private final int TEST_AMENITIES_COUNT = 2;\n  @Mock\n  private AmenityRepository amenityRepository;\n  @Mock\n  private CommunityRepository communityRepository;\n  @Mock\n  private CommunityService communityService;\n  @Mock\n  private AmenityApiMapper amenityApiMapper;\n\n  @InjectMocks\n  private AmenitySDJpaService amenitySDJpaService;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void deleteAmenity() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertTrue(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository).delete(testAmenity);\n  }\n\n  @Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertFalse(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository, never()).delete(any());\n  }\n\n  @Test\n  void listAllAmenities() {\n    // given\n    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    testCommunity.setAmenities(testAmenities);\n\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(testAmenities, resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }\n\n  @Test\n  void listAllAmenitiesNotExists() {\n    // given\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(new HashSet<>(), resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }\n\n  @Test\n  void shouldAddAmenityToExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final Community community = new Community().withCommunityId(communityId);\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final AmenityDto amenityDtoWithCommunity = baseAmenityDto.communityId(communityId);\n    final Amenity baseAmenity = new Amenity();\n    final Amenity amenityWithCommunity = new Amenity().withCommunity(community);\n    final List<Amenity> amenitiesWithCommunity = singletonList(amenityWithCommunity);\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.of(community));\n    given(amenityApiMapper.amenityDtoToAmenity(baseAmenityDto))\n        .willReturn(baseAmenity);\n    given(amenityRepository.saveAll(amenitiesWithCommunity))\n        .willReturn(amenitiesWithCommunity);\n    given(amenityApiMapper.amenityToAmenityDto(amenityWithCommunity))\n        .willReturn(amenityDtoWithCommunity);\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertTrue(actualResult.isPresent());\n    final List<AmenityDto> actualResultAmenitiesDtos = actualResult.get();\n    assertEquals(singletonList(amenityDtoWithCommunity), actualResultAmenitiesDtos);\n    verify(communityService).getCommunityDetailsById(communityId);\n    verify(amenityApiMapper).amenityDtoToAmenity(baseAmenityDto);\n    verify(amenityRepository).saveAll(amenitiesWithCommunity);\n    verify(amenityApiMapper).amenityToAmenityDto(amenityWithCommunity);\n  }\n\n  @Test\n  void shouldFailOnAddAmenityToNotExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertFalse(actualResult.isPresent());\n    verify(communityService).getCommunityDetailsById(communityId);\n    verifyNoInteractions(amenityApiMapper);\n    verifyNoInteractions(amenityRepository);\n  }\n\n  @Test\n  void shouldUpdateCommunityAmenitySuccessfully() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    AmenityDto updated = getTestAmenityDto();\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(updatedAmenity);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updated);\n\n    // then\n    assertTrue(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }\n\n  @Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(getTestAmenityDto());\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository, times(0)).save(getUpdatedCommunityAmenity());\n    verifyNoInteractions(communityRepository);\n  }\n\n  @Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n    AmenityDto updatedDto = getTestAmenityDto();\n    Community community = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(null);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }\n\n  @Test\n  void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }\n\n  private AmenityDto getTestAmenityDto() {\n    Long TEST_AMENITY_ENTITY_ID = 1L;\n\n    return new AmenityDto()\n        .id(TEST_AMENITY_ENTITY_ID)\n        .amenityId(TEST_AMENITY_ID)\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(TEST_AMENITY_PRICE)\n        .communityId(TEST_COMMUNITY_ID);\n  }\n\n  private Amenity getUpdatedCommunityAmenity() {\n    AmenityDto communityAmenityDto = getTestAmenityDto();\n    return new Amenity()\n        .withAmenityId(communityAmenityDto.getAmenityId())\n        .withName(communityAmenityDto.getName())\n        .withPrice(communityAmenityDto.getPrice())\n        .withDescription(communityAmenityDto.getDescription())\n        .withCommunity(TestUtils.CommunityHelpers.getTestCommunity());\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0},"item_type":"class","length":265},{"id":"ee740bcd-28e2-fbaa-2d46-e9f5fa0be339","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"initializes mock objects using MockitoAnnotations.","params":[],"usage":{"language":"java","code":"@BeforeEach\nprivate void init() {\n    MockitoAnnotations.initMocks(this);\n}\n","description":"\nThis method is called before each test case, and the annotation `MockitoAnnotations` initializes all mocked dependencies defined in the test class. This method should be used to initialize any required variables or objects that are not already initialized in the class. \nThe purpose of this code snippet is to ensure that every test case has access to all the mocked dependencies defined in the `initMocks()` method. It's important because it makes sure that all dependencies are set before each test is executed, making it easier to write unit tests and reducing the risk of creating false positives or negatives.\nThe code snippet should be added to a class where there are mocked dependencies defined in the `initMocks()` method.\nPlease let me know if you have any question!"},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"f853240c-3e5d-4c85-164e-4f17dd0bcace","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"deletes an amenity from the repository based on the specified ID, verifying the deletion via calls to the repository and checking the result using a boolean value.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteAmenity() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertTrue(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository).delete(testAmenity);\n  }\n","description":"\nThe example code is short and to the point. The test verifies that the delete method works correctly by asserting whether the amenity has been successfully deleted, and also verifies that the correct repository methods are called. It is an accurate representation of how a user would use the deleteAmenity method."},"name":"deleteAmenity","code":"@Test\n  void deleteAmenity() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertTrue(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository).delete(testAmenity);\n  }","location":{"start":76,"insert":76,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"74ac0e13-b756-daaf-a644-ec17030e90c2","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"tests whether the `amenitySDJpaService` can delete an amenity that does not exist in the repository. It creates a mock response from the `amenityRepository` to return an empty `Optional`, and then calls the `deleteAmenity` method to simulate the deletion of the amenity. The function then verifies that the amenity was not deleted and that the `findByAmenityIdWithCommunity` method was called with the correct ID.","params":[],"usage":{"language":"java","code":"@Test\nvoid deleteAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertFalse(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository, never()).delete(any());\n}\n","description":"\nIn this example, the method findByAmenityIdWithCommunity is expected to return an Optional with an empty value. Therefore, the variable amenityDeleted is expected to be false. Additionally, the method delete is never called as it would not make sense to attempt deleting a non-existent amenity. Finally, we verify that the findByAmenityIdWithCommunity was called with the expected value of TEST_AMENITY_ID and that the delete method was never called.\n\nThis test example shows how to use the deleteAmenityNotExists method by providing a test for a scenario where an amenity with a given ID does not exist. This is done by mocking the findByAmenityIdWithCommunity repository method to return an Optional with an empty value, and then using the verifyNoMoreInteractions method to ensure that the delete method was never called."},"name":"deleteAmenityNotExists","code":"@Test\n  void deleteAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityIdWithCommunity(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean amenityDeleted = amenitySDJpaService.deleteAmenity(TEST_AMENITY_ID);\n\n    // then\n    assertFalse(amenityDeleted);\n    verify(amenityRepository).findByAmenityIdWithCommunity(TEST_AMENITY_ID);\n    verify(amenityRepository, never()).delete(any());\n  }","location":{"start":94,"insert":94,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"ef7b5cba-74d1-448a-6148-155c7816cef4","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"retrieves all amenities associated with a given community ID from the database using JPA service, and then compares them to the expected set of amenities provided as input.","params":[],"usage":{"language":"java","code":"Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n","description":"\nThis code is a unit test example of the listAllAmenities method from the given code snippet. The variable TEST_COMMUNITY_ID is used as an argument for the method. This will call the method findByCommunityIdWithAmenities from the communityRepository with the value TEST_COMMUNITY_ID, which returns an Optional<Community> object. Afterwards, the result of the method is assigned to the variable resultAmenities.\n\nThe example code does not provide an explanation for the method. It simply calls the listAllAmenities method with a test value and assigns it to a variable. The given code snippet only provides an implementation of the method but does not explain how to use it. Therefore, this example is not enough to show how to correctly use this method."},"name":"listAllAmenities","code":"@Test\n  void listAllAmenities() {\n    // given\n    Set<Amenity> testAmenities = TestUtils.AmenityHelpers.getTestAmenities(TEST_AMENITIES_COUNT);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    testCommunity.setAmenities(testAmenities);\n\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(testAmenities, resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }","location":{"start":109,"insert":109,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"3033940a-94d2-0e96-9b4d-0684bb4fb2d4","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"tests the absence of amenities for a given community ID by retrieving them from the repository, checking if they exist and verifying the result with a set of empty amenities.","params":[],"usage":{"language":"java","code":"@Test\n  void listAllAmenitiesNotExists() {\n    // given\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(new HashSet<>(), resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }\n","description":"\nThe code above tests the method listAllAmenitiesNotExists, which is a method that takes in an integer as input (the community id), and returns a Set of Amenity objects. The test verifies that if there are no amenities associated with the given community id, then the returned set of amenities should be an empty set.\n\nThe given statement mocks the repository findByCommunityIdWithAmenities method to return Optional.empty(). The when statement calls the listAllAmenitiesNotExists method and assigns its returned value to resultAmenities. Finally, the then statement verifies that resultAmenities is an empty set using assertEquals(new HashSet<>()).\n\nThe verify statement at the end of the test verifies that communityRepository's findByCommunityIdWithAmenities method was called with TEST_COMMUNITY_ID."},"name":"listAllAmenitiesNotExists","code":"@Test\n  void listAllAmenitiesNotExists() {\n    // given\n    given(communityRepository.findByCommunityIdWithAmenities(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    Set<Amenity> resultAmenities = amenitySDJpaService.listAllAmenities(TEST_COMMUNITY_ID);\n\n    // then\n    assertEquals(new HashSet<>(), resultAmenities);\n    verify(communityRepository).findByCommunityIdWithAmenities(TEST_COMMUNITY_ID);\n  }","location":{"start":127,"insert":127,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"ec695f68-5c59-57a7-d343-1b068eade4ea","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"tests the createAmenities method of the amenity SDJpa service. It provides a set of amenities DTOs to be added to an existing community, saves them to the database, and verifies the result.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldAddAmenityToExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final Community community = new Community().withCommunityId(communityId);\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final AmenityDto amenityDtoWithCommunity = baseAmenityDto.communityId(communityId);\n    final Amenity baseAmenity = new Amenity();\n    final Amenity amenityWithCommunity = new Amenity().withCommunity(community);\n    final List<Amenity> amenitiesWithCommunity = singletonList(amenityWithCommunity);\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.of(community));\n    given(amenityApiMapper.amenityDtoToAmenity(baseAmenityDto))\n        .willReturn(baseAmenity);\n    given(amenityRepository.saveAll(amenitiesWithCommunity))\n        .willReturn(amenitiesWithCommunity);\n    given(amenityApiMapper.amenityToAmenityDto(amenityWithCommunity))\n        .willReturn(amenityDtoWithCommunity);\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertTrue(actualResult.isPresent());\n    final List<AmenityDto> actualResultAmenitiesDtos = actualResult.get();\n    assertEquals(singletonList(amenityDtoWithCommunity), actualResultAmenitiesDtos);\n    verify(communityService).getCommunityDetailsById(communityId);\n    verify(amenityApiMapper).amenityDtoToAmenity(baseAmenityDto);\n    verify(amenityRepository).saveAll(amenitiesWithCommunity);\n    verify(amenityApiMapper).amenityToAmenityDto(amenityWithCommunity);\n  }\n","description":"\nThe example code should be as short as possible. Reason your way through the code, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"shouldAddAmenityToExistingCommunity","code":"@Test\n  void shouldAddAmenityToExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final Community community = new Community().withCommunityId(communityId);\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final AmenityDto amenityDtoWithCommunity = baseAmenityDto.communityId(communityId);\n    final Amenity baseAmenity = new Amenity();\n    final Amenity amenityWithCommunity = new Amenity().withCommunity(community);\n    final List<Amenity> amenitiesWithCommunity = singletonList(amenityWithCommunity);\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.of(community));\n    given(amenityApiMapper.amenityDtoToAmenity(baseAmenityDto))\n        .willReturn(baseAmenity);\n    given(amenityRepository.saveAll(amenitiesWithCommunity))\n        .willReturn(amenitiesWithCommunity);\n    given(amenityApiMapper.amenityToAmenityDto(amenityWithCommunity))\n        .willReturn(amenityDtoWithCommunity);\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertTrue(actualResult.isPresent());\n    final List<AmenityDto> actualResultAmenitiesDtos = actualResult.get();\n    assertEquals(singletonList(amenityDtoWithCommunity), actualResultAmenitiesDtos);\n    verify(communityService).getCommunityDetailsById(communityId);\n    verify(amenityApiMapper).amenityDtoToAmenity(baseAmenityDto);\n    verify(amenityRepository).saveAll(amenitiesWithCommunity);\n    verify(amenityApiMapper).amenityToAmenityDto(amenityWithCommunity);\n  }","location":{"start":141,"insert":141,"offset":" ","indent":2},"item_type":"method","length":38},{"id":"088bf287-d11c-d2b4-f04b-4c0f734b2257","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"verifies that attempting to create amenities for a community that does not exist will result in a false positive response from the `createAmenities` method, and also verifies that the `getCommunityDetailsById` method of the `communityService` is called with the correct community ID.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldFailOnAddAmenityToNotExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertFalse(actualResult.isPresent());\n    verify(communityService).getCommunityDetailsById(communityId);\n    verifyNoInteractions(amenityApiMapper);\n    verifyNoInteractions(amenityRepository);\n  }\n","description":"\nThe example code should as short as possible, and the example should work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"shouldFailOnAddAmenityToNotExistingCommunity","code":"@Test\n  void shouldFailOnAddAmenityToNotExistingCommunity() {\n    // given\n    final String communityId = \"communityId\";\n    final AmenityDto baseAmenityDto = new AmenityDto()\n        .id(1L)\n        .amenityId(\"amenityId\")\n        .name(\"name\")\n        .description(\"description\")\n        .price(BigDecimal.valueOf(12));\n    final HashSet<AmenityDto> requestAmenitiesDto = new HashSet<>(singletonList(baseAmenityDto));\n    given(communityService.getCommunityDetailsById(communityId))\n        .willReturn(Optional.empty());\n\n    // when\n    final Optional<List<AmenityDto>> actualResult =\n        amenitySDJpaService.createAmenities(requestAmenitiesDto, communityId);\n\n    // then\n    assertFalse(actualResult.isPresent());\n    verify(communityService).getCommunityDetailsById(communityId);\n    verifyNoInteractions(amenityApiMapper);\n    verifyNoInteractions(amenityRepository);\n  }","location":{"start":180,"insert":180,"offset":" ","indent":2},"item_type":"method","length":24},{"id":"5a18699f-00ca-9fb7-4942-41f3a0f7addd","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"tests the update amenity method of a JPA service, by updating an amenity in the database and verifying the result.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotUpdateAmenityIfDoesNotExist() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    AmenityDto updated = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updated);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }\n","description":"\nThis test should check the following:  \n1. The method should return false if the amenity does not exist in the database.  \n2. The method should verify that findByAmenityId and findByCommunityId were called once with the correct arguments.  \n3. The method should verify that no more interactions happened on the repository."},"name":"shouldUpdateCommunityAmenitySuccessfully","code":"@Test\n  void shouldUpdateCommunityAmenitySuccessfully() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Community testCommunity = TestUtils.CommunityHelpers.getTestCommunity();\n    AmenityDto updated = getTestAmenityDto();\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(testCommunity));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(updatedAmenity);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updated);\n\n    // then\n    assertTrue(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }","location":{"start":205,"insert":205,"offset":" ","indent":2},"item_type":"method","length":25},{"id":"0a27cc90-7617-ccb2-fe41-fe8b9d71e903","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"verifies that the `amenitySDJpaService` does not update a community amenity successfully if the amenity does not exist in the repository.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository, times(0)).save(getUpdatedCommunityAmenity());\n    verifyNoInteractions(communityRepository);\n  }\n","description":"\n The test code should not include unnecessary details. It should only provide the necessary inputs and expected outputs to correctly reason about the method.     The test code should also be written in a way that it is easy to understand, and the inputs should be easily readable."},"name":"shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists","code":"@Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfAmenityNotExists() {\n    // given\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(getTestAmenityDto());\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository, times(0)).save(getUpdatedCommunityAmenity());\n    verifyNoInteractions(communityRepository);\n  }","location":{"start":231,"insert":231,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"a3cda5d4-0bdb-69a4-0b47-b0ff437e7b65","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"verifies that an attempt to update a community amenity fails, resulting in the amenity not being updated in the repository.","params":[],"usage":{"language":"java","code":"// Given\nAmenity testAmenity = TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\nAmenity updatedAmenity = getUpdatedCommunityAmenity();\nAmenityDto updatedDto = getTestAmenityDto();\nCommunity community = TestUtils.CommunityHelpers.getTestCommunity();\n\ngiven(amenityRepository.findByAmenityId(TEST_AMENITY_ID)).willReturn(Optional.of(testAmenity));\ngiven(communityRepository.findByCommunityId(TEST_COMMUNITY_ID)).willReturn(Optional.of(community));\ngiven(amenityRepository.save(updatedAmenity)).willReturn(null);\n\n// When\nboolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n// Then\nassertFalse(result);\nverify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\nverify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\nverify(amenityRepository).save(updatedAmenity);\n","description":"\nThis example code is short and concise. It provides the necessary objects to test the method, and it provides a clear way of asserting that the method should not update an amenity successfully if saving fails.\n\nThe example code should not include unnecessary details such as what the input and output values should be or how the method should work in general. It is important to provide only the necessary information for the test to run correctly.\n\nThis code does not explain how the method works, it only shows that the method should return false if saving fails. This ensures that the test is focused on a specific behavior and does not include unnecessary details about other things that the method might do.\n\nAlso, this example provides a clear way of testing the `findByAmenityId` and `save` methods in the repository, which makes it easy to check whether these methods are used correctly or not."},"name":"shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails","code":"@Test\n  void shouldNotUpdateCommunityAmenitySuccessfullyIfSavingFails() {\n    // given\n    Amenity testAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    Amenity updatedAmenity = getUpdatedCommunityAmenity();\n    AmenityDto updatedDto = getTestAmenityDto();\n    Community community = TestUtils.CommunityHelpers.getTestCommunity();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(testAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(amenityRepository.save(updatedAmenity))\n        .willReturn(null);\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verify(amenityRepository).save(updatedAmenity);\n  }","location":{"start":246,"insert":246,"offset":" ","indent":2},"item_type":"method","length":25},{"id":"4607cc4d-af75-6eb9-954b-e825be02ebb6","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"tests whether updating an amenity entity will fail if the corresponding community does not exist.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }\n","description":"\nThis method is checking that when amenitySDJpaService.updateAmenity() is called with an AmenityDto where the community ID does not exist in the Community table, false is returned and the appropriate calls are made to the Repository class.  The method sets up a mock of the AmenityRepository and CommunityRepository using the given() method and then verifies that the correct interactions were made on each instance using verify().\n\nThis example uses Junit5's Mockito extension library which provides a more concise way to write unit tests."},"name":"shouldNotUpdateAmenityIfCommunityDoesNotExist","code":"@Test\n  void shouldNotUpdateAmenityIfCommunityDoesNotExist() {\n    // given\n    Amenity communityAmenity =\n        TestUtils.AmenityHelpers.getTestAmenity(TEST_AMENITY_ID, TEST_AMENITY_DESCRIPTION);\n    AmenityDto updatedDto = getTestAmenityDto();\n\n    given(amenityRepository.findByAmenityId(TEST_AMENITY_ID))\n        .willReturn(Optional.of(communityAmenity));\n    given(communityRepository.findByCommunityId(TEST_COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    boolean result = amenitySDJpaService.updateAmenity(updatedDto);\n\n    // then\n    assertFalse(result);\n    verify(amenityRepository).findByAmenityId(TEST_AMENITY_ID);\n    verify(communityRepository).findByCommunityId(TEST_COMMUNITY_ID);\n    verifyNoMoreInteractions(amenityRepository);\n  }","location":{"start":272,"insert":272,"offset":" ","indent":2},"item_type":"method","length":21},{"id":"fde400fb-c3af-e0a8-b745-751312a46189","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"generates a mock `AmenityDto` object with pre-defined values for an entity ID, amenity ID, name, description, price, and community ID.","params":[],"returns":{"type_name":"AmenityDto","description":"a complete `AmenityDto` object representing a test amenity with predefined values.\n\n* `id`: A long value representing the unique identifier for the amenity entity.\n* `amenityId`: An integer value representing the amenity ID.\n* `name`: A string value representing the name of the amenity.\n* `description`: A string value representing the description of the amenity.\n* `price`: A double value representing the price of the amenity.\n* `communityId`: A long value representing the community ID associated with the amenity.","complex_type":true},"usage":{"language":"java","code":"public class AmenitySDJpaService {\n    // ...\n    private AmenityDto getTestAmenityDto() {\n        Long TEST_AMENITY_ENTITY_ID = 1L;\n\n        return new AmenityDto()\n            .id(TEST_AMENITY_ENTITY_ID)\n            .amenityId(TEST_AMENITY_ID)\n            .name(TEST_AMENITY_NAME)\n            .description(TEST_AMENITY_DESCRIPTION)\n            .price(TEST_AMENITY_PRICE)\n            .communityId(TEST_COMMUNITY_ID);\n    }\n    // ...\n}\n","description":"\nIn this example, the getTestAmenityDto method is used to provide a test instance of AmenityDto for testing purposes. The method creates an AmenityDto object and assigns values to its attributes. The TEST_AMENITY_ENTITY_ID constant is defined as 1L, which can be changed as needed. The getTestAmenityDto method can then be used in a test scenario to create a test instance of the AmenityDto class.\n"},"name":"getTestAmenityDto","code":"private AmenityDto getTestAmenityDto() {\n    Long TEST_AMENITY_ENTITY_ID = 1L;\n\n    return new AmenityDto()\n        .id(TEST_AMENITY_ENTITY_ID)\n        .amenityId(TEST_AMENITY_ID)\n        .name(TEST_AMENITY_NAME)\n        .description(TEST_AMENITY_DESCRIPTION)\n        .price(TEST_AMENITY_PRICE)\n        .communityId(TEST_COMMUNITY_ID);\n  }","location":{"start":294,"insert":294,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"6bd8eb85-9010-18b1-c748-1864ce1839eb","ancestors":["b9bd3a3b-5fa0-a680-7f4f-a6a00a819f93"],"type":"function","description":"updates an amenity with the same ID, name, price, and description as a test amenity DTO, and links it to a test community.","params":[],"returns":{"type_name":"Amenity","description":"a new `Amenity` object with updated values from a test `AmenityDto`.\n\n* `withAmenityId`: The amenity ID of the updated community amenity.\n* `withName`: The name of the updated community amenity.\n* `withPrice`: The price of the updated community amenity.\n* `withDescription`: The description of the updated community amenity.\n* `withCommunity`: The community associated with the updated community amenity, which is obtained from the `TestUtils.CommunityHelpers.getTestCommunity()` method.","complex_type":true},"usage":{"language":"java","code":"// given\nAmenity communityAmenity = getUpdatedCommunityAmenity();\n\n// when\ncommunityAmenity.getAmenityId(); // returns 1L\ncommunityAmenity.getName(); // returns \"Test Amenity\"\ncommunityAmenity.getPrice(); // returns $50\ncommunityAmenity.getDescription(); // returns \"This is a test amenity.\"\ncommunityAmenity.getCommunity(); // returns TestUtils.CommunityHelpers.getTestCommunity()\n","description":"\nIn this example, the method getUpdatedCommunityAmenity() is called and its return value is assigned to the variable communityAmenity. The values of the variables are then accessed using their respective methods and returned as expected."},"name":"getUpdatedCommunityAmenity","code":"private Amenity getUpdatedCommunityAmenity() {\n    AmenityDto communityAmenityDto = getTestAmenityDto();\n    return new Amenity()\n        .withAmenityId(communityAmenityDto.getAmenityId())\n        .withName(communityAmenityDto.getName())\n        .withPrice(communityAmenityDto.getPrice())\n        .withDescription(communityAmenityDto.getDescription())\n        .withCommunity(TestUtils.CommunityHelpers.getTestCommunity());\n  }","location":{"start":306,"insert":306,"offset":" ","indent":2},"item_type":"method","length":9}]}}}
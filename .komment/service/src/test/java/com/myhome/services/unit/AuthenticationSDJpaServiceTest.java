{"name":"AuthenticationSDJpaServiceTest.java","path":"service/src/test/java/com/myhome/services/unit/AuthenticationSDJpaServiceTest.java","content":{"structured":{"description":"An `AuthenticationSDJpaService` class that implements Spring Security's `AuthenticationManager` interface. The service uses JPA to interact with a database and generates JWT tokens for authentication. The code tests the service's `login` method, verifying that it correctly handles invalid credentials, user non-existence, and token expiration.","items":[{"id":"9427f98d-355c-4ab9-064d-4148941a1a73","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationSDJpaServiceTest","code":"public class AuthenticationSDJpaServiceTest {\n\n  private final String USER_ID = \"test-user-id\";\n  private final String USERNAME = \"test-user-name\";\n  private final String USER_EMAIL = \"test-user-email\";\n  private final String USER_PASSWORD = \"test-user-password\";\n  private final String REQUEST_PASSWORD = \"test-request-password\";\n  private final Duration TOKEN_LIFETIME = Duration.ofDays(1);\n  private final String SECRET = \"secret\";\n\n  @Mock\n  private final UserSDJpaService userSDJpaService = mock(UserSDJpaService.class);\n  @Mock\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder = mock(AppJwtEncoderDecoder.class);\n  @Mock\n  private final PasswordEncoder passwordEncoder = mock(PasswordEncoder.class);\n  private final AuthenticationSDJpaService authenticationSDJpaService =\n      new AuthenticationSDJpaService(TOKEN_LIFETIME, SECRET, userSDJpaService, appJwtEncoderDecoder,\n          passwordEncoder);\n\n  @Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }\n\n  @Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n\n  @Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n\n  private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(USER_EMAIL).password(REQUEST_PASSWORD);\n  }\n\n  private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n  }\n\n  private AppJwt getDefaultJwtToken(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(TOKEN_LIFETIME);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0},"item_type":"class","length":95},{"id":"bcd81176-f347-ef88-e342-4edbb083732f","ancestors":["9427f98d-355c-4ab9-064d-4148941a1a73"],"type":"function","description":"tests the login functionality of the system by providing a valid email and password and verifying that the user is authenticated and the JWT token is generated correctly.","params":[],"usage":{"language":"java","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = new LoginRequest(\"john.doe@email.com\", \"password\");\n    UserDto userDto = new UserDto(\"user123\", \"John Doe\", \"john.doe@email.com\", \"encryptedPasswordHere\", new HashSet<>());\n    AppJwt appJwt = new AppJwt(userDto.getUserId(), LocalDateTime.now().plus(TOKEN_LIFETIME));\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail())).willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword())).willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET)).willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }\n","description":"\nThe example above creates a LoginRequest object with email and password, and then uses the login method to create an AuthenticationData object with the same userId and JWT token as the UserDto object."},"name":"loginSuccess","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    AppJwt appJwt = getDefaultJwtToken(userDto);\n    String encodedJwt = appJwtEncoderDecoder.encode(appJwt, SECRET);\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(true);\n    given(appJwtEncoderDecoder.encode(appJwt, SECRET))\n        .willReturn(encodedJwt);\n\n    // when\n    AuthenticationData authenticationData = authenticationSDJpaService.login(request);\n\n    // then\n    assertNotNull(authenticationData);\n    assertEquals(authenticationData.getUserId(), userDto.getUserId());\n    assertEquals(authenticationData.getJwtToken(), encodedJwt);\n    verify(userSDJpaService).findUserByEmail(request.getEmail());\n    verify(passwordEncoder).matches(request.getPassword(), userDto.getEncryptedPassword());\n    verify(appJwtEncoderDecoder).encode(appJwt, SECRET);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2},"item_type":"method","length":25},{"id":"a7e4c226-837a-cdaa-b14f-c988df0e25c1","ancestors":["9427f98d-355c-4ab9-064d-4148941a1a73"],"type":"function","description":"tests whether an exception is thrown when a user with the given email address is not found in the database.","params":[],"usage":{"language":"java","code":"@Test\nvoid loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n}\n","description":""},"name":"loginUserNotFound","code":"@Test\n  void loginUserNotFound() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.empty());\n\n    // when and then\n    assertThrows(UserNotFoundException.class,\n        () -> authenticationSDJpaService.login(request));\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"6883d6ae-f08c-1995-1243-a86ed30d855e","ancestors":["9427f98d-355c-4ab9-064d-4148941a1a73"],"type":"function","description":"tests the `CredentialsIncorrectException` thrown when the user's password does not match the encrypted password stored in the database for their email address.","params":[],"usage":{"language":"java","code":"@Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }\n","description":""},"name":"loginCredentialsAreIncorrect","code":"@Test\n  void loginCredentialsAreIncorrect() {\n    // given\n    LoginRequest request = getDefaultLoginRequest();\n    UserDto userDto = getDefaultUserDtoRequest();\n    given(userSDJpaService.findUserByEmail(request.getEmail()))\n        .willReturn(Optional.of(userDto));\n    given(passwordEncoder.matches(request.getPassword(), userDto.getEncryptedPassword()))\n        .willReturn(false);\n\n    // when and then\n    assertThrows(CredentialsIncorrectException.class,\n        () -> authenticationSDJpaService.login(request));\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"697c2a28-4fc8-eb82-f94a-a106b3a6b816","ancestors":["9427f98d-355c-4ab9-064d-4148941a1a73"],"type":"function","description":"creates a default login request with an email address of `USER_EMAIL` and a password of `REQUEST_PASSWORD`.","params":[],"returns":{"type_name":"LoginRequest","description":"a `LoginRequest` object containing the email address and password for a default login.\n\n* `email`: This is an instance of the `Email` class that represents the email address of the default login request.\n* `password`: This is an instance of the `Password` class that represents the password for the default login request.","complex_type":true},"usage":{"language":"java","code":"LoginRequest loginRequest = getDefaultLoginRequest();\n","description":"\nIn this case, the method returns a LoginRequest object with the email and password attributes set to the USER_EMAIL and REQUEST_PASSWORD constants. This can then be used in other parts of the code where a LoginRequest is needed."},"name":"getDefaultLoginRequest","code":"private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(USER_EMAIL).password(REQUEST_PASSWORD);\n  }","location":{"start":100,"insert":100,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"6ab25c75-cc8d-b984-d342-59110bacc78e","ancestors":["9427f98d-355c-4ab9-064d-4148941a1a73"],"type":"function","description":"builds a default instance of the `UserDto` class, setting user ID, name, email, encrypted password, and community IDs to specified values.","params":[],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing default values for user fields.\n\n* `userId`: An integer representing the user's ID.\n* `name`: A string containing the user's name.\n* `email`: An email address associated with the user.\n* `encryptedPassword`: An encrypted password for the user.\n* `communityIds`: A set of integers representing the communities to which the user belongs.","complex_type":true},"usage":{"language":"java","code":"private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n}\n","description":""},"name":"getDefaultUserDtoRequest","code":"private UserDto getDefaultUserDtoRequest() {\n    return UserDto.builder()\n        .userId(USER_ID)\n        .name(USERNAME)\n        .email(USER_EMAIL)\n        .encryptedPassword(USER_PASSWORD)\n        .communityIds(new HashSet<>())\n        .build();\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"3d2b0593-4fc2-05b1-af41-eaa29ba1dfe6","ancestors":["9427f98d-355c-4ab9-064d-4148941a1a73"],"type":"function","description":"creates a new JWT token with a specified expiration time based on the current date and time, and returns it with the user ID and expiration information.","params":[{"name":"userDto","type_name":"UserDto","description":"user details which are used to generate the JWT token.\n\n* `userId`: The user ID of the authenticated user.\n* `TOKEN_LIFETIME`: A constant representing the lifetime of the JWT token in milliseconds.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"a newly-created AppJwt instance with a user ID and an expiration time calculated based on the token lifetime.\n\n* `userId`: The user ID of the user to whom the token is issued.\n* `expiration`: The expiration time of the token in LocalDateTime format, which is calculated by adding `TOKEN_LIFETIME` to the current date and time.","complex_type":true},"usage":{"language":"java","code":"public class App {\n  public static void main(String[] args) {\n    UserDto user = new UserDto(\"John\", \"john@example.com\", \"secret_password\");\n    AppJwt jwt = getDefaultJwtToken(user);\n    System.out.println(jwt.getUserId()); // John\n    System.out.println(jwt.getExpiration().toString()); // Output: 2023-02-15T00:00+0000[UTC]\n  }\n}\n","description":""},"name":"getDefaultJwtToken","code":"private AppJwt getDefaultJwtToken(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(TOKEN_LIFETIME);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2},"item_type":"method","length":7}]}}}
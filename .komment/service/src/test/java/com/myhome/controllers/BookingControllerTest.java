{"name":"BookingControllerTest.java","path":"service/src/test/java/com/myhome/controllers/BookingControllerTest.java","content":{"structured":{"description":"A test class for BookingController, which is responsible for managing bookings in a system. The test class includes two tests: one that verifies the deletion of a booking and another that checks if the booking does not exist. The tests use mocking libraries to inject mock services and verify the calls made to the service. The code also includes a high-level summary of what the test class does.","items":[{"id":"47f17d48-ad3f-bb97-d14a-3080fb93e7ae","ancestors":[],"type":"function","description":"TODO","name":"BookingControllerTest","code":"public class BookingControllerTest {\n\n  private final String TEST_AMENITY_ID = \"test-amenity-id\";\n  private static final String TEST_BOOKING_ID = \"test-booking-id\";\n\n  @Mock\n  private BookingService bookingSDJpaService;\n\n  @InjectMocks\n  private BookingController bookingController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void deleteBooking() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n\n  @Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n}","location":{"start":17,"insert":17,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"f096d2a5-b3af-519f-464f-096d12bfdfda","ancestors":["47f17d48-ad3f-bb97-d14a-3080fb93e7ae"],"type":"function","description":"initializes mock objects using MockitoAnnotations.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n","description":"\nThe example code uses the @BeforeEach annotation and calls the MockitoAnnotations.initMocks() method, which is a static method that initializes all mock objects for the current test class. This allows us to use mock objects in our tests without manually creating them. The init() method is called before each test method is run, allowing us to set up any necessary state or mock behavior for each test case."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":28,"insert":28,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"531d94d2-44bc-6193-d548-106c02057514","ancestors":["47f17d48-ad3f-bb97-d14a-3080fb93e7ae"],"type":"function","description":"tests the deleteBooking method of the BookingController class by providing a test amenity ID and booking ID, then verifying that the method successfully deletes the booking and returns a response with a status code of NO_CONTENT.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBooking() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n","description":"\nThis example uses JUnit to test the deleteBooking method of the BookingController class. It mocks the bookingSDJpaService with the \"given\" annotation and verifies that it is called once when the deleteBooking method is called."},"name":"deleteBooking","code":"@Test\n  void deleteBooking() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }","location":{"start":33,"insert":33,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"133eb203-3ef8-3fbb-8a42-0c58c7cfa1a4","ancestors":["47f17d48-ad3f-bb97-d14a-3080fb93e7ae"],"type":"function","description":"tests whether deleting a booking that does not exist returns a `ResponseEntity` with a `NULL` body and a `HttpStatus.NOT_FOUND`. It also verifies the call to the `deleteBooking` method of the `bookingSDJpaService`.","params":[],"usage":{"language":"java","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }\n","description":""},"name":"deleteBookingNotExists","code":"@Test\n  void deleteBookingNotExists() {\n    // given\n    given(bookingSDJpaService.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> response =\n        bookingController.deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n\n    // then\n    assertNull(response.getBody());\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    verify(bookingSDJpaService).deleteBooking(TEST_AMENITY_ID, TEST_BOOKING_ID);\n  }","location":{"start":49,"insert":49,"offset":" ","indent":2},"item_type":"method","length":15}]}}}
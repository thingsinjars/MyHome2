{"name":"AuthenticationControllerTest.java","path":"service/src/test/java/com/myhome/controllers/AuthenticationControllerTest.java","content":{"structured":{"description":"An `AuthenticationController` class that tests a login function using JUnit and Mockito. The test case sets up default values for LoginRequest and AuthenticationData classes and creates mock objects for the AuthenticationService interface. In the \"when\" clause, the login method is called with the default login request, and then the response is checked for an OK status code and two headers containing the user ID and JWT token. Finally, the `verify` method is used to ensure that the `login` method was called with the correct arguments.","items":[{"id":"96ef3d34-59e3-3591-6840-91586bbe48a2","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationControllerTest","code":"public class AuthenticationControllerTest {\n\n  private static final String TEST_ID = \"1\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n  private static final String TOKEN = \"token\";\n\n  @Mock\n  private AuthenticationService authenticationService;\n  @InjectMocks\n  private AuthenticationController authenticationController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }\n\n  private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(TEST_EMAIL).password(TEST_PASSWORD);\n  }\n\n  private AuthenticationData getDefaultAuthenticationData() {\n    return new AuthenticationData(TOKEN, TEST_ID);\n  }\n}","location":{"start":19,"insert":19,"offset":" ","indent":0},"item_type":"class","length":46},{"id":"a3cacf55-598d-faae-4247-7548c22d3940","ancestors":["96ef3d34-59e3-3591-6840-91586bbe48a2"],"type":"function","description":"initializes Mockito annotations for the class, enabling mocking of dependencies and behaviors.","params":[],"usage":{"language":"java","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n}\n","description":"\nThis code uses the `@BeforeEach` annotation to indicate that it should run before each unit test in a class. The `initMocks` method is then called on the current instance, which in this case is an instance of the class being tested. This method is responsible for initializing any mock objects used by the tests and setting up any necessary state for the tests to run correctly.\n\nIt's important to note that the `@BeforeEach` annotation is only available in JUnit 5 and above, so if you are using a lower version of JUnit you will need to use a different annotation or approach."},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":31,"insert":31,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"0bf21843-9eac-dd99-804d-cad4e7675272","ancestors":["96ef3d34-59e3-3591-6840-91586bbe48a2"],"type":"function","description":"tests the login functionality of the `AuthenticationController`. It provides a default `LoginRequest` and `AuthenticationData`, mocks the `authenticationService` to return the `AuthenticationData`, and verifies the response status code, headers, and method call.","params":[],"usage":{"language":"java","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }\n","description":""},"name":"loginSuccess","code":"@Test\n  void loginSuccess() {\n    // given\n    LoginRequest loginRequest = getDefaultLoginRequest();\n    AuthenticationData authenticationData = getDefaultAuthenticationData();\n    HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    given(authenticationService.login(loginRequest))\n        .willReturn(authenticationData);\n\n    // when\n    ResponseEntity<Void> response = authenticationController.login(loginRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(response.getHeaders().size(), 2);\n    assertEquals(response.getHeaders(), httpHeaders);\n    verify(authenticationService).login(loginRequest);\n  }","location":{"start":36,"insert":36,"offset":" ","indent":2},"item_type":"method","length":20},{"id":"ab3d0f53-d399-47b1-c647-7741d35c57e3","ancestors":["96ef3d34-59e3-3591-6840-91586bbe48a2"],"type":"function","description":"generates a default login request with predefined email and password for testing purposes.","params":[],"returns":{"type_name":"LoginRequest","description":"a `LoginRequest` object containing the email address \"TEST_EMAIL\" and the password \"TEST_PASSWORD\".\n\n* The `email` field is set to `TEST_EMAIL`, representing an email address for authentication.\n* The `password` field is set to `TEST_PASSWORD`, indicating a password for authentication.\n\nOverall, the function returns a new `LoginRequest` object with predefined values for the email and password fields.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        LoginRequest loginRequest = new LoginRequest().email(\"user@example.com\").password(\"123456\");\n        System.out.println(loginRequest);\n    }\n}\n","description":""},"name":"getDefaultLoginRequest","code":"private LoginRequest getDefaultLoginRequest() {\n    return new LoginRequest().email(TEST_EMAIL).password(TEST_PASSWORD);\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"9346cb8b-01e7-79b8-c943-7d522c78ba01","ancestors":["96ef3d34-59e3-3591-6840-91586bbe48a2"],"type":"function","description":"creates a new `AuthenticationData` object with the default token and test ID.","params":[],"returns":{"type_name":"AuthenticationData","description":"an `AuthenticationData` object containing the token \"TOKEN\" and the test ID \"TEST_ID\".\n\n* `TOKEN`: A string value representing an authentication token.\n* `TEST_ID`: An integer value signifying a test ID for the authentication data.","complex_type":true},"usage":{"language":"java","code":"public class Login {\n  private AuthenticationController authenticationController;\n  public void doLogin() {\n    // Create a login request with email and password\n    LoginRequest loginRequest = new LoginRequest().email(\"email@mail.com\").password(\"password\");\n    \n    // Get the authentication data from the controller\n    AuthenticationData authData = authenticationController.getDefaultAuthenticationData();\n    \n    // Use the authentication data to log in\n    ResponseEntity<Void> response = authenticationController.login(loginRequest, authData);\n  }\n}\n","description":""},"name":"getDefaultAuthenticationData","code":"private AuthenticationData getDefaultAuthenticationData() {\n    return new AuthenticationData(TOKEN, TEST_ID);\n  }","location":{"start":61,"insert":61,"offset":" ","indent":2},"item_type":"method","length":3}]}}}
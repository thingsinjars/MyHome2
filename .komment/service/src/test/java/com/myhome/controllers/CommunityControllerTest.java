{"name":"CommunityControllerTest.java","path":"service/src/test/java/com/myhome/controllers/CommunityControllerTest.java","content":{"structured":{"description":"","items":[{"id":"7ba7af54-0e2b-4257-8aab-34fc38f99d28","ancestors":[],"type":"function","name":"init","location":{"offset":" ","indent":2,"insert":82,"start":82},"returns":false,"params":[],"code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","skip":false,"length":4,"comment":{"description":"initializes mock objects using MockitoAnnotations, making it easier to use mock objects during testing.","params":[],"returns":null}},{"id":"d5d44dab-969f-4f90-afdd-86cdb629682d","ancestors":[],"type":"function","name":"createTestCommunityDto","location":{"offset":" ","indent":2,"insert":87,"start":87},"returns":"CommunityDto","params":[],"code":"private CommunityDto createTestCommunityDto() {\n    Set<UserDto> communityAdminDtos = new HashSet<>();\n    UserDto userDto = UserDto.builder()\n        .userId(COMMUNITY_ADMIN_ID)\n        .name(COMMUNITY_ADMIN_NAME)\n        .email(COMMUNITY_ADMIN_NAME)\n        .password(COMMUNITY_ADMIN_PASSWORD)\n        .communityIds(new HashSet<>(singletonList(COMMUNITY_ID)))\n        .build();\n\n    communityAdminDtos.add(userDto);\n    CommunityDto communityDto = new CommunityDto();\n    communityDto.setCommunityId(COMMUNITY_ID);\n    communityDto.setName(COMMUNITY_NAME);\n    communityDto.setDistrict(COMMUNITY_DISTRICT);\n    communityDto.setAdmins(communityAdminDtos);\n\n    return communityDto;\n  }","skip":false,"length":19,"comment":{"description":"generates a test instance of the `CommunityDto` class, setting the `communityId`, `name`, `district`, and `admins` fields with appropriate values.","params":[],"returns":{"type":"CommunityDto","description":"a `CommunityDto` object containing the specified community details and administrators."}}},{"id":"d89012d8-1061-435b-8fe2-f154a620eaef","ancestors":[],"type":"function","name":"createTestCommunityHouse","location":{"offset":" ","indent":2,"insert":107,"start":107},"returns":"CommunityHouse","params":[{"name":"community","type":"Community"}],"code":"private CommunityHouse createTestCommunityHouse(Community community) {\n    return new CommunityHouse(community, COMMUNITY_HOUSE_NAME, COMMUNITY_HOUSE_ID, new HashSet<>(),\n        new HashSet<>());\n  }","skip":false,"length":4,"comment":{"description":"creates a new instance of the `CommunityHouse` class with provided community, name, ID, and initial members and groups sets.","params":[{"name":"community","type":"Community","description":"Community object that the `createTestCommunityHouse()` method creates a new instance of the `CommunityHouse` class for."}],"returns":{"type":"CommunityHouse","description":"a new `CommunityHouse` instance representing a test community house with a unique name and ID."}}},{"id":"bace5ac5-0c74-4faf-b9a8-0084c7b2cf2a","ancestors":[],"type":"function","name":"createTestCommunity","location":{"offset":" ","indent":2,"insert":112,"start":112},"returns":"Community","params":[],"code":"private Community createTestCommunity() {\n    Community community =\n        new Community(new HashSet<>(), new HashSet<>(), COMMUNITY_NAME, COMMUNITY_ID,\n            COMMUNITY_DISTRICT, new HashSet<>());\n    User admin = new User(COMMUNITY_ADMIN_NAME, COMMUNITY_ADMIN_ID, COMMUNITY_ADMIN_EMAIL, true,\n        COMMUNITY_ADMIN_PASSWORD, new HashSet<>(), null);\n    community.getAdmins().add(admin);\n    community.getHouses().add(createTestCommunityHouse(community));\n    admin.getCommunities().add(community);\n\n    return community;\n  }","skip":false,"length":12,"comment":{"description":"creates a new community with a default set of admins, houses and other fields populated with test data.","params":[],"returns":{"type":"Community","description":"a `Community` object representing a test community with a name, ID, district, and an admin user."}}},{"id":"5a3e885b-71a5-44ee-807b-0bf536ad2ea5","ancestors":[],"type":"function","name":"shouldCreateCommunitySuccessfully","location":{"offset":" ","indent":2,"insert":125,"start":125},"returns":false,"params":[],"code":"@Test\n  void shouldCreateCommunitySuccessfully() {\n    // given\n    CreateCommunityRequest request =\n        new CreateCommunityRequest()\n            .name(COMMUNITY_NAME)\n            .district(COMMUNITY_DISTRICT);\n    CommunityDto communityDto = createTestCommunityDto();\n    CreateCommunityResponse response =\n        new CreateCommunityResponse()\n            .communityId(COMMUNITY_ID);\n    Community community = createTestCommunity();\n\n    given(communityApiMapper.createCommunityRequestToCommunityDto(request))\n        .willReturn(communityDto);\n    given(communityService.createCommunity(communityDto))\n        .willReturn(community);\n    given(communityApiMapper.communityToCreateCommunityResponse(community))\n        .willReturn(response);\n\n    // when\n    ResponseEntity<CreateCommunityResponse> responseEntity =\n        communityController.createCommunity(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityApiMapper).createCommunityRequestToCommunityDto(request);\n    verify(communityApiMapper).communityToCreateCommunityResponse(community);\n    verify(communityService).createCommunity(communityDto);\n  }","skip":false,"length":31,"comment":{"description":"verifies that the community creation request is successfully processed by the service, resulting in a `HttpStatus.CREATED` response and a matching `CreateCommunityResponse`.","params":[],"returns":null}},{"id":"878b4dc6-417f-4ab9-8c1c-124a6c20d191","ancestors":[],"type":"function","name":"shouldListAllCommunitiesSuccessfully","location":{"offset":" ","indent":2,"insert":157,"start":157},"returns":false,"params":[],"code":"@Test\n  void shouldListAllCommunitiesSuccessfully() {\n    // given\n    Set<Community> communities = new HashSet<>();\n    Community community = createTestCommunity();\n    communities.add(community);\n\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse\n        = new HashSet<>();\n    communityDetailsResponse.add(\n        new GetCommunityDetailsResponseCommunity()\n            .communityId(COMMUNITY_ID)\n            .name(COMMUNITY_NAME)\n            .district(COMMUNITY_DISTRICT)\n    );\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    Pageable pageable = PageRequest.of(0, 1);\n    given(communityService.listAll(pageable))\n        .willReturn(communities);\n    given(communityApiMapper.communitySetToRestApiResponseCommunitySet(communities))\n        .willReturn(communityDetailsResponse);\n\n    // when\n    ResponseEntity<GetCommunityDetailsResponse> responseEntity =\n        communityController.listAllCommunity(pageable);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityApiMapper).communitySetToRestApiResponseCommunitySet(communities);\n    verify(communityService).listAll(pageable);\n  }","skip":false,"length":35,"comment":{"description":"tests the `listAllCommunity()` method of a community controller. It verifies that the method returns a list of communities in the expected format and status code.","params":[],"returns":null}},{"id":"9e5d4ffb-6993-4746-88f8-8616e29d641f","ancestors":[],"type":"function","name":"shouldGetCommunityDetailsSuccessfully","location":{"offset":" ","indent":2,"insert":193,"start":193},"returns":false,"params":[],"code":"@Test\n  void shouldGetCommunityDetailsSuccessfully() {\n    // given\n    Optional<Community> communityOptional = Optional.of(createTestCommunity());\n    Community community = communityOptional.get();\n    GetCommunityDetailsResponseCommunity communityDetails =\n        new GetCommunityDetailsResponseCommunity()\n            .communityId(COMMUNITY_ID)\n            .name(COMMUNITY_NAME)\n            .district(COMMUNITY_DISTRICT);\n\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse\n        = new HashSet<>();\n    communityDetailsResponse.add(communityDetails);\n\n    GetCommunityDetailsResponse response =\n        new GetCommunityDetailsResponse().communities(communityDetailsResponse);\n\n    given(communityService.getCommunityDetailsById(COMMUNITY_ID))\n        .willReturn(communityOptional);\n    given(communityApiMapper.communityToRestApiResponseCommunity(community))\n        .willReturn(communityDetails);\n\n    // when\n    ResponseEntity<GetCommunityDetailsResponse> responseEntity =\n        communityController.listCommunityDetails(COMMUNITY_ID);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityService).getCommunityDetailsById(COMMUNITY_ID);\n    verify(communityApiMapper).communityToRestApiResponseCommunity(community);\n  }","skip":false,"length":33,"comment":{"description":"tests whether the `listCommunityDetails` endpoint returns the correct community details when the ID is provided. It uses mocks to verify the calls to the service and API mapper.","params":[],"returns":null}},{"id":"42ca3bbe-3087-4746-957c-5b8a22affe1c","ancestors":[],"type":"function","name":"shouldGetNotFoundListCommunityDetailsSuccess","location":{"offset":" ","indent":2,"insert":227,"start":227},"returns":false,"params":[],"code":"@Test\n  void shouldGetNotFoundListCommunityDetailsSuccess() {\n    // given\n    given(communityService.getCommunityDetailsById(COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetCommunityDetailsResponse> responseEntity =\n        communityController.listCommunityDetails(COMMUNITY_ID);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(communityService).getCommunityDetailsById(COMMUNITY_ID);\n    verifyNoInteractions(communityApiMapper);\n  }","skip":false,"length":16,"comment":{"description":"tests that listing community details with a non-existent ID returns a `HttpStatus.NOT_FOUND` response and an empty body, while verifying the calls to the community service and community API mapper.","params":[],"returns":null}},{"id":"744e6a19-6a3d-41ad-9eee-7870688272dd","ancestors":[],"type":"function","name":"shouldListCommunityAdminsSuccess","location":{"offset":" ","indent":2,"insert":244,"start":244},"returns":false,"params":[],"code":"@Test\n  void shouldListCommunityAdminsSuccess() {\n    // given\n    Community community = createTestCommunity();\n    List<User> admins = new ArrayList<>(community.getAdmins());\n    Optional<List<User>> communityAdminsOptional = Optional.of(admins);\n\n    Pageable pageable = PageRequest.of(0, 1);\n\n    given(communityService.findCommunityAdminsById(COMMUNITY_ID, pageable))\n        .willReturn(communityAdminsOptional);\n\n    Set<User> adminsSet = new HashSet<>(admins);\n\n    Set<ListCommunityAdminsResponseCommunityAdmin> listAdminsResponses = new HashSet<>();\n    listAdminsResponses.add(\n        new ListCommunityAdminsResponseCommunityAdmin()\n            .adminId(COMMUNITY_ADMIN_ID)\n    );\n\n    given(communityApiMapper.communityAdminSetToRestApiResponseCommunityAdminSet(adminsSet))\n        .willReturn(listAdminsResponses);\n\n    ListCommunityAdminsResponse response =\n        new ListCommunityAdminsResponse().admins(listAdminsResponses);\n\n    // when\n    ResponseEntity<ListCommunityAdminsResponse> responseEntity =\n        communityController.listCommunityAdmins(COMMUNITY_ID, pageable);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityApiMapper).communityAdminSetToRestApiResponseCommunityAdminSet(adminsSet);\n    verify(communityService).findCommunityAdminsById(COMMUNITY_ID, pageable);\n  }","skip":false,"length":36,"comment":{"description":"tests the `listCommunityAdmins` endpoint by providing a community ID and a pageable request object, then verifying that the response status code is `OK` and the response contains the expected community admins in the format expected by the API.","params":[],"returns":null}},{"id":"1acd806d-6b48-43d3-a4a7-b84c456d66e9","ancestors":[],"type":"function","name":"shouldReturnNoAdminDetailsNotFoundSuccess","location":{"offset":" ","indent":2,"insert":281,"start":281},"returns":false,"params":[],"code":"@Test\n  void shouldReturnNoAdminDetailsNotFoundSuccess() {\n    // given\n    Pageable pageable = PageRequest.of(0, 1);\n\n    given(communityService.findCommunityAdminsById(COMMUNITY_ID, pageable))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListCommunityAdminsResponse> responseEntity =\n        communityController.listCommunityAdmins(COMMUNITY_ID, pageable);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(communityService).findCommunityAdminsById(COMMUNITY_ID, pageable);\n    verifyNoInteractions(communityApiMapper);\n  }","skip":false,"length":18,"comment":{"description":"tests that when no community admins are found for a given community ID and page number, the API returns a `HttpStatus.NOT_FOUND` status code and an empty list of admins.","params":[],"returns":null}},{"id":"78f6f26d-3f4f-4814-bcf1-de3035724324","ancestors":[],"type":"function","name":"shouldAddCommunityAdminSuccess","location":{"offset":" ","indent":2,"insert":300,"start":300},"returns":false,"params":[],"code":"@Test\n  void shouldAddCommunityAdminSuccess() {\n    // given\n    AddCommunityAdminRequest addRequest = new AddCommunityAdminRequest();\n    Community community = createTestCommunity();\n    Set<User> communityAdmins = community.getAdmins();\n    for (User admin : communityAdmins) {\n      addRequest.getAdmins().add(admin.getUserId());\n    }\n\n    Set<String> adminIds = addRequest.getAdmins();\n    AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminIds);\n\n    given(communityService.addAdminsToCommunity(COMMUNITY_ID, adminIds))\n        .willReturn(Optional.of(community));\n\n    // when\n    ResponseEntity<AddCommunityAdminResponse> responseEntity =\n        communityController.addCommunityAdmins(COMMUNITY_ID, addRequest);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityService).addAdminsToCommunity(COMMUNITY_ID, adminIds);\n  }","skip":false,"length":25,"comment":{"description":"tests the ability to successfully add community admins to a community using the `communityController`. It provides an AddCommunityAdminRequest, creates a test community, adds admins to the request, and then verifies that the response is successful and the admins are added to the community.","params":[],"returns":null}},{"id":"f26beec9-9ccc-4442-b6d7-8a0970a1793d","ancestors":[],"type":"function","name":"shouldNotAddAdminToCommunityNotFoundSuccessfully","location":{"offset":" ","indent":2,"insert":326,"start":326},"returns":false,"params":[],"code":"@Test\n  void shouldNotAddAdminToCommunityNotFoundSuccessfully() {\n    // given\n    AddCommunityAdminRequest addRequest = new AddCommunityAdminRequest();\n    Community community = createTestCommunity();\n    Set<User> communityAdmins = community.getAdmins();\n    for (User admin : communityAdmins) {\n      addRequest.getAdmins().add(admin.getUserId());\n    }\n\n    Set<String> adminIds = addRequest.getAdmins();\n\n    given(communityService.addAdminsToCommunity(COMMUNITY_ID, adminIds))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<AddCommunityAdminResponse> responseEntity =\n        communityController.addCommunityAdmins(COMMUNITY_ID, addRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(communityService).addAdminsToCommunity(COMMUNITY_ID, adminIds);\n  }","skip":false,"length":24,"comment":{"description":"tests whether an attempt to add admins to a community that does not exist returns a `HttpStatus.NOT_FOUND` response and no admin details in the body of the response.","params":[],"returns":null}},{"id":"6dd4ebcf-5190-44b7-8f1b-af2979fa9cba","ancestors":[],"type":"function","name":"shouldListCommunityHousesSuccess","location":{"offset":" ","indent":2,"insert":351,"start":351},"returns":false,"params":[],"code":"@Test\n  void shouldListCommunityHousesSuccess() {\n    Community community = createTestCommunity();\n    List<CommunityHouse> houses = new ArrayList<>(community.getHouses());\n    Set<CommunityHouse> housesSet = new HashSet<>(houses);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsSet = new HashSet<>();\n    getHouseDetailsSet.add(new GetHouseDetailsResponseCommunityHouse()\n        .houseId(COMMUNITY_HOUSE_ID)\n        .name(COMMUNITY_NAME)\n    );\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse().houses(getHouseDetailsSet);\n    Pageable pageable = PageRequest.of(0, 1);\n\n    given(communityService.findCommunityHousesById(COMMUNITY_ID, pageable))\n        .willReturn(Optional.of(houses));\n    given(communityApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(housesSet))\n        .willReturn(getHouseDetailsSet);\n\n    // when\n    ResponseEntity<GetHouseDetailsResponse> responseEntity =\n        communityController.listCommunityHouses(COMMUNITY_ID, pageable);\n\n    //then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityService).findCommunityHousesById(COMMUNITY_ID, pageable);\n    verify(communityApiMapper).communityHouseSetToRestApiResponseCommunityHouseSet(housesSet);\n  }","skip":false,"length":29,"comment":{"description":"tests the listCommunityHouses endpoint by providing a community ID and page number to retrieve a list of community houses. It verifies that the response status code is OK, the response body contains the expected list of houses, and that the findCommunityHousesById and communityApiMapper methods are called with the correct parameters.","params":[],"returns":null}},{"id":"58e54426-8c9a-4db8-bcae-bf46499d5f53","ancestors":[],"type":"function","name":"testListCommunityHousesCommunityNotExistSuccess","location":{"offset":" ","indent":2,"insert":381,"start":381},"returns":false,"params":[],"code":"@Test\n  void testListCommunityHousesCommunityNotExistSuccess() {\n    // given\n    Pageable pageable = PageRequest.of(0, 1);\n    given(communityService.findCommunityHousesById(COMMUNITY_ID, pageable))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetHouseDetailsResponse> responseEntity =\n        communityController.listCommunityHouses(COMMUNITY_ID, pageable);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(communityService).findCommunityHousesById(COMMUNITY_ID, pageable);\n    verifyNoInteractions(communityApiMapper);\n  }","skip":false,"length":17,"comment":{"description":"verifies that when a community with the given ID does not exist, the `listCommunityHouses` endpoint returns a `HttpStatus.NOT_FOUND` status code and an empty response body.","params":[],"returns":null}},{"id":"159f7aab-f3b1-4d99-b080-b2fb9e566661","ancestors":[],"type":"function","name":"shouldAddCommunityHouseSuccessfully","location":{"offset":" ","indent":2,"insert":399,"start":399},"returns":false,"params":[],"code":"@Test\n  void shouldAddCommunityHouseSuccessfully() {\n    // given\n    AddCommunityHouseRequest addCommunityHouseRequest = new AddCommunityHouseRequest();\n    Community community = createTestCommunity();\n    Set<CommunityHouse> communityHouses = community.getHouses();\n    Set<CommunityHouseName> communityHouseNames = new HashSet<>();\n    communityHouseNames.add(new CommunityHouseName().name(COMMUNITY_HOUSE_NAME));\n\n    Set<String> houseIds = new HashSet<>();\n    for (CommunityHouse house : communityHouses) {\n      houseIds.add(house.getHouseId());\n    }\n\n    addCommunityHouseRequest.getHouses().addAll(communityHouseNames);\n\n    AddCommunityHouseResponse response = new AddCommunityHouseResponse().houses(houseIds);\n\n    given(communityApiMapper.communityHouseNamesSetToCommunityHouseSet(communityHouseNames))\n        .willReturn(communityHouses);\n    given(communityService.addHousesToCommunity(COMMUNITY_ID, communityHouses))\n        .willReturn(houseIds);\n\n    // when\n    ResponseEntity<AddCommunityHouseResponse> responseEntity =\n        communityController.addCommunityHouses(COMMUNITY_ID, addCommunityHouseRequest);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(response, responseEntity.getBody());\n    verify(communityApiMapper).communityHouseNamesSetToCommunityHouseSet(communityHouseNames);\n    verify(communityService).addHousesToCommunity(COMMUNITY_ID, communityHouses);\n  }","skip":false,"length":33,"comment":{"description":"verifies that the `AddCommunityHouse` endpoint adds houses to a community successfully. It uses mock objects and assertions to check the response status code, body content, and calls to the `communityApiMapper` and `communityService` classes.","params":[],"returns":null}},{"id":"6ec35a19-f9f6-47e6-9727-dccdbcfae2da","ancestors":[],"type":"function","name":"shouldThrowBadRequestWithEmptyAddHouseRequest","location":{"offset":" ","indent":2,"insert":433,"start":433},"returns":false,"params":[],"code":"@Test\n  void shouldThrowBadRequestWithEmptyAddHouseRequest() {\n    // given\n    AddCommunityHouseRequest emptyRequest = new AddCommunityHouseRequest();\n\n    given(communityApiMapper.communityHouseNamesSetToCommunityHouseSet(emptyRequest.getHouses()))\n        .willReturn(new HashSet<>());\n    given(communityService.addHousesToCommunity(COMMUNITY_ID, new HashSet<>()))\n        .willReturn(new HashSet<>());\n\n    // when\n    ResponseEntity<AddCommunityHouseResponse> responseEntity =\n        communityController.addCommunityHouses(COMMUNITY_ID, emptyRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode());\n    assertNull(responseEntity.getBody());\n    verify(communityApiMapper).communityHouseNamesSetToCommunityHouseSet(new HashSet<>());\n    verify(communityService).addHousesToCommunity(COMMUNITY_ID, new HashSet<>());\n  }","skip":false,"length":20,"comment":{"description":"verifies that if an empty `AddCommunityHouseRequest` is passed to the `addCommunityHouses` method, it should return a `ResponseEntity` with a `HttpStatus.BAD_REQUEST` status code and no body.","params":[],"returns":null}},{"id":"9ed54835-216d-4f11-ae9f-bcac576323dd","ancestors":[],"type":"function","name":"shouldRemoveCommunityHouseSuccessfully","location":{"offset":" ","indent":2,"insert":454,"start":454},"returns":false,"params":[],"code":"@Test\n  void shouldRemoveCommunityHouseSuccessfully() {\n    // given\n    Community community = createTestCommunity();\n\n    given(communityService.getCommunityDetailsById(COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(communityService.removeHouseFromCommunityByHouseId(createTestCommunity(),\n        COMMUNITY_HOUSE_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.removeCommunityHouse(COMMUNITY_ID, COMMUNITY_HOUSE_ID);\n\n    // then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(communityService).removeHouseFromCommunityByHouseId(community, COMMUNITY_HOUSE_ID);\n    verify(communityService).getCommunityDetailsById(COMMUNITY_ID);\n  }","skip":false,"length":20,"comment":{"description":"verifies that the `removeCommunityHouse` endpoint removes a house from a community successfully by asserting the status code of the response entity and verifying the calls to the `communityService`.","params":[],"returns":null}},{"id":"7bf4418e-62a9-4d88-885e-2b5807629802","ancestors":[],"type":"function","name":"shouldNotRemoveCommunityHouseIfNotFoundSuccessfully","location":{"offset":" ","indent":2,"insert":475,"start":475},"returns":false,"params":[],"code":"@Test\n  void shouldNotRemoveCommunityHouseIfNotFoundSuccessfully() {\n    // given\n    Community community = createTestCommunity();\n\n    given(communityService.getCommunityDetailsById(COMMUNITY_ID))\n        .willReturn(Optional.of(community));\n    given(communityService.removeHouseFromCommunityByHouseId(community, COMMUNITY_HOUSE_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.removeCommunityHouse(COMMUNITY_ID, COMMUNITY_HOUSE_ID);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(communityService).removeHouseFromCommunityByHouseId(community, COMMUNITY_HOUSE_ID);\n  }","skip":false,"length":18,"comment":{"description":"tests whether removing a community house with a non-existent ID returns a `HttpStatus.NOT_FOUND` response and verifies that the corresponding method call to remove the house from the community is not made.","params":[],"returns":null}},{"id":"76ce4fba-573b-4fdd-aa88-e78a6c039615","ancestors":[],"type":"function","name":"shouldNotRemoveCommunityHouseIfCommunityNotFound","location":{"offset":" ","indent":2,"insert":494,"start":494},"returns":false,"params":[],"code":"@Test\n  void shouldNotRemoveCommunityHouseIfCommunityNotFound() {\n    //given\n    Community community = createTestCommunity();\n\n    given(communityService.getCommunityDetailsById(COMMUNITY_ID))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.removeCommunityHouse(COMMUNITY_ID, COMMUNITY_HOUSE_ID);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(communityService).getCommunityDetailsById(COMMUNITY_ID);\n    verify(communityService, never()).removeHouseFromCommunityByHouseId(community,\n        COMMUNITY_HOUSE_ID);\n  }","skip":false,"length":18,"comment":{"description":"verifies that removing a community house by its ID fails when the community associated with it cannot be found.","params":[],"returns":null}},{"id":"1996ced1-0b99-4b9a-932a-eaf024b3ea36","ancestors":[],"type":"function","name":"shouldRemoveAdminFromCommunitySuccessfully","location":{"offset":" ","indent":2,"insert":513,"start":513},"returns":false,"params":[],"code":"@Test\n  void shouldRemoveAdminFromCommunitySuccessfully() {\n    // given\n    given(communityService.removeAdminFromCommunity(COMMUNITY_ID, COMMUNITY_ADMIN_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.removeAdminFromCommunity(COMMUNITY_ID, COMMUNITY_ADMIN_ID);\n\n    // then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(communityService).removeAdminFromCommunity(COMMUNITY_ID, COMMUNITY_ADMIN_ID);\n  }","skip":false,"length":14,"comment":{"description":"verifies that removing an admin from a community returns a `HttpStatus.NO_CONTENT` response and invokes the `removeAdminFromCommunity` method of the `communityService`.","params":[],"returns":null}},{"id":"b744d65b-9dc4-4e12-9a55-acd9e21f9c68","ancestors":[],"type":"function","name":"shouldNotRemoveAdminIfNotFoundSuccessfully","location":{"offset":" ","indent":2,"insert":528,"start":528},"returns":false,"params":[],"code":"@Test\n  void shouldNotRemoveAdminIfNotFoundSuccessfully() {\n    // given\n    given(communityService.removeAdminFromCommunity(COMMUNITY_ID, COMMUNITY_ADMIN_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.removeAdminFromCommunity(COMMUNITY_ID, COMMUNITY_ADMIN_ID);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(communityService).removeAdminFromCommunity(COMMUNITY_ID, COMMUNITY_ADMIN_ID);\n  }","skip":false,"length":14,"comment":{"description":"tests that the `removeAdminFromCommunity` method returns a `HttpStatus.NOT_FOUND` response when the admin to be removed is not found in the community.","params":[],"returns":null}},{"id":"85f9f291-f9cd-44cc-acc7-bf3cd1a95586","ancestors":[],"type":"function","name":"shouldDeleteCommunitySuccessfully","location":{"offset":" ","indent":2,"insert":543,"start":543},"returns":false,"params":[],"code":"@Test\n  void shouldDeleteCommunitySuccessfully() {\n    // given\n    given(communityService.deleteCommunity(COMMUNITY_ID))\n        .willReturn(true);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.deleteCommunity(COMMUNITY_ID);\n\n    // then\n    assertEquals(HttpStatus.NO_CONTENT, responseEntity.getStatusCode());\n    verify(communityService).deleteCommunity(COMMUNITY_ID);\n  }","skip":false,"length":14,"comment":{"description":"tests whether deleting a community returns a NO_CONTENT status code and verifies that the community service was called with the correct ID.","params":[],"returns":null}},{"id":"750c9d65-dbb7-4069-91a4-b2846533eedf","ancestors":[],"type":"function","name":"shouldNotDeleteCommunityNotFoundSuccessfully","location":{"offset":" ","indent":2,"insert":558,"start":558},"returns":false,"params":[],"code":"@Test\n  void shouldNotDeleteCommunityNotFoundSuccessfully() {\n    // given\n    given(communityService.deleteCommunity(COMMUNITY_ID))\n        .willReturn(false);\n\n    // when\n    ResponseEntity<Void> responseEntity =\n        communityController.deleteCommunity(COMMUNITY_ID);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, responseEntity.getStatusCode());\n    verify(communityService).deleteCommunity(COMMUNITY_ID);\n  }","skip":false,"length":14,"comment":{"description":"verifies that deleting a community with a non-existent ID results in a `NOT_FOUND` status code and triggers the expected method calls on the `communityService`.","params":[],"returns":null}},{"id":"c0259ebe-3888-4518-9abf-44a5bf06778d","ancestors":[],"type":"function","name":"getMockCommunityHouse","location":{"offset":" ","indent":2,"insert":573,"start":573},"returns":"CommunityHouse","params":[],"code":"private CommunityHouse getMockCommunityHouse() {\n    CommunityHouse communityHouse = new CommunityHouse();\n    communityHouse.setName(COMMUNITY_HOUSE_NAME);\n    communityHouse.setHouseId(COMMUNITY_HOUSE_ID);\n    communityHouse.setHouseMembers(new HashSet<>());\n\n    return communityHouse;\n  }","skip":false,"length":8,"comment":{"description":"creates a mock instance of `CommunityHouse`, setting its name, ID, and member list to empty sets. It returns the mock instance.","params":[],"returns":{"type":"CommunityHouse","description":"a mock instance of the `CommunityHouse` class."}}},{"id":"ed65b219-9e95-49a2-9a64-674498a92b96","ancestors":[],"type":"function","name":"getMockCommunity","location":{"offset":" ","indent":2,"insert":582,"start":582},"returns":"Community","params":[{"name":"admins","type":"Set<User>"}],"code":"private Community getMockCommunity(Set<User> admins) {\n    Community community =\n        new Community(admins, new HashSet<>(), COMMUNITY_NAME, COMMUNITY_ID,\n            COMMUNITY_DISTRICT, new HashSet<>());\n    User admin = new User(COMMUNITY_ADMIN_NAME, COMMUNITY_ADMIN_ID, COMMUNITY_ADMIN_EMAIL, true,\n        COMMUNITY_ADMIN_PASSWORD, new HashSet<>(), new HashSet<>());\n    community.getAdmins().add(admin);\n    admin.getCommunities().add(community);\n\n    CommunityHouse communityHouse = getMockCommunityHouse();\n    communityHouse.setCommunity(community);\n    community.getHouses().add(communityHouse);\n\n    return community;\n  }","skip":false,"length":15,"comment":{"description":"creates a new instance of the `Community` class, setting its admins, districts, and email addresses. It then adds the admin user to the community and sets the community house. The function returns the created community instance.","params":[{"name":"admins","type":"Set<User>","description":"set of users who will be administrators for the generated mock community."}],"returns":{"type":"Community","description":"a mock Community object representing a community with admins, houses, and other attributes."}}}]}}}
{"name":"UserControllerTest.java","path":"service/src/test/java/com/myhome/controllers/UserControllerTest.java","content":{"structured":{"description":"Tests for the `UserController` class, which handles user-related operations in a web application. The tests cover various scenarios, such as retrieving a user's details, resetting their password, and listing all housemates for a given user ID. The code verifies that the `UserController` behaves correctly and returns appropriate responses in each test case.","items":[{"id":"120b3e2e-d597-baad-904c-8d57e889b961","ancestors":[],"type":"function","description":"TODO","name":"UserControllerTest","code":"class UserControllerTest {\n\n  private static final String TEST_ID = \"1\";\n  private static final String TEST_NAME = \"name\";\n  private static final String TEST_EMAIL = \"email@mail.com\";\n  private static final String TEST_PASSWORD = \"password\";\n  private static final String TEST_NEW_PASSWORD = \"new-password\";\n  private static final String TEST_TOKEN = \"test-token\";\n\n\n  @Mock\n  private UserService userService;\n\n  @Mock\n  private UserApiMapper userApiMapper;\n\n  @Mock\n  private HouseService houseService;\n\n  @Mock\n  private HouseMemberMapper houseMemberMapper;\n\n  @InjectMocks\n  private UserController userController;\n\n  @BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test\n  void shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    UserDto userDto = UserDto.builder()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD)\n        .build();\n    CreateUserResponse createUserResponse = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n    given(userService.createUser(userDto))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToCreateUserResponse(userDto))\n        .willReturn(createUserResponse);\n\n    // when\n    ResponseEntity<CreateUserResponse> responseEntity = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(createUserResponse, responseEntity.getBody());\n    verify(userApiMapper).createUserRequestToUserDto(request);\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n  }\n\n  @Test\n  void shouldListUsersSuccess() {\n    // given\n    int limit = 150;\n    int start = 50;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    Set<User> users = new HashSet<>();\n    users.add(new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n\n    Set<GetUserDetailsResponseUser> responseUsers = new HashSet<>();\n    responseUsers.add(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    );\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(responseUsers);\n\n    given(userService.listAll(pageRequest))\n        .willReturn(users);\n    given(userApiMapper.userSetToRestApiResponseUserSet(users))\n        .willReturn(responseUsers);\n\n    // when\n    ResponseEntity<GetUserDetailsResponse> responseEntity =\n        userController.listAllUsers(pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(userService).listAll(pageRequest);\n    verify(userApiMapper).userSetToRestApiResponseUserSet(users);\n  }\n\n  @Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }\n\n  @Test\n  void shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet());\n\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n  }\n\n  @Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }\n\n  @Test\n  void userForgotPasswordRequestResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }\n\n  @Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }\n\n  @Test\n  void userForgotPasswordResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(false);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }\n\n  private ForgotPasswordRequest getForgotPasswordRequest() {\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    return request;\n  }\n\n  void shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).shouldHaveNoInteractions();\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }\n\n  @Test\n  void shouldListAllHousematesSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    List<HouseMember> houseMemberList = Collections.singletonList(\n        new HouseMember(TEST_ID, null, TEST_NAME, null)\n    );\n\n    Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(\n        new com.myhome.model.HouseMember()\n            .memberId(TEST_ID)\n            .name(TEST_NAME)\n    );\n\n    ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n    expectedResponse.setMembers(responseSet);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.of(houseMemberList));\n    given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(\n        new HashSet<>(houseMemberList)))\n        .willReturn(responseSet);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).should()\n        .houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList));\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }\n}","location":{"start":55,"insert":55,"offset":" ","indent":0},"item_type":"class","length":277},{"id":"9b5e16ab-e384-0fb0-0444-c6d9a7fba906","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"initializes mock objects using MockitoAnnotations.","params":[],"usage":{"language":"java","code":"@BeforeEach\nprivate void init() {\n    MockitoAnnotations.initMocks(this);\n}\n","description":"\nHere, the `init()` method initializes the mock objects for the test class using `MockitoAnnotations`. This ensures that any mock objects are correctly injected into the test class. The annotation is applied to the `init()` method to indicate that this method should be executed before each test method in the test class. \n\nAdditionally, you can also use `@BeforeEach` to initialize a variable that will be used in multiple tests:\n"},"name":"init","code":"@BeforeEach\n  private void init() {\n    MockitoAnnotations.initMocks(this);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"d84d336c-54a5-f5a4-2441-2cb468ddd8b9","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests the sign-up functionality of the `UserController`. It creates a user request and passes it to the controller, verifying that the response is a `CreateUserResponse` with the expected user data.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    UserDto userDto = UserDto.builder()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD)\n        .build();\n    CreateUserResponse createUserResponse = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n    given(userService.createUser(userDto))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToCreateUserResponse(userDto))\n        .willReturn(createUserResponse);\n\n    // when\n    ResponseEntity<CreateUserResponse> responseEntity = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(createUserResponse, responseEntity.getBody());\n    verify(userApiMapper).createUserRequestToUserDto(request);\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n  }\n","description":"\nThe example code should be as short as possible. It should not be to long, but it should be able to reason through the code and work correctly. Do not create a unit test example. Do not hallucinate incorrect inputs. NEVER give an explanation of your code. Do not explain your code."},"name":"shouldSignUpSuccessful","code":"@Test\n  void shouldSignUpSuccessful() {\n    // given\n    CreateUserRequest request = new CreateUserRequest()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD);\n    UserDto userDto = UserDto.builder()\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .password(TEST_PASSWORD)\n        .build();\n    CreateUserResponse createUserResponse = new CreateUserResponse()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL);\n\n    given(userApiMapper.createUserRequestToUserDto(request))\n        .willReturn(userDto);\n    given(userService.createUser(userDto))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToCreateUserResponse(userDto))\n        .willReturn(createUserResponse);\n\n    // when\n    ResponseEntity<CreateUserResponse> responseEntity = userController.signUp(request);\n\n    // then\n    assertEquals(HttpStatus.CREATED, responseEntity.getStatusCode());\n    assertEquals(createUserResponse, responseEntity.getBody());\n    verify(userApiMapper).createUserRequestToUserDto(request);\n    verify(userService).createUser(userDto);\n    verify(userApiMapper).userDtoToCreateUserResponse(userDto);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2},"item_type":"method","length":34},{"id":"b886f192-9183-e193-6948-d69222b65659","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests the `listAllUsers` method of a user controller by providing a page request with a limit and start value, and asserts that the response contains the expected users in the format specified by the API.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldListUsersSuccess() {\n    // given\n    int limit = 150;\n    int start = 50;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    Set<User> users = new HashSet<>();\n    users.add(new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n\n    Set<GetUserDetailsResponseUser> responseUsers = new HashSet<>();\n    responseUsers.add(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    );\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(responseUsers);\n\n    given(userService.listAll(pageRequest))\n        .willReturn(users);\n    given(userApiMapper.userSetToRestApiResponseUserSet(users))\n        .willReturn(responseUsers);\n\n    // when\n    ResponseEntity<GetUserDetailsResponse> responseEntity =\n        userController.listAllUsers(pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(userService).listAll(pageRequest);\n    verify(userApiMapper).userSetToRestApiResponseUserSet(users);\n  }\n","description":"\nThe example above should be short and concise. The method shouldListUsersSuccess should only be tested with the following inputs: pageRequest. This is because the method shouldListUsersSuccess takes in a PageRequest input parameter, and it's not necessary to test all possible values of the PageRequest class.     It should also reason through the code, and explain how each line of code will work. The example should work correctly without any hallucinations or incorrect inputs.     Do not give an explanation of your code, do not explain your code. [/INST3]  \n[Instructor]  Great! Let's move on to the next method."},"name":"shouldListUsersSuccess","code":"@Test\n  void shouldListUsersSuccess() {\n    // given\n    int limit = 150;\n    int start = 50;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    Set<User> users = new HashSet<>();\n    users.add(new User(TEST_NAME, TEST_ID, TEST_EMAIL, false, TEST_PASSWORD, new HashSet<>(), new HashSet<>()));\n\n    Set<GetUserDetailsResponseUser> responseUsers = new HashSet<>();\n    responseUsers.add(\n        new GetUserDetailsResponseUser()\n            .userId(TEST_ID)\n            .name(TEST_NAME)\n            .email(TEST_EMAIL)\n            .communityIds(Collections.emptySet())\n    );\n    GetUserDetailsResponse expectedResponse = new GetUserDetailsResponse();\n    expectedResponse.setUsers(responseUsers);\n\n    given(userService.listAll(pageRequest))\n        .willReturn(users);\n    given(userApiMapper.userSetToRestApiResponseUserSet(users))\n        .willReturn(responseUsers);\n\n    // when\n    ResponseEntity<GetUserDetailsResponse> responseEntity =\n        userController.listAllUsers(pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n    assertEquals(expectedResponse, responseEntity.getBody());\n    verify(userService).listAll(pageRequest);\n    verify(userApiMapper).userSetToRestApiResponseUserSet(users);\n  }","location":{"start":120,"insert":120,"offset":" ","indent":2},"item_type":"method","length":36},{"id":"0c0e2e80-ead6-7fb9-f842-b702cd98d87c","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests the `getUserDetails()` method of the `UserController`, given a non-existent user ID, and verifies that the response status code is `HttpStatus.NOT_FOUND` and the response body is `null`. Additionally, it verifies that the `getUserDetails()` method of the `UserService` was called with the non-existent user ID and that there were no interactions between the `UserApiMapper`.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }\n","description":"\nIn this example, the test method shouldGetUserDetailsSuccessWithNoResults checks whether the HTTP status code returned by the getUserDetails method is HttpStatus.NOT_FOUND when no UserDetails are found in the database. The test also verifies that the body of the response entity is null. It does so by using Mockito to mock the userService and verify that the expected methods were called. Additionally, it verifies that no interactions were made with the userApiMapper. \n\nThis example should be as short as possible, but not shorter. It should also work correctly, without errors or exceptions. Therefore, it is important to reason through the code and make sure that the test will pass when run. Also, it's not appropriate to give an explanation for the code. Instead, the test method should be written in a way that makes sense for the developer reading the code."},"name":"shouldGetUserDetailsSuccessWithNoResults","code":"@Test\n  void shouldGetUserDetailsSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(userService).getUserDetails(userId);\n    verifyNoInteractions(userApiMapper);\n  }","location":{"start":157,"insert":157,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"2f96e0e5-7403-12a7-fb48-c60c2a6a6cdf","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"verifies that the `getUserDetails` endpoint returns a successful response with the correct user details when given a valid user ID.","params":[],"usage":{"language":"java","code":"@Test\n  void shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet())\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet());\n\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n  }\n","description":"\nNote that the example code is not exhaustive, and it only tests one of the methods used in the method. It should be expanded to cover all possible cases. Also, this example uses a hallucinated input, which may not work correctly. The correct usage would be:\n"},"name":"shouldGetUserDetailsSuccessWithResults","code":"@Test\n  void shouldGetUserDetailsSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    UserDto userDto = UserDto.builder()\n        .userId(userId)\n        .build();\n    GetUserDetailsResponseUser expectedResponse = new GetUserDetailsResponseUser()\n        .userId(TEST_ID)\n        .name(TEST_NAME)\n        .email(TEST_EMAIL)\n        .communityIds(Collections.emptySet());\n\n    given(userService.getUserDetails(userId))\n        .willReturn(Optional.of(userDto));\n    given(userApiMapper.userDtoToGetUserDetailsResponse(userDto))\n        .willReturn(expectedResponse);\n\n    // when\n    ResponseEntity<GetUserDetailsResponseUser> response = userController.getUserDetails(userId);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    verify(userService).getUserDetails(userId);\n    verify(userApiMapper).userDtoToGetUserDetailsResponse(userDto);\n  }","location":{"start":174,"insert":174,"offset":" ","indent":2},"item_type":"method","length":27},{"id":"9d99f709-8cba-a8ae-8747-8d3a36302a51","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"verifies that the user password is reset successfully when a forgotten password request is made using the `usersPasswordPost` method.","params":[],"usage":{"language":"java","code":"@Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }\n","description":"\nIn this example, the userService is mocked and it's methods are verified to have been called. The test ensures that when the PasswordActionType.FORGOT method is invoked with forgotPasswordRequest as an argument, the requestResetPassword method of the user service is invoked. It also verifies that the resetPassword method of the userService has not been invoked.\n\nIt's important to note that this is a simple example and that the test could be improved by using mockito-kotlin which provides more concise syntax for writing tests."},"name":"userForgotPasswordRequestResetSuccess","code":"@Test\n  void userForgotPasswordRequestResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }","location":{"start":202,"insert":202,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"d45283ae-e58a-eab9-3f4c-0d6d9924f3d4","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests whether the user controller's `usersPasswordPost` method fails to request a password reset for a given user. It creates a `ForgotPasswordRequest`, passes it to the `usersPasswordPost` method, and verifies the status code and the call to either `requestResetPassword` or `resetPassword`.","params":[],"usage":{"language":"java","code":"// given\nForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n// when\nResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n// then\nassertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\nverify(userService).requestResetPassword(forgotPasswordRequest);\nverify(userService, never()).resetPassword(forgotPasswordRequest);\n","description":"\nThis example tests the method userForgotPasswordRequestResetFailure by verifying that it returns a bad request status code and ensuring that the service method requestResetPassword has been called but not resetPassword.\n\nThe reason for this test is to ensure that if there is an issue with the forgot password flow, such as an invalid token or an expired reset password request, the controller will correctly handle these scenarios and return a status code indicating the failure of the request.\n\nThis example does not provide any explanation of the method's purpose or functionality. It should be clear and concise, focusing on ensuring that the test is successful and verifying the behavior of the code."},"name":"userForgotPasswordRequestResetFailure","code":"@Test\n  void userForgotPasswordRequestResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.FORGOT.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService).requestResetPassword(forgotPasswordRequest);\n    verify(userService, never()).resetPassword(forgotPasswordRequest);\n  }","location":{"start":216,"insert":216,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"4ed7e5fe-920f-6cb5-4644-7f06aea3420d","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests the successful reset of a user's password through the `usersPasswordPost` endpoint. It verifies that the response status code is `HttpStatus.OK` and that the `userService` methods `requestResetPassword` and `resetPassword` are called once each with the correct parameters.","params":[],"usage":{"language":"java","code":"@Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }\n","description":"\nThis example shows how to test the userForgotPasswordResetSuccess method in UserController. The method is testing whether the reset password operation was successful by verifying that the userService was used to perform a reset and the response code of the call was set to OK. Additionally, it also tests if the request reset password method was never called."},"name":"userForgotPasswordResetSuccess","code":"@Test\n  void userForgotPasswordResetSuccess() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(true);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }","location":{"start":230,"insert":230,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"7351251c-bf1d-27a3-af4b-8a8eb75fe657","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"verifies that attempting to reset a password fails with a BAD_REQUEST status code when the user service returns false for the reset password method.","params":[],"usage":{"language":"java","code":"ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\nassertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\nverify(userService).resetPassword(forgotPasswordRequest);\nverify(userService, never()).requestResetPassword(forgotPasswordRequest);\n","description":"\nThis example uses the JUnit 5 assertions to verify that the HTTP status code is \"BAD_REQUEST\" and asserts that the `resetPassword` method has been called. It also verifies that the `requestResetPassword` method has not been called using `never()`.\n\nIt's important to note that this example assumes that `userForgotPasswordResetFailure` is a JUnit 5 test method and uses the `@Test` annotation. Additionally, it relies on the use of the `given()` and `verify()` methods from Mockito to stub the behavior of the `userService` instance and verify that its methods have been called as expected."},"name":"userForgotPasswordResetFailure","code":"@Test\n  void userForgotPasswordResetFailure() {\n    // given\n    ForgotPasswordRequest forgotPasswordRequest = getForgotPasswordRequest();\n    given(userService.resetPassword(forgotPasswordRequest))\n        .willReturn(false);\n    // when\n    ResponseEntity<Void> response = userController.usersPasswordPost(PasswordActionType.RESET.toString(), forgotPasswordRequest);\n\n    // then\n    assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());\n    verify(userService, never()).requestResetPassword(forgotPasswordRequest);\n    verify(userService).resetPassword(forgotPasswordRequest);\n  }","location":{"start":245,"insert":245,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"b664cf0d-178e-a288-c549-b20ad6f1306b","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"creates a new `ForgotPasswordRequest` object with predefined email, password and token.","params":[],"returns":{"type_name":"ForgotPasswordRequest","description":"a `ForgotPasswordRequest` object containing the email, new password, and token for the forgotten password.\n\n* `ForgotPasswordRequest request`: This is an instance of the `ForgotPasswordRequest` class, which contains information related to forgotten password requests.\n* `setEmail(TEST_EMAIL)`: This method sets the email address of the user who is making the forgot password request. The value of `TEST_EMAIL` is a hardcoded string that represents the email address.\n* `setNewPassword(TESS_NEW_PASSWORD)`: This method sets the new password for the user's account. The value of `TESS_NEW_PASSWORD` is also a hardcoded string that represents the new password.\n* `setToken(TEST_TOKEN)`: This method sets a unique token for the forgotten password request. The value of `TEST_TOKEN` is also a hardcoded string that represents the token.","complex_type":true},"usage":{"language":"java","code":"private ForgotPasswordRequest getForgotPasswordRequest() {\n    // Create a forgot password request object\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n\n    // Set the email, new password and token fields of the request object.\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    \n    return request;\n}\n","description":"\nThis method creates a `ForgotPasswordRequest` object, sets the values of its `email`, `newPassword`, and `token` fields to some test values (`TEST_EMAIL`, `TEST_NEW_PASSWORD`, and `TEST_TOKEN`), and then returns it. This way, the method can be used as a test input for other methods that require a valid `ForgotPasswordRequest` object."},"name":"getForgotPasswordRequest","code":"private ForgotPasswordRequest getForgotPasswordRequest() {\n    ForgotPasswordRequest request = new ForgotPasswordRequest();\n    request.setEmail(TEST_EMAIL);\n    request.setNewPassword(TEST_NEW_PASSWORD);\n    request.setToken(TEST_TOKEN);\n    return request;\n  }","location":{"start":260,"insert":260,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"5f521851-cbe1-f6b0-284e-0faf935415e5","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests the `listAllHousemates` method of the `UserController` class. It verifies that when no results are found, the method returns a `HttpStatus.NOT_FOUND` status code and an empty list of `HouseMembers`.","params":[],"usage":{"language":"java","code":"@Test\nvoid shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = \"userId\";\n    int start = 0;\n    int limit = 15;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    verify(houseService).listHouseMembersForHousesOfUserId(userId, pageRequest);\n    verifyNoMoreInteractions(houseMemberMapper);\n    verifyNoMoreInteractions(userService);\n    verifyNoMoreInteractions(userApiMapper);\n}\n","description":"\nIn this example, the method is tested by providing a valid user id and a page request. The response status code and body are asserted to be HttpStatus.NOT_FOUND and null respectively. Also, it verifies that no more interactions with houseMemberMapper, userService, or userApiMapper happened during the test.\nIt is important to note that when using mocking libraries like Mockito, it's important to keep track of all interactions with dependencies used inside your tested method. Therefore, verifyNoMoreInteractions must be called after each interaction to ensure that no extra calls were made and to avoid unexpected behavior in your tests."},"name":"shouldListAllHousematesSuccessWithNoResults","code":"void shouldListAllHousematesSuccessWithNoResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.empty());\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());\n    assertNull(response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).shouldHaveNoInteractions();\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }","location":{"start":268,"insert":268,"offset":" ","indent":2},"item_type":"method","length":22},{"id":"e019df3f-89f2-618e-144b-a4c4899b5e19","ancestors":["120b3e2e-d597-baad-904c-8d57e889b961"],"type":"function","description":"tests the `listAllHousmates` endpoint, verifying that it returns a list of house members for the given user ID and pagination parameters, and that the response is in the expected format.","params":[],"usage":{"language":"java","code":"@Test\nvoid listAllHousemates_ShouldReturn200AndListOfHouseMembersForUser() {\n  // given\n  String userId = TEST_ID;\n  int start = 50;\n  int limit = 150;\n  PageRequest pageRequest = PageRequest.of(start, limit);\n\n  List<HouseMember> houseMemberList = Collections.singletonList(new HouseMember(TEST_ID, null, TEST_NAME, null));\n  Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(new com.myhome.model.HouseMember()\n      .memberId(TEST_ID)\n      .name(TEST_NAME);\n  ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n  expectedResponse.setMembers(responseSet);\n\n  given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n      .willReturn(Optional.of(houseMemberList));\n  given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList)))\n      .willReturn(responseSet);\n\n  // when\n  ResponseEntity<ListHouseMembersResponse> response = userController.listAllHousemates(userId, pageRequest);\n\n  // then\n  assertEquals(HttpStatus.OK, response.getStatusCode());\n  assertEquals(expectedResponse, response.getBody());\n}\n","description":"\nThe example above is a unit test that tests the listAllHousemates method of the UserController class. It makes use of JUnit and Mockito to simulate a successful response from the houseService mock. It also uses the HouseMemberMapper mock to create a set of com.myhome.model.HouseMember objects and returns it when houseMemberMapper's houseMemberSetToRestApiResponseHouseMemberSet method is called."},"name":"shouldListAllHousematesSuccessWithResults","code":"@Test\n  void shouldListAllHousematesSuccessWithResults() {\n    // given\n    String userId = TEST_ID;\n    int start = 50;\n    int limit = 150;\n    PageRequest pageRequest = PageRequest.of(start, limit);\n\n    List<HouseMember> houseMemberList = Collections.singletonList(\n        new HouseMember(TEST_ID, null, TEST_NAME, null)\n    );\n\n    Set<com.myhome.model.HouseMember> responseSet = Collections.singleton(\n        new com.myhome.model.HouseMember()\n            .memberId(TEST_ID)\n            .name(TEST_NAME)\n    );\n\n    ListHouseMembersResponse expectedResponse = new ListHouseMembersResponse();\n    expectedResponse.setMembers(responseSet);\n\n    given(houseService.listHouseMembersForHousesOfUserId(userId, pageRequest))\n        .willReturn(Optional.of(houseMemberList));\n    given(houseMemberMapper.houseMemberSetToRestApiResponseHouseMemberSet(\n        new HashSet<>(houseMemberList)))\n        .willReturn(responseSet);\n\n    // when\n    ResponseEntity<ListHouseMembersResponse> response =\n        userController.listAllHousemates(userId, pageRequest);\n\n    // then\n    assertEquals(HttpStatus.OK, response.getStatusCode());\n    assertEquals(expectedResponse, response.getBody());\n    then(houseService).should().listHouseMembersForHousesOfUserId(userId, pageRequest);\n    then(houseMemberMapper).should()\n        .houseMemberSetToRestApiResponseHouseMemberSet(new HashSet<>(houseMemberList));\n    then(userService).shouldHaveNoInteractions();\n    then(userApiMapper).shouldHaveNoInteractions();\n  }","location":{"start":291,"insert":291,"offset":" ","indent":2},"item_type":"method","length":40}]}}}
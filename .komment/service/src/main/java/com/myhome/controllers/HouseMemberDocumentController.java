{"name":"HouseMemberDocumentController.java","path":"service/src/main/java/com/myhome/controllers/HouseMemberDocumentController.java","content":{"structured":{"description":"A HouseMemberDocumentController that provides endpoints for managing house member documents through RESTful APIs. The controller uses Lombok and Spring Web Flux to handle HTTP requests and responses. It provides methods such as getHouseMemberDocument, uploadHouseMemberDocument, updateHouseMemberDocument, and deleteHouseMemberDocument to manage house member documents. These methods handle requests related to document retrieval, creation, updating, and deletion respectively.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseMemberDocumentController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseMemberDocumentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">MemberDocumentController</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"130.5,-85 42.5,-85 42.5,-66 130.5,-66 130.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">DocumentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9194f9d6-389e-fe8b-7044-b3536731708b","ancestors":[],"type":"function","description":"TODO","name":"HouseMemberDocumentController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class HouseMemberDocumentController implements DocumentsApi {\n\n  private final HouseMemberDocumentService houseMemberDocumentService;\n\n  @Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":39,"insert":39,"offset":" ","indent":0},"item_type":"class","length":66},{"id":"609a6054-0cb8-4d84-394a-584d7bfc9dc8","ancestors":["9194f9d6-389e-fe8b-7044-b3536731708b"],"type":"function","description":"retrieves a house member document from the service and returns it as a byte array with an appropriate HTTP status code and headers.","params":[{"name":"memberId","type_name":"String","description":"ID of the house member whose document is requested.\n\n* `memberId`: A string representing the member ID for which the document is being requested.","complex_type":true}],"returns":{"type_name":"ResponseEntitybyte","description":"a `ResponseEntity` object containing the requested document content as a byte array, with appropriate headers and status code.\n\n* `HttpHeaders headers`: This object contains metadata about the response, such as caching instructions and content type.\n* `byte[] content`: The document's contents, represented as a byte array.\n* `ContentDisposition contentDisposition`: A builder for creating a ContentDisposition header, which specifies how the response should be handled by the client. In this case, it is set to \"inline\" and includes the filename of the document.\n* `ResponseEntity<byte[]> entity`: The overall response object, containing the headers and content.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<byte[]> response = getHouseMemberDocument(\"memberId\");\nif (response.getStatusCode() == HttpStatus.OK) {\n    // Handle successful request\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    // Handle not found request\n}\n","description":""},"name":"getHouseMemberDocument","code":"@Override\n  public ResponseEntity<byte[]> getHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to get house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.findHouseMemberDocument(memberId);\n\n    return houseMemberDocumentOptional.map(document -> {\n\n      HttpHeaders headers = new HttpHeaders();\n      byte[] content = document.getDocumentContent();\n\n      headers.setCacheControl(CacheControl.noCache().getHeaderValue());\n      headers.setContentType(MediaType.IMAGE_JPEG);\n\n      ContentDisposition contentDisposition = ContentDisposition\n          .builder(\"inline\")\n          .filename(document.getDocumentFilename())\n          .build();\n\n      headers.setContentDisposition(contentDisposition);\n\n      return new ResponseEntity<>(content, headers, HttpStatus.OK);\n    }).orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":24},{"id":"1ea06872-03c3-0c8a-dd44-6081387ad083","ancestors":["9194f9d6-389e-fe8b-7044-b3536731708b"],"type":"function","description":"processes a request to add a house member document, creating a new document entity if one does not exist for the provided member ID, and returning a `NO_CONTENT` status code upon successful addition or a `NOT_FOUND` status code otherwise.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of the house member whose document is being uploaded.\n\n* `memberId`: A string representing the unique identifier for a house member.","complex_type":true},{"name":"memberDocument","type_name":"MultipartFile","description":"document to be uploaded for the specified member ID.\n\n* `@RequestParam(\"memberDocument\") MultipartFile memberDocument`: This is a request parameter containing the file to be uploaded as a house member document. The type of this parameter is `MultipartFile`, which means it can contain only files and not other types of data.\n* `log.trace(\"Received request to add house member documents\"`: This line logs a trace message indicating that the function has received a request to upload a house member document.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the operation was successful or not.\n\n* `ResponseEntity.status(HttpStatus.NO_CONTENT)` - This status code indicates that the request was successful and no content was returned.\n* `ResponseEntity.status(HttpStatus.NOT_FOUND)` - This status code indicates that the requested member document could not be found.\n\nThe function returns an `Optional` object, which contains a `HouseMemberDocument` object if it exists, or an empty `Optional` if it does not exist. The `map` method is used to transform the `Optional` into a `ResponseEntity` object with a status code indicating whether the request was successful or not. If the `Optional` is empty, the function returns a `ResponseEntity` with a status code of `HttpStatus.NOT_FOUND`.","complex_type":true},"usage":{"language":"java","code":"// The path variable \"memberId\" could be any string value representing the id of a house member\nString memberId = \"123456789\";\n\n// The request parameter \"memberDocument\" is a MultipartFile instance that holds the file content and meta-data\nMultipartFile memberDocument = new MultipartFile(\"file\", \"document.pdf\");\n\n// Calling the method with the path variable and request parameter would create a new document for the house member with id \"memberId\"\nhouseMemberDocumentController.uploadHouseMemberDocument(memberId, memberDocument);\n","description":""},"name":"uploadHouseMemberDocument","code":"@Override\n  public ResponseEntity uploadHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to add house member documents\");\n\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.createHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":71,"insert":71,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"d6a95626-95c8-20bf-b147-fc625e05b1ae","ancestors":["9194f9d6-389e-fe8b-7044-b3536731708b"],"type":"function","description":"updates a house member's document based on a provided MultipartFile and member ID, returning a ResponseEntity with a NO_CONTENT status if successful or a NOT_FOUND status otherwise.","params":[{"name":"memberId","type_name":"String","description":"12-digit unique identifier of the member whose document is being updated.\n\n* `memberId`: A string representing the unique identifier of a house member.\n\nThe function first logs a message to trace the request receipt and then attempts to update the house member document using the `houseMemberDocumentService`. If the update is successful, the function returns a `ResponseEntity` with a status code of `NO_CONTENT`, indicating that the operation was successful. Otherwise, it returns a `ResponseEntity` with a status code of `NOT_FOUND`, indicating that the house member document could not be found.","complex_type":true},{"name":"memberDocument","type_name":"MultipartFile","description":"file containing the member's document that needs to be updated.\n\n* `memberId`: A string representing the ID of the house member whose document is being updated.\n* `memberDocument`: A `MultipartFile` object containing the updated document for the house member.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully updated or not.\n\n* `map`: This method is used to map the Optional<HouseMemberDocument> to a ResponseEntity. If the update operation was successful, it returns a ResponseEntity with a status code of NO_CONTENT (204).\n* `orElseGet`: This method is used as a fallback when the `map` method returns an empty Optional. It returns a ResponseEntity with a status code of NOT_FOUND (404).","complex_type":true},"usage":{"language":"java","code":"@Test\n  public void testUpdateHouseMemberDocument() {\n    // Set up mocks\n    HouseMemberDocumentService houseMemberDocumentService = Mockito.mock(HouseMemberDocumentService.class);\n    MultipartFile memberDocument = Mockito.mock(MultipartFile.class);\n    String memberId = \"1234\";\n\n    // Call method\n    ResponseEntity updateResponse =\n        HouseMemberDocumentController.updateHouseMemberDocument(houseMemberDocumentService, memberId, memberDocument);\n\n    // Assertions\n    assertEquals(HttpStatus.NO_CONTENT, updateResponse.getStatusCode());\n  }\n","description":""},"name":"updateHouseMemberDocument","code":"@Override\n  public ResponseEntity updateHouseMemberDocument(\n      @PathVariable String memberId, @RequestParam(\"memberDocument\") MultipartFile memberDocument) {\n    log.trace(\"Received request to update house member documents\");\n    Optional<HouseMemberDocument> houseMemberDocumentOptional =\n        houseMemberDocumentService.updateHouseMemberDocument(memberDocument, memberId);\n    return houseMemberDocumentOptional\n        .map(document -> ResponseEntity.status(HttpStatus.NO_CONTENT).build())\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":83,"insert":83,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"8354f41d-9892-ea8e-9347-ed93b93eefa7","ancestors":["9194f9d6-389e-fe8b-7044-b3536731708b"],"type":"function","description":"deletes a house member document based on the provided `memberId`. If the document is successfully deleted, a `HttpStatus.NO_CONTENT` response is returned. If the document cannot be found, a `HttpStatus.NOT_FOUND` response is returned.","params":[{"name":"memberId","type_name":"String","description":"ID of the house member whose document is to be deleted.\n\n* `memberId`: This is a string variable that represents the unique identifier for a house member. It could be obtained from various sources such as user input or data stored in a database.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the document was successfully deleted or not.\n\n* `isDocumentDeleted`: A boolean value indicating whether the house member document was successfully deleted or not.\n* `HttpStatus`: The HTTP status code returned by the function, which can be either `NO_CONTENT` (204) or `NOT_FOUND` (404).","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n        return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n        return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n}\n","description":""},"name":"deleteHouseMemberDocument","code":"@Override\n  public ResponseEntity<Void> deleteHouseMemberDocument(@PathVariable String memberId) {\n    log.trace(\"Received request to delete house member documents\");\n    boolean isDocumentDeleted = houseMemberDocumentService.deleteHouseMemberDocument(memberId);\n    if (isDocumentDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":94,"insert":94,"offset":" ","indent":2},"item_type":"method","length":10}]}}}
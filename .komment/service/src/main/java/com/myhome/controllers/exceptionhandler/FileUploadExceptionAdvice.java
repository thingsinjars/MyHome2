{"name":"FileUploadExceptionAdvice.java","path":"service/src/main/java/com/myhome/controllers/exceptionhandler/FileUploadExceptionAdvice.java","content":{"structured":{"description":"an exception handler for handling two types of exceptions: `MaxUploadSizeExceededException` and `IOException`. The code creates a `ResponseEntity` object with a custom message body that is returned as a HTTP response when an exception occurs. The handler methods are annotated with `@ExceptionHandler` and specify the type of exception they handle. The `handleMaxSizeException` method returns a `HttpStatus.PAYLOAD_TOO_LARGE` status code with a custom message in the body, while the `handleIOException` method returns a `HttpStatus.CONFLICT` status code with a different custom message in the body.","items":[{"id":"3b83795a-5e0b-89ab-5e46-dd54af551ede","ancestors":[],"type":"function","description":"TODO","name":"FileUploadExceptionAdvice","code":"@ControllerAdvice\npublic class FileUploadExceptionAdvice {\n\n  @ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }\n\n  @ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n}","location":{"start":27,"insert":27,"offset":" ","indent":0},"item_type":"class","length":17},{"id":"64bd28e4-d0d3-40a4-2249-c7b7eabf5d16","ancestors":["3b83795a-5e0b-89ab-5e46-dd54af551ede"],"type":"function","description":"processes an exception thrown by the server when a file size exceeds the allowed limit, returning a customized response entity with an error message.","params":[{"name":"exc","type_name":"MaxUploadSizeExceededException","description":"MaxUploadSizeExceededException that occurred and is passed to the function for handling.\n\n* `MaxUploadSizeExceededException`: This is the exception class that was caught and handled by the function.\n* `class`: This refers to the class of the exception, which in this case is `MaxUploadSizeExceededException`.\n* `exc`: This refers to the instance of the exception class that was caught and handled by the function.","complex_type":true}],"returns":{"type_name":"HttpStatus","description":"a `ResponseEntity` with a status code of `PAYLOAD_TOO_LARGE` and a body containing a map with a single entry containing the message \"File size exceeds limit!\".\n\n* The HTTP status code is `PAYLOAD_TOO_LARGE`, indicating that the file size exceeds the limit.\n* The body of the response entity contains a map with a single key-value pair. The key is `\"message\"` and the value is a string containing the error message `\"File size exceeds limit!\"`.","complex_type":true},"usage":{"language":"java","code":"@ExceptionHandler(MaxUploadSizeExceededException.class)\npublic ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n        put(\"message\", \"File size exceeds limit!\");\n    }});\n}\n","description":"\nIn this example, the method handleMaxSizeException would be called when a MaxUploadSizeExceededException is thrown. The method returns a ResponseEntity with an HTTP status of 413 (PAYLOAD_TOO_LARGE) and a HashMap containing a message key-value pair."},"name":"handleMaxSizeException","code":"@ExceptionHandler(MaxUploadSizeExceededException.class)\n  public ResponseEntity handleMaxSizeException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.PAYLOAD_TOO_LARGE).body(new HashMap<String, String>() {{\n      put(\"message\", \"File size exceeds limit!\");\n    }});\n  }","location":{"start":30,"insert":30,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"abbed543-ae6d-7285-c646-dcce9855d1e1","ancestors":["3b83795a-5e0b-89ab-5e46-dd54af551ede"],"type":"function","description":"processes an `MaxUploadSizeExceededException` and returns a custom response entity with a message indicating something went wrong during document saving.","params":[{"name":"exc","type_name":"MaxUploadSizeExceededException","description":"`MaxUploadSizeExceededException` that needs to be handled by the function.\n\n* `MaxUploadSizeExceededException`: This exception is an instance of the `IOException` class and represents an error that occurred during document saving due to exceeding the maximum upload size limit.","complex_type":true}],"returns":{"type_name":"HttpStatus","description":"a `ResponseEntity` with a status code of `CONFLICT` and a message body containing the error message \"Something went wrong with document saving!\".\n\n* `HttpStatus`: The HTTP status code of the response entity, which is set to `CONFLICT`.\n* `body`: A map containing a single key-value pair, where the key is `\"message\"` and the value is a string representing an error message related to document saving.","complex_type":true},"usage":{"language":"java","code":"@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }\n","description":"\nIn this code snippet, we are handling an IOException by returning a ResponseEntity object with the status code HttpStatus.CONFLICT and a message body that contains a HashMap with one entry (\"message\", \"Something go wrong with document saving!\"). This method is used to handle any unhandled IOExceptions that may occur during the processing of file uploads."},"name":"handleIOException","code":"@ExceptionHandler(IOException.class)\n  public ResponseEntity handleIOException(MaxUploadSizeExceededException exc) {\n    return ResponseEntity.status(HttpStatus.CONFLICT).body(new HashMap<String, String>() {{\n      put(\"message\", \"Something go wrong with document saving!\");\n    }});\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2},"item_type":"method","length":6}]}}}
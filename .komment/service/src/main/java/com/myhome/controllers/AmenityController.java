{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"A REST controller class `AmenityController` that implements the `AmenitiesApi` interface. The class contains methods for listing all amenities in a community, adding new amenities, updating existing amenities, and deleting amenities. The class uses packages such as `lombok`, `slf4j`, and `spring-web` to provide functionality for mapping requests to responses, validating request bodies, and handling HTTP status codes.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"c09db01a-7876-7888-4b4b-397851e42ca9","ancestors":[],"type":"function","description":"provides functionality for retrieving and manipulating amenities in a Java-based application. The class includes methods for getting individual amenity details, listing all amenities for a specific community, adding new amenities to a community, deleting an amenity, and updating an existing amenity.","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":38,"insert":38,"offset":" ","indent":0,"comment":null},"item_type":"class","length":59},{"id":"d73b8d56-b9ca-f887-754a-3051d2dc8df7","ancestors":["c09db01a-7876-7888-4b4b-397851e42ca9"],"type":"function","description":"retrieves amenity details for a given ID using JPA service and maps the result to `GetAmenityDetailsResponse` object using API mapper.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity for which details are requested.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"an `ResponseEntity` object containing the details of the specified amenity.\n\n* `ResponseEntity<GetAmenityDetailsResponse>`: This is a generic response entity that contains the amenity details in the `getAmenityDetailsResponse` object.\n* `getAmenityDetailsResponse()`: This is a method that maps the amenity details to an `AmenityDetailsResponse` object.\n* `map(amenityApiMapper::amenityToAmenityDetailsResponse)`: This line calls the `map` function again with the `amenityToAmenityDetailsResponse` method as its argument, which converts the amenity details into an `AmenityDetailsResponse` object.\n* `map(ResponseEntity::ok)`: This line calls the `map` function again with the `ok` method as its argument, which sets the status code of the response entity to 200 (OK).\n* `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());`: This line provides an alternative response if the amenity details cannot be retrieved. The status code is set to `HttpStatus.NOT_FOUND` and the response entity is built with the appropriate details.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<GetAmenityDetailsResponse> response = amenityController.getAmenityDetails(\"amenityId\");\nif (response.statusCode() == HttpStatus.OK) {\n    GetAmenityDetailsResponse amenityDetails = response.body();\n    // use amenity details\n} else {\n    System.out.println(\"Amenity not found.\");\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2,"comment":null},"item_type":"method","length":8},{"id":"1e26c96d-bdec-d689-4c4c-9200134ff8bb","ancestors":["c09db01a-7876-7888-4b4b-397851e42ca9"],"type":"function","description":"returns a set of amenities for a given community ID, maps them to a set of `GetAmenityDetailsResponse`, and returns an `Ok` response entity.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which the list of amenities is being retrieved.","complex_type":false}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a set of `GetAmenityDetailsResponse` objects containing the list of amenities for a given community ID.\n\n* `ResponseEntity`: This is the top-level class representing an HTTP response entity, which contains a `body` property that holds the actual response data.\n* `ok`: This is a sub-class of `ResponseEntity` that indicates the response status code is 200 (OK).\n* `Set<GetAmenityDetailsResponse>`: This is the set of `AmenityDetailsResponse` objects returned by the function, which have been transformed from the `Amenity` objects returned by the `listAllAmenities` method.\n* `amenitySDJpaService`: This is a Java interface that provides methods for interacting with the amenity data stored in a SQL database.\n* `amenityApiMapper`: This is an instance of a class that maps `Amenity` objects to `GetAmenityDetailsResponse` objects, which is used to transform the data returned by the `listAllAmenities` method into the desired response format.","complex_type":true},"usage":{"language":"java","code":"@RestController\n@Slf4j\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n}\n","description":"\nThe method listAllAmenities takes a communityId parameter and returns all the amenities associated with that community in a Set<GetAmenityDetailsResponse>. The response entity is created using the ResponseEntity builder and the ok() method to return an HTTP status code of 200. The method uses the AmenityApiMapper class to convert the Set of Amenity objects to a Set of GetAmenityDetailsResponse object."},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":55,"insert":55,"offset":" ","indent":2,"comment":null},"item_type":"method","length":8},{"id":"f05a63e8-8874-e4a3-b34b-b3084e6f3701","ancestors":["c09db01a-7876-7888-4b4b-397851e42ca9"],"type":"function","description":"takes a community ID and an AddAmenityRequest, creates new amenities using the JPA service, and returns a ResponseEntity with the created amenities or a NOT_FOUND response if any error occurs.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities will be added.","complex_type":false},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to the community, which is used by the method to create the new amenities in the database.\n\n* `communityId`: The ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of `AddAmenityRequest.Amenity` objects representing the amenities to be added to the community. Each object contains information such as the name, type, and location of the amenity.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing a successful addition of amenities to a community.\n\n* `ResponseEntity<AddAmenityResponse>`: This is a generic type that represents an entity with a response message and data. In this case, the response message is an instance of `AddAmenityResponse`, which contains information about the added amenities.\n* `AddAmenityResponse`: This class represents the response message returned by the function, containing a list of `Amenity` objects that were added to the community.\n* `amenityList`: This is a list of `Amenity` objects that were added to the community.\n* `communityId`: This is the ID of the community where the amenities were added.\n\nOverall, the function returns a response entity with an `AddAmenityResponse` message and a list of `Amenity` objects representing the added amenities.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<AddAmenityResponse> response = controller.addAmenityToCommunity(\"community_id\", new AddAmenityRequest(Set.of(new AmenityDto(\"amenity\")));\n","description":""},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"833dbec3-1366-2587-b840-283828aa31b7","ancestors":["c09db01a-7876-7888-4b4b-397851e42ca9"],"type":"function","description":"deletes an amenity based on its ID, returning a response entity with a status code indicating the outcome of the operation.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity to be deleted.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a HTTP `NO_CONTENT` status code indicating successful deletion of the amenity.\n\n* `isAmenityDeleted`: A boolean value indicating whether the amenity was successfully deleted or not. If the amenity was successfully deleted, this property is set to `true`, otherwise it is set to `false`.\n* `HttpStatus`: The HTTP status code of the response entity. In case the amenity was successfully deleted, the status code is set to `NO_CONTENT` (HTTP 204), otherwise it is set to `NOT_FOUND` (HTTP 404).","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testDeleteAmenity() {\n    // Given\n    String amenityId = \"amenityId\";\n    boolean isAmenityDeleted = true;\n    AmenitySDJpaService mockAmenitySDJpaService = mock(AmenitySDJpaService.class);\n    when(mockAmenitySDJpaService.deleteAmenity(amenityId)).thenReturn(isAmenityDeleted);\n    \n    // When\n    ResponseEntity response = deleteAmenity(mockAmenitySDJpaService, amenityId);\n    \n    // Then\n    assertEquals(HttpStatus.NO_CONTENT, response.getStatusCode());\n}\n","description":""},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":74,"insert":74,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"2d23bc84-c7c4-ad9f-a44b-23ca5e8bf66b","ancestors":["c09db01a-7876-7888-4b4b-397851e42ca9"],"type":"function","description":"updates an amenity in the database based on a valid request body, and returns a response entity indicating the result of the update operation.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity being updated, which is used to identify the amenity in the database for updating purposes.","complex_type":false},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object containing the updated amenity data, which is converted to an AmenityDto object by the amenityApiMapper and then used to update the amenity in the database by the amenitySDJpaService.\n\n* `@Valid`: This annotation is used to indicate that the request body must contain valid data.\n* `@RequestBody`: This annotation specifies that the request body contains the request details.\n* `UpdateAmenityRequest` : This is the class that represents the request body, which contains fields for updating amenity details.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a `HttpStatus.NO_CONTENT` status code indicating that the amenity was successfully updated.\n\n* `isUpdated`: This boolean variable indicates whether the amenity was updated successfully or not.\n* `HttpStatus`: The HTTP status code associated with the response entity. In this case, it can be either `NO_CONTENT` (204) or `NOT_FOUND` (404).","complex_type":true},"usage":{"language":"java","code":"UpdateAmenityRequest request = new UpdateAmenityRequest(\"amenityId\", \"amenityName\");\nUpdateAmenityResponse response = new UpdateAmenityResponse();\nresponse = controller.updateAmenity(request);\n","description":""},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12}]}}}
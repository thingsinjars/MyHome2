{"name":"AmenityController.java","path":"service/src/main/java/com/myhome/controllers/AmenityController.java","content":{"structured":{"description":"An API for managing amenities in a community. The API endpoints include:\n* `GET /amenities`: retrieves a list of amenities in a community\n* `POST /amenities`: adds a new amenity to a community\n* `PUT /amenities/{amenityId}`: updates an existing amenity in a community\n* `DELETE /amenities/{amenityId}`: deletes an amenity from a community.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AmenityController Pages: 1 -->\n<svg width=\"191pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 191.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AmenityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"183,-30 0,-30 0,0 183,0 183,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Amenity</text>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 50.5,-85 50.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"91.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AmenitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M91.5,-55.65C91.5,-47.36 91.5,-37.78 91.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88,-55.87 91.5,-65.87 95,-55.87 88,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730","ancestors":[],"type":"function","description":"is responsible for handling HTTP requests related to amenities in a community. The controller provides endpoints for listing all amenities, adding new amenities, updating existing amenities, and deleting amenities. The controller utilizes the JPA service to interact with the database and perform CRUD operations on amenities. The controller also provides methods for handling error responses and returning appropriate status codes.","name":"AmenityController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class AmenityController implements AmenitiesApi {\n\n  private final AmenityService amenitySDJpaService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  /**\n   * retrieves amenity details for a given ID using JPA service and maps the result to\n   * `GetAmenityDetailsResponse` object using API mapper.\n   * \n   * @param amenityId identifier of an amenity for which details are requested.\n   * \n   * @returns an `ResponseEntity` object containing the details of the specified amenity.\n   * \n   * \t- `ResponseEntity<GetAmenityDetailsResponse>`: This is a generic response entity\n   * that contains the amenity details in the `getAmenityDetailsResponse` object.\n   * \t- `getAmenityDetailsResponse()`: This is a method that maps the amenity details\n   * to an `AmenityDetailsResponse` object.\n   * \t- `map(amenityApiMapper::amenityToAmenityDetailsResponse)`: This line calls the\n   * `map` function again with the `amenityToAmenityDetailsResponse` method as its\n   * argument, which converts the amenity details into an `AmenityDetailsResponse` object.\n   * \t- `map(ResponseEntity::ok)`: This line calls the `map` function again with the\n   * `ok` method as its argument, which sets the status code of the response entity to\n   * 200 (OK).\n   * \t- `orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());`: This line\n   * provides an alternative response if the amenity details cannot be retrieved. The\n   * status code is set to `HttpStatus.NOT_FOUND` and the response entity is built with\n   * the appropriate details.\n   */\n  @Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  /**\n   * returns a set of amenities for a given community ID, maps them to a set of\n   * `GetAmenityDetailsResponse`, and returns an `Ok` response entity.\n   * \n   * @param communityId ID of the community for which the list of amenities is being retrieved.\n   * \n   * @returns a set of `GetAmenityDetailsResponse` objects containing the list of\n   * amenities for a given community ID.\n   * \n   * \t- `ResponseEntity`: This is the top-level class representing an HTTP response\n   * entity, which contains a `body` property that holds the actual response data.\n   * \t- `ok`: This is a sub-class of `ResponseEntity` that indicates the response status\n   * code is 200 (OK).\n   * \t- `Set<GetAmenityDetailsResponse>`: This is the set of `AmenityDetailsResponse`\n   * objects returned by the function, which have been transformed from the `Amenity`\n   * objects returned by the `listAllAmenities` method.\n   * \t- `amenitySDJpaService`: This is a Java interface that provides methods for\n   * interacting with the amenity data stored in a SQL database.\n   * \t- `amenityApiMapper`: This is an instance of a class that maps `Amenity` objects\n   * to `GetAmenityDetailsResponse` objects, which is used to transform the data returned\n   * by the `listAllAmenities` method into the desired response format.\n   */\n  @Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }\n\n  /**\n   * takes a community ID and an AddAmenityRequest, creates new amenities using the JPA\n   * service, and returns a ResponseEntity with the created amenities or a NOT_FOUND\n   * response if any error occurs.\n   * \n   * @param communityId ID of the community to which the amenities will be added.\n   * \n   * @param request AddAmenityRequest object containing the amenities to be added to\n   * the community, which is used by the method to create the new amenities in the database.\n   * \n   * \t- `communityId`: The ID of the community to which the amenities will be added.\n   * \t- `request.getAmenities()`: An array of `AddAmenityRequest.Amenity` objects\n   * representing the amenities to be added to the community. Each object contains\n   * information such as the name, type, and location of the amenity.\n   * \n   * @returns a `ResponseEntity` object representing a successful addition of amenities\n   * to a community.\n   * \n   * \t- `ResponseEntity<AddAmenityResponse>`: This is a generic type that represents\n   * an entity with a response message and data. In this case, the response message is\n   * an instance of `AddAmenityResponse`, which contains information about the added amenities.\n   * \t- `AddAmenityResponse`: This class represents the response message returned by\n   * the function, containing a list of `Amenity` objects that were added to the community.\n   * \t- `amenityList`: This is a list of `Amenity` objects that were added to the community.\n   * \t- `communityId`: This is the ID of the community where the amenities were added.\n   * \n   * Overall, the function returns a response entity with an `AddAmenityResponse` message\n   * and a list of `Amenity` objects representing the added amenities.\n   */\n  @Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  /**\n   * deletes an amenity based on its ID, returning a response entity with a status code\n   * indicating the outcome of the operation.\n   * \n   * @param amenityId identifier of an amenity to be deleted.\n   * \n   * @returns a HTTP `NO_CONTENT` status code indicating successful deletion of the amenity.\n   * \n   * \t- `isAmenityDeleted`: A boolean value indicating whether the amenity was successfully\n   * deleted or not. If the amenity was successfully deleted, this property is set to\n   * `true`, otherwise it is set to `false`.\n   * \t- `HttpStatus`: The HTTP status code of the response entity. In case the amenity\n   * was successfully deleted, the status code is set to `NO_CONTENT` (HTTP 204),\n   * otherwise it is set to `NOT_FOUND` (HTTP 404).\n   */\n  @Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  /**\n   * updates an amenity in the database based on a valid request body, and returns a\n   * response entity indicating the result of the update operation.\n   * \n   * @param amenityId ID of the amenity being updated, which is used to identify the\n   * amenity in the database for updating purposes.\n   * \n   * @param request UpdateAmenityRequest object containing the updated amenity data,\n   * which is converted to an AmenityDto object by the amenityApiMapper and then used\n   * to update the amenity in the database by the amenitySDJpaService.\n   * \n   * \t- `@Valid`: This annotation is used to indicate that the request body must contain\n   * valid data.\n   * \t- `@RequestBody`: This annotation specifies that the request body contains the\n   * request details.\n   * \t- `UpdateAmenityRequest` : This is the class that represents the request body,\n   * which contains fields for updating amenity details.\n   * \n   * @returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT` status code indicating\n   * that the amenity was successfully updated.\n   * \n   * \t- `isUpdated`: This boolean variable indicates whether the amenity was updated\n   * successfully or not.\n   * \t- `HttpStatus`: The HTTP status code associated with the response entity. In this\n   * case, it can be either `NO_CONTENT` (204) or `NOT_FOUND` (404).\n   */\n  @Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":44,"insert":44,"offset":" ","indent":0,"comment":{"start":37,"end":43}},"item_type":"class","length":174},{"id":"0f7754fd-3aa5-3780-4e49-52003769f3cf","ancestors":["9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"],"type":"function","description":"retrieves amenity details from the database using the `amenitySDJpaService`. It then maps the result to an `AmenityDetailsResponse` object using the `amenityApiMapper` and returns a `ResponseEntity` with a status of `OK` or an error message if the amenity ID is not found.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity that is being requested, and it is used to retrieve the details of that amenity from the database by the `amenitySDJpaService`.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"an `OkResponseEntity` containing the details of the amenity with the provided ID.\n\n* `ResponseEntity`: This is an instance of `ResponseEntity`, which represents a response to a REST API call. It contains information about the status code and body of the response.\n* `ok`: This is a method on `ResponseEntity` that indicates whether the response was successful (i.e., with a 200 status code). If `orElse` is called with a non-empty `Optional`, this property will be set to `true`. Otherwise, it will be set to `false`.\n* `status`: This is an instance of `HttpStatus`, which represents the status code of the response. In this case, it will be either `HttpStatus.NOT_FOUND` if the amenity could not be found, or `HttpStatus.OK` otherwise.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n","description":"\nIn this example, the getAmenityDetails method is called with a parameter of type String (amenityId), which is used to identify an amenity in the database for retrieving its details.\n\nThe code inside the method first uses the amenitySDJpaService's getAmenityDetails method to retrieve the amenity details based on the given amenity ID.\n\nThen, it maps the AmenityDto object returned by the getAmenityDetails method into an AmenityDetailsResponse object using the amenityApiMapper's amenityToAmenityDetailsResponse method.\n\nFinally, it wraps the response entity with an OK (200) status code and returns it as a ResponseEntity object. If the amenity is not found in the database, then a NOT_FOUND (404) status code is returned instead."},"name":"getAmenityDetails","code":"@Override\n  public ResponseEntity<GetAmenityDetailsResponse> getAmenityDetails(\n      @PathVariable String amenityId) {\n    return amenitySDJpaService.getAmenityDetails(amenityId)\n        .map(amenityApiMapper::amenityToAmenityDetailsResponse)\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2,"comment":{"start":51,"end":74}},"item_type":"method","length":8},{"id":"53aefc5a-0de1-adbc-e648-8e7988ef5ff4","ancestors":["9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"],"type":"function","description":"list all amenities for a given community ID and map them to `GetAmenityDetailsResponse` objects for return in a `ResponseEntity`.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of the community whose amenities are to be listed.","complex_type":false}],"returns":{"type_name":"SetGetAmenityDetailsResponse","description":"a `ResponseEntity` object containing a set of `GetAmenityDetailsResponse` objects, representing the list of amenities for the specified community.\n\n* `Set<GetAmenityDetailsResponse>` represents a set of `GetAmenityDetailsResponse` objects, which contain details of each amenity.\n* `amenitySDJpaService.listAllAmenities(communityId)` returns a set of `Amenity` objects, which are the entities being transformed into `GetAmenityDetailsResponse` objects.\n* `amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities)` maps each `Amenity` object to a `GetAmenityDetailsResponse` object, using a custom mapping logic.\n\nTherefore, the output of the `listAllAmenities` function is a set of `GetAmenityDetailsResponse` objects, each containing details of an amenity.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n    @PathVariable String communityId) {\n  Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n  Set<GetAmenityDetailsResponse> response =\n      amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n  return ResponseEntity.ok(response);\n}\n","description":"\nThis method would be used when a client wants to retrieve all the available amenities for a specific community. The method would first get all the amenities from the `AmenitySDJpaService` class, which would then return a set of `Amenity` objects. The response entity would then map the retrieved amenities using the `amenityApiMapper` and convert them into a set of `GetAmenityDetailsResponse` objects. The method would finally return an HTTP status code indicating success (200) with the converted response object as the value of the `ResponseEntity`."},"name":"listAllAmenities","code":"@Override\n  public ResponseEntity<Set<GetAmenityDetailsResponse>> listAllAmenities(\n      @PathVariable String communityId) {\n    Set<Amenity> amenities = amenitySDJpaService.listAllAmenities(communityId);\n    Set<GetAmenityDetailsResponse> response =\n        amenityApiMapper.amenitiesSetToAmenityDetailsResponseSet(amenities);\n    return ResponseEntity.ok(response);\n  }","location":{"start":106,"insert":106,"offset":" ","indent":2,"comment":{"start":83,"end":105}},"item_type":"method","length":8},{"id":"83b83abf-de8c-4592-ad4b-920275048dfe","ancestors":["9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"],"type":"function","description":"adds amenities to a community through JPA service, maps the result to AddAmenityResponse object and returns ResponseEntity with ok status or notFound status if error occurs.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to which the amenities are being added.","complex_type":false},{"name":"request","type_name":"AddAmenityRequest","description":"AddAmenityRequest object containing the amenities to be added to a community, which is used by the `amenitySDJpaService` to create new amenities in the community.\n\n* `communityId`: The ID of the community to which the amenities will be added.\n* `request.getAmenities()`: An array of `AddAmenityRequest.Amenity` objects representing the amenities to be added to the community. Each object in the array contains properties such as `name`, `description`, and `type`.","complex_type":true}],"returns":{"type_name":"AddAmenityResponse","description":"a `ResponseEntity` object with an `ok` status and a list of created amenities.\n\n* `ResponseEntity<AddAmenityResponse>`: This is an entity that contains a `AddAmenityResponse` object and an `HttpStatusCode`. The `AddAmenityResponse` object represents the result of adding amenities to a community, and it has several attributes, including `amenities`, which is a list of added amenities.\n* `map(function)`: This method is used to map the output of the `createAmenities()` method, which returns a list of amenities, to an `AddAmenityResponse` object. The `map()` method takes a function as its argument, which in this case is a lambda expression that extracts the `amenities` list from the returned list of amenities and returns it as a `AddAmenityResponse` object.\n* `orElse(function)`: This method is used to provide an alternative output if the `createAmenities()` method returns an empty list. The `orElse()` method takes a function as its argument, which in this case is a lambda expression that creates a `ResponseEntity` with an `HttpStatusCode` of `404` and builds it using the `build()` method.\n* `map(function)`: This method is used to map the output of the `orElse()` method to an `AddAmenityResponse` object. The `map()` method takes a function as its argument, which in this case is a lambda expression that extracts the `HttpStatusCode` and the `AddAmenityResponse` object from the returned `ResponseEntity` and returns them as a single output.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate AmenitySDJpaService amenitySDJpaService;\n\n@Override\npublic void addAmenitiesToCommunity(String communityId, AddAmenityRequest request) {\n    ResponseEntity<AddAmenityResponse> response =\n            this.amenitySDJpaService.addAmenityToCommunity(communityId, request);\n    // response contains the result of the operation\n}\n","description":"\nThis code would add amenities to a community based on the `communityId` and the `AddAmenityRequest`. The method would return an instance of `ResponseEntity<AddAmenityResponse>` that contains the result of the operation."},"name":"addAmenityToCommunity","code":"@Override\n  public ResponseEntity<AddAmenityResponse> addAmenityToCommunity(\n      @PathVariable String communityId,\n      @RequestBody AddAmenityRequest request) {\n    return amenitySDJpaService.createAmenities(request.getAmenities(), communityId)\n        .map(amenityList -> new AddAmenityResponse().amenities(amenityList))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":144,"insert":144,"offset":" ","indent":2,"comment":{"start":114,"end":143}},"item_type":"method","length":9},{"id":"8922992f-b675-4c84-494b-885b5148b83e","ancestors":["9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"],"type":"function","description":"deletes an amenity from the database based on its ID, returning a HTTP status code indicating the result of the operation.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity to be deleted.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the amenity was successfully deleted or not.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the amenity was successfully deleted and no content was returned in response.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the amenity could not be found, and the function returned an error message.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<Void> response = this.amenityController.deleteAmenity(\"1\");\nassertEquals(response.statusCode(), HttpStatus.NO_CONTENT);\n","description":"\nHere, the parameter \"1\" is passed to the method deleteAmenity, which represents the ID of an amenity to be deleted. The response variable is assigned to the result of calling this method, and then the HTTP status code of the response is asserted to be HttpStatus.NO_CONTENT. This indicates that the amenity was successfully deleted."},"name":"deleteAmenity","code":"@Override\n  public ResponseEntity deleteAmenity(@PathVariable String amenityId) {\n    boolean isAmenityDeleted = amenitySDJpaService.deleteAmenity(amenityId);\n    if (isAmenityDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":169,"insert":169,"offset":" ","indent":2,"comment":{"start":153,"end":168}},"item_type":"method","length":9},{"id":"b13be521-3774-6ca6-e644-dcca04bb8083","ancestors":["9a9ab5bc-e5e4-f98b-2c43-f5e9ca27c730"],"type":"function","description":"updates an amenity in the system by receiving a request with the amenity details and updating the amenity information in the database using the `amenitySDJpaService`. If the update is successful, it returns a `ResponseEntity` with a `HttpStatus.NO_CONTENT`.","params":[{"name":"amenityId","type_name":"String","description":"unique identifier of the amenity being updated.","complex_type":false},{"name":"request","type_name":"UpdateAmenityRequest","description":"UpdateAmenityRequest object that contains the details of the amenity to be updated.\n\n* `@Valid`: Indicates that the input request body must contain valid data according to the schema defined in the JPA annotation.\n* `@RequestBody`: Marks the request body as a serialized object containing the update amenity details.\n* `UpdateAmenityRequest` is the class that contains the attributes of the amenity to be updated, along with any additional information required for the update operation.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code indicating whether the update was successful or not.\n\n* `HttpStatus.NO_CONTENT`: This indicates that the amenity was successfully updated, and no additional content was returned in the response body.\n* `HttpStatus.NOT_FOUND`: This indicates that the amenity could not be found, and the function returned an error message.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<Void> response = updateAmenity(\"1\", new UpdateAmenityRequest()\n    .setName(\"Updated name\")\n    .setDescription(\"New description\")\n    .setType(AmenityType.FITNESS_CENTER)\n);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    System.out.println(\"The amenity was updated successfully\");\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    System.out.println(\"The amenity with the provided ID does not exist\");\n}\n","description":"\nIn this example, we first set the amenity ID to \"1\". Then, we create an instance of UpdateAmenityRequest and set its name, description, and type properties. Finally, we call the updateAmenity method and pass in the amenityId parameter as well as the UpdateAmenityRequest object. The response entity returned by the method is then checked for a status code of HttpStatus.NO_CONTENT, indicating that the amenity was updated successfully. If the response does not contain this status code, it means that the amenity with the provided ID does not exist."},"name":"updateAmenity","code":"@Override\n  public ResponseEntity<Void> updateAmenity(@PathVariable String amenityId,\n      @Valid @RequestBody UpdateAmenityRequest request) {\n    AmenityDto amenityDto = amenityApiMapper.updateAmenityRequestToAmenityDto(request);\n    amenityDto.setAmenityId(amenityId);\n    boolean isUpdated = amenitySDJpaService.updateAmenity(amenityDto);\n    if (isUpdated) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":205,"insert":205,"offset":" ","indent":2,"comment":{"start":178,"end":204}},"item_type":"method","length":12}]}}}
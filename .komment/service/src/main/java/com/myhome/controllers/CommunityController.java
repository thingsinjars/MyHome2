{"name":"CommunityController.java","path":"service/src/main/java/com/myhome/controllers/CommunityController.java","content":{"structured":{"description":"An API for managing communities and their associated houses, admins, and details. The API handles various CRUD (create, read, update, delete) operations on these entities, including listing all communities, listing community details, adding or removing admins or houses from a community, deleting a community, and updating community details. The code uses Spring WebFlux as the web framework and Spring Data JPA as the data access layer.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.CommunityController Pages: 1 -->\n<svg width=\"207pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 207.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.CommunityController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"199,-30 0,-30 0,0 199,0 199,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Community</text>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"148.5,-85 50.5,-85 50.5,-66 148.5,-66 148.5,-85\"/>\n<text text-anchor=\"middle\" x=\"99.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">CommunitiesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M99.5,-55.65C99.5,-47.36 99.5,-37.78 99.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96,-55.87 99.5,-65.87 103,-55.87 96,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"d5e94d83-38f9-a092-3341-a76ecb7ad225","ancestors":[],"type":"function","description":"TODO","name":"CommunityController","code":"@RequiredArgsConstructor\n@RestController\n@Slf4j\npublic class CommunityController implements CommunitiesApi {\n  private final CommunityService communityService;\n  private final CommunityApiMapper communityApiMapper;\n\n  @Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":56,"insert":56,"offset":" ","indent":0},"item_type":"class","length":152},{"id":"236a1b8d-9afc-12a6-9349-e605cc1dfa36","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"receives a `CreateCommunityRequest` from the client and creates a new community using the provided information. It then mappers the created community into a `CreateCommunityResponse` and returns it as a response entity with a status code of `CREATED`.","params":[{"name":"request","type_name":"CreateCommunityRequest","description":"CreateCommunityRequest object that contains the details of the community to be created, which is used by the method to create the community and return the response.\n\n* `@Valid` - The input is validated using bean validation.\n* `@RequestBody` - The input is passed as a JSON object in the request body.\n* `CreateCommunityRequest request` - The input represents a create community request, containing attributes such as name, description, and tags.","complex_type":true}],"returns":{"type_name":"CreateCommunityResponse","description":"a `CreateCommunityResponse` object containing the created community details.\n\n* `CreateCommunityResponse`: This class represents the response to the create community request, containing information about the created community.\n* `communityId`: A unique identifier for the created community.\n* `name`: The name of the created community.\n* `description`: A brief description of the created community.\n* `members`: A list of members in the created community.\n* `owners`: A list of owners in the created community.\n\nThe function returns a `ResponseEntity` with a status code of `CREATED` and the `CreateCommunityResponse` object as its body.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityService communityService;\n\n// Create a new community using CreateCommunityRequest as the body and the name as \"My Community\"\nCreateCommunityRequest request = new CreateCommunityRequest();\nrequest.setName(\"My Community\");\n\nResponseEntity<CreateCommunityResponse> response = createCommunity(request);\nassertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n","description":"\nThe above code will test the `createCommunity` method by creating a new community using the `CreateCommunityRequest` class and setting the name to \"My Community\". It then asserts that the response status is equal to `HttpStatus.CREATED`."},"name":"createCommunity","code":"@Override\n  public ResponseEntity<CreateCommunityResponse> createCommunity(@Valid @RequestBody\n      CreateCommunityRequest request) {\n    log.trace(\"Received create community request\");\n    CommunityDto requestCommunityDto =\n        communityApiMapper.createCommunityRequestToCommunityDto(request);\n    Community createdCommunity = communityService.createCommunity(requestCommunityDto);\n    CreateCommunityResponse createdCommunityResponse =\n        communityApiMapper.communityToCreateCommunityResponse(createdCommunity);\n    return ResponseEntity.status(HttpStatus.CREATED).body(createdCommunityResponse);\n  }","location":{"start":63,"insert":63,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"acc4c505-876d-32a3-414e-c22f9cca1e82","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"receives a `Pageable` object and lists all communities from the service, maps them to a REST API response, and returns it in a `ResponseEntity` with an HTTP status code of OK and the response body containing the listed communities.","params":[{"name":"pageable","type_name":"Pageable","description":"page request parameters, such as the number of communities to display per page, and enables the function to retrieve the requested number of communities from the database.\n\n* `@PageableDefault(size = 200)` - This annotation sets the default page size to 200.\n* `Pageable` - This interface defines the methods for navigating through a page of results, such as `getPageNumber()` and `getPageSize()`.","complex_type":true}],"returns":{"type_name":"GetCommunityDetailsResponse","description":"a list of community details in REST API format.\n\n* `GetCommunityDetailsResponse`: This class represents the response to the list community request. It has a field `getCommunities()` containing a set of `GetCommunityDetailsResponseCommunity` objects.\n* `GetCommunityDetailsResponseCommunity`: This class represents an individual community detail in the response. It has fields for the community ID, name, and description.","complex_type":true},"usage":{"language":"java","code":"Pageable page = PageRequest.of(0, 200); // create a new pageable object with a starting index of zero and size 200\nList<Community> communityDetails = communityService.listAll(page);\nSet<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n    communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\nGetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\nresponse.getCommunities().addAll(communityDetailsResponse);\n\nreturn ResponseEntity.status(HttpStatus.OK).body(response);\n","description":"\nThe method listAllCommunity is returning a list of all communities, with each community in the list being represented by a Community object.  It then maps each of these objects to a GetCommunityDetailsResponseCommunity object using communityApiMapper.communitySetToRestApiResponseCommunitySet().  These objects are then added to the response object GetCommunityDetailsResponse, which is returned as a ResponseEntity with a status of HttpStatus.OK."},"name":"listAllCommunity","code":"@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listAllCommunity(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all community\");\n\n    Set<Community> communityDetails = communityService.listAll(pageable);\n    Set<GetCommunityDetailsResponseCommunity> communityDetailsResponse =\n        communityApiMapper.communitySetToRestApiResponseCommunitySet(communityDetails);\n\n    GetCommunityDetailsResponse response = new GetCommunityDetailsResponse();\n    response.getCommunities().addAll(communityDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"39bf4f5d-459b-9eb3-8c48-4d5ff200b353","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"retrieves community details for a given ID using the `communityService` and maps the response to a `GetCommunityDetailsResponse`.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which details are requested.\n\n* `log.trace(\"Received request to get details about community with id[{}],\", communityId)`: This line logs a trace message indicating that a request has been received to retrieve details about a community with a specific ID. The ID is included in the message as a parameter.\n* `@PathVariable String communityId`: This annotation indicates that the `communityId` variable is passed in from the URL path and is of type `String`.\n* `communityService.getCommunityDetailsById(communityId)`: This line calls the `getCommunityDetailsById` method of the `communityService` class, passing in the `communityId` as a parameter. This method retrieves the details of a community with the provided ID.\n* `map(Function<T, ResponseEntity> mappingFunction)`: This line applies a mapping function to the result of the `getCommunityDetailsById` method. The function maps the resulting `Community` object to a `GetCommunityDetailsResponse` object.\n* `new GetCommunityDetailsResponse().communities(communities)`: This line creates a new instance of the `GetCommunityDetailsResponse` class and sets its `communities` field to the list of communities retrieved from the database.\n* `map(Function<T, ResponseEntity> mappingFunction)`: This line applies another mapping function to the result of the previous mapping function. The function maps the resulting `ResponseEntity` object to an instance of `ResponseEntity` with a status code of `OK`.\n\nTherefore, the `listCommunityDetails` function retrieves the details of a community with a specific ID and returns a `GetCommunityDetailsResponse` object containing the list of communities retrieved from the database.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing a successful response with a list of communities.\n\n* `ResponseEntity<GetCommunityDetailsResponse>`: This is the type of the returned response entity, which contains a list of community details in the `communities` field.\n* `GetCommunityDetailsResponse`: This class represents the response to the request for community details. It has a single field called `communities`, which is a list of community details.\n* `communities(List<Community>)': This method converts the list of community details returned by the service into a list of `GetCommunityDetailsResponse` objects, which are then returned in the response entity.\n* `map(Function<ResponseEntity<GetCommunityDetailsResponse>, ResponseEntity<GetCommunityDetailsResponse>> mapper)`: This line uses a lambda function to map the original response entity to a new one with the same type but with additional fields added. In this case, the lambda function takes the original response entity and returns a new one with the `communities` field set to a list of community details.\n* `map(Function<ResponseEntity<GetCommunityDetailsResponse>, ResponseEntity<GetCommunityDetailsResponse>> mapper)`: This line is similar to the previous one, but it maps the original response entity to a new one with the same type but with different fields removed. In this case, the lambda function takes the original response entity and returns a new one with the `communities` field removed.\n* `map(Function<ResponseEntity<GetCommunityDetailsResponse>, ResponseEntity<GetCommunityDetailsResponse>> mapper)`: This line is similar to the previous two, but it maps the original response entity to a new one with a different type. In this case, the lambda function takes the original response entity and returns a new one with the `communities` field set to a list of `Community` objects instead of a list of `GetCommunityDetailsResponse` objects.\n* `orElseGet(() -> ResponseEntity.notFound().build())`: This line provides an alternative way to handle the response if the original request fails. It returns a `ResponseEntity.notFound()` object, which is a standard response for a 404 status code.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityController communityController;\n\n@Test\npublic void shouldReturnCommunityDetails() {\n    ResponseEntity<GetCommunityDetailsResponse> response =\n            communityController.listCommunityDetails(\"1\");\n\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.OK);\n    assertThat(response.getBody().getCommunities())\n            .containsOnly(new GetCommunityDetailsResponseCommunity(\"community-name\", \"1\"));\n}\n","description":"\nThis test will check if the endpoint returns a 200 OK status and that it contains the community with ID 1."},"name":"listCommunityDetails","code":"@Override\n  public ResponseEntity<GetCommunityDetailsResponse> listCommunityDetails(\n      @PathVariable String communityId) {\n    log.trace(\"Received request to get details about community with id[{}]\", communityId);\n\n    return communityService.getCommunityDetailsById(communityId)\n        .map(communityApiMapper::communityToRestApiResponseCommunity)\n        .map(Arrays::asList)\n        .map(HashSet::new)\n        .map(communities -> new GetCommunityDetailsResponse().communities(communities))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":90,"insert":90,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"f70a9b30-8f50-369b-3b41-868dda05b1d8","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"receives a community ID and page number, retrieves the list of admins for that community from the database using `communityService.findCommunityAdminsById`, maps the results to a `HashSet`, converts the `HashSet` to a `ListCommunityAdminsResponse` object, and returns the response entity.","params":[{"name":"communityId","type_name":"String","description":"ID of the community for which the admins are to be listed.\n\n* `String communityId`: The ID of the community for which the admins need to be listed.\n\nThe function performs the following operations:\n\n1. Logs a trace message to track the request.\n2. Calls the `findCommunityAdminsById` method of the `communityService` to retrieve a list of admins for the specified community ID.\n3. Maps the result to a new `HashSet` object.\n4. Calls the `communityApiMapper` to map the `CommunityAdmin` objects to the desired REST API response format.\n5. Maps the resulting `List<CommunityAdmin>` to a `ListCommunityAdminsResponse` object.\n6. Returns an `ResponseEntity` with a status code of `OK`. If the call fails, it returns an `ResponseEntity` with a status code of `NOT FOUND`.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"page number and page size of the result list, which allows for pagination of the community admins.\n\n* `@PageableDefault(size = 200)` specifies that the pageable should have a default size of 200.\n* `Pageable` is an interface that provides methods for navigating through a sequence of objects, typically in a paginated manner.\n* `map()` method is used to map the deserialized input to a new object, which in this case is a `HashSet` containing the community admins.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a list of community admins.\n\n* `ResponseEntity<ListCommunityAdminsResponse>`: This is the overall response entity, which contains the list of community admins in its `admins` field.\n* `ListCommunityAdminsResponse`: This class represents the list of community admins, which includes a list of `CommunityAdmin` objects.\n* `CommunityAdmin`: This class represents a single community admin, including their ID, username, and email address.\n* `HashSet<CommunityAdmin>`: This is the container for the list of community admins, which is created using the `map()` method to transform the result of the `findCommunityAdminsById()` method into a list of `CommunityAdmin` objects.\n* `communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet`: This method is used to map the list of `CommunityAdmin` objects to a list of `ListCommunityAdminsResponse` objects, which is the desired output format for the function.","complex_type":true},"usage":{"language":"java","code":"// Example 1: List the admins for a community with id \"my_community\"\nResponseEntity<ListCommunityAdminsResponse> response = restTemplate.getForEntity(\n    \"/communities/my_community/admins\",\n    new ParameterizedTypeReference<>() {});\nif (response.getStatusCode() == HttpStatus.OK) {\n  ListCommunityAdminsResponse body = response.getBody();\n  Set<String> admins = body.getAdmins();\n  // Do something with the list of community admins here\n}\n","description":"\nIn this example, we are using a Spring `RestTemplate` to send an HTTP GET request to `/communities/my_community/admins`, which is the endpoint for listing the admins in the community with the ID \"my_community\". The `ParameterizedTypeReference` is used to specify that the response body should be deserialized into a `ListCommunityAdminsResponse` object.\nThis method call would return an HTTP 200 OK response if the community exists and has admins associated with it, and a `ListCommunityAdminsResponse` object in the response body containing the list of admin IDs for that community. If the community does not exist or has no admins associated with it, it would return an HTTP 404 NOT FOUND response."},"name":"listCommunityAdmins","code":"@Override\n  public ResponseEntity<ListCommunityAdminsResponse> listCommunityAdmins(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all admins of community with id[{}]\", communityId);\n\n    return communityService.findCommunityAdminsById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityAdminSetToRestApiResponseCommunityAdminSet)\n        .map(admins -> new ListCommunityAdminsResponse().admins(admins))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"164828a4-c8bf-71a4-d54c-d407ee705910","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"receives a community ID and pageable parameters, retrieves community houses from the service, maps them to a set, converts them to a REST API response, and returns an `ResponseEntity`.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community for which the user is requesting to list all houses.\n\n* `communityId`: A string representing the unique identifier for a community.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"default page request, allowing for pagination of results from the community service.\n\nThe `@PageableDefault(size = 200)` annotation on the `pageable` parameter sets the default page size to 200.","complex_type":true}],"returns":{"type_name":"ResponseEntityGetHouseDetailsResponse","description":"a `ResponseEntity` containing a list of houses belonging to the specified community.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This represents an entity that contains a response to the list community houses request. The response is in the form of a list of `CommunityHouseSet`, which are sets of `CommunityHouse` objects.\n* `GetHouseDetailsResponse`: This class represents the response to the list community houses request, which contains a list of `CommunityHouse` objects.\n* `houses`: This is a list of `CommunityHouse` objects that make up the response. Each object in the list contains information about a particular house in the community.\n* `Pageable`: This represents the pageable response, which allows for pagination of the list of houses. The `size` attribute specifies the number of houses to include on each page.","complex_type":true},"usage":{"language":"java","code":"GetHouseDetailsResponse response = communityApi.listCommunityHouses(communityId, pageable).getBody();\nSet<GetHouseDetailsResponseCommunity> houses = response.getCommunities();\nfor (GetHouseDetailsResponseCommunity house : houses) {\n    String houseId = house.getHouseId();\n}\n","description":"\nNote that the method returns a ResponseEntity which wraps the GetHouseDetailsResponse object. Therefore, to get the response body, we need to use the getBody() method. Afterwards, we can iterate over the Set of GetHouseDetailsResponseCommunity objects, where each object contains information about a particular house in the community. In this case, we are extracting the houseId of each house and printing it to the console."},"name":"listCommunityHouses","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> listCommunityHouses(\n      @PathVariable String communityId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses of community with id[{}]\", communityId);\n\n    return communityService.findCommunityHousesById(communityId, pageable)\n        .map(HashSet::new)\n        .map(communityApiMapper::communityHouseSetToRestApiResponseCommunityHouseSet)\n        .map(houses -> new GetHouseDetailsResponse().houses(houses))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":118,"insert":118,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"29fef72f-86b4-7bae-d64f-1eb678021626","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"adds admins to a community based on a request and returns a response entity with the updated community information.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community whose admins are being added.\n\n* `communityId`: A string representing the ID of the community for which admins are being added.","complex_type":true},{"name":"request","type_name":"AddCommunityAdminRequest","description":"AddCommunityAdminRequest object containing the information about the new admin users to be added to the community, which is validated and used to add them to the community.\n\n* `@Valid`: Indicates that the request body must contain a valid `AddCommunityAdminRequest` object.\n* `@PathVariable`: Represents the community ID passed as a path variable in the URL.\n* `@RequestBody`: Marks the `AddCommunityAdminRequest` object as the request body, which is deserialized from the JSON format.\n* `AddCommunityAdminRequest`: A Java class that contains properties for adding admins to a community. These properties may include the user IDs of the admins to be added, and other relevant details.","complex_type":true}],"returns":{"type_name":"AddCommunityAdminResponse","description":"a `ResponseEntity` with a status code of `CREATED` and a `AddCommunityAdminResponse` object containing the updated list of admins for the specified community.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response message with a status code and a body. The status code indicates whether the request was successful or not, while the body contains the response data.\n* `status`: This is an instance of the `HttpStatus` class, which represents the HTTP status code of the response. The possible values are 200 (OK), 400 (Bad Request), 401 (Unauthorized), etc.\n* `body`: This is an instance of the `AddCommunityAdminResponse` class, which contains the response data for the request. Specifically, it has a single attribute called `admins`, which is a set of strings representing the IDs of the newly added community administrators.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate CommunityController communityController;\n\n...\n\nSet<String> admins = new HashSet<>();\nadmins.add(\"userId1\");\nadmins.add(\"userId2\");\n\nAddCommunityAdminRequest addCommunityAdminsRequest = new AddCommunityAdminRequest();\naddCommunityAdminsRequest.setAdmins(admins);\n\nResponseEntity<AddCommunityAdminResponse> response = communityController.addCommunityAdmins(\"communityId\", addCommunityAdminsRequest);\n\nif (response.getStatusCode() == HttpStatus.CREATED) {\n    Set<String> adminsAdded = response.getBody().getAdmins();\n}\n","description":"\nHere, we have a community with ID \"communityId\". We create an instance of the request object `AddCommunityAdminRequest` and set its property `admins` to two user IDs: \"userId1\" and \"userId2\".\nWe then call the method `addCommunityAdmins` on our `CommunityController` with these inputs, expecting a response with status code 201 (created). If this happens, we extract the set of admins that were added from the response body. Note that in this case, we assume that only user IDs are relevant for us, and so we simply use `getBody().getAdmins()` to retrieve them as a `Set<String>`.\n\nDo not use the following:\n"},"name":"addCommunityAdmins","code":"@Override\n  public ResponseEntity<AddCommunityAdminResponse> addCommunityAdmins(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityAdminRequest request) {\n    log.trace(\"Received request to add admin to community with id[{}]\", communityId);\n    Optional<Community> communityOptional =\n        communityService.addAdminsToCommunity(communityId, request.getAdmins());\n    return communityOptional.map(community -> {\n      Set<String> adminsSet = community.getAdmins()\n          .stream()\n          .map(User::getUserId)\n          .collect(Collectors.toSet());\n      AddCommunityAdminResponse response = new AddCommunityAdminResponse().admins(adminsSet);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }).orElse(ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":132,"insert":132,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"e20a1c00-0766-c399-0f43-56d3f9018847","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"adds houses to a community identified by its ID. It receives a request with the houses to be added, converts them into a set of community house objects, and then adds them to the community using the `communityService`. If successful, it returns a response with the IDs of the added houses.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community to which the houses are being added.\n\n* `communityId`: A string representing the ID of the community to which houses will be added.\n\nThe function performs the following operations:\n\n1. Logs a trace message with the community ID.\n2. Maps the `AddCommunityHouseRequest` body's `houses` field to a set of `CommunityHouse` objects using the `communityApiMapper`.\n3. Calls the `addHousesToCommunity` method on the `communityService` with the community ID and the set of `CommunityHouse` objects as arguments.\n4. Checks if any houses were successfully added to the community by comparing the size of the `houseIds` set to 0. If it is not 0, a `AddCommunityHouseResponse` object is created with the `houseIds` set as its body and the response status code is set to `HttpStatus.CREATED`.\n5. Otherwise, the response status code is set to `HttpStatus.BAD_REQUEST`.","complex_type":true},{"name":"request","type_name":"AddCommunityHouseRequest","description":"AddCommunityHouseRequest object containing the house names to be added to the specified community, which is passed from the client side as a valid JSON request body.\n\n* `@Valid`: This annotation is used to indicate that the input request body must be valid according to the specified schema.\n* `@PathVariable`: This annotation is used to inject a path variable from the URL into the function as a String parameter. In this case, it is used to pass the `communityId` parameter from the URL.\n* `@RequestBody`: This annotation is used to indicate that the input request body must be serialized and passed to the function as a single entity.\n* `AddCommunityHouseRequest`: This is the class that contains the properties of the input request, which are described below:\n\t+ `getHouses()`: This method returns a set of `CommunityHouseName` objects, which represent the houses to be added to the community.\n\t+ `getCommunityId()`: This method returns the ID of the community where the houses will be added.\n\nThe function first logs a trace message indicating that it has received a request to add houses to a community with the specified ID. Then, it performs the following actions:\n\n1. It converts the set of `CommunityHouseName` objects returned by `request.getHouses()` into a set of `CommunityHouse` objects using the `communityApiMapper.communityHouseNamesSetToCommunityHouseSet()` method.\n2. It adds the houses to the community using the `communityService.addHousesToCommunity()` method, passing in the ID of the community and the set of `CommunityHouse` objects as arguments.\n3. If the addition was successful (i.e., the number of added houses is non-zero and the number of house IDs in the response is non-zero), it returns a `ResponseEntity` with a status code of `CREATED` and a body containing an `AddCommunityHouseResponse` object. Otherwise, it returns a `ResponseEntity` with a status code of `BAD_REQUEST`.","complex_type":true}],"returns":{"type_name":"AddCommunityHouseResponse","description":"a `ResponseEntity` object with a status code of `CREATED` and a `AddCommunityHouseResponse` object containing the added house IDs.\n\n* `AddCommunityHouseResponse`: This is the class that represents the response to the API request. It has a single property called `houses`, which is a set of strings representing the IDs of the added houses.\n* `HttpStatus`: This is an enumeration that represents the HTTP status code of the response. In this case, it can be either `CREATED` or `BAD_REQUEST`.\n* `ResponseEntity`: This is a class that represents the overall response to the API request. It has a `status` property and an `body` property, where the body contains the `AddCommunityHouseResponse` object.","complex_type":true},"usage":{"language":"java","code":"@Test\n  public void shouldAddCommunityHouse() {\n    // given\n    String communityId = \"1\";\n    List<CommunityHouseName> houseNames = new ArrayList<>();\n    houseNames.add(new CommunityHouseName(\"House-1\"));\n    AddCommunityHouseRequest request = new AddCommunityHouseRequest(houseNames);\n\n    // when\n    ResponseEntity<AddCommunityHouseResponse> response = communityController.addCommunityHouses(communityId, request);\n\n    // then\n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.CREATED);\n  }\n","description":"\nThis example tests the method addCommunityHouses from CommunityController by providing a community id and a list of house names in the AddCommunityHouseRequest object. It checks that the response status code is equal to HttpStatus.CREATED, indicating that the houses were successfully added to the community."},"name":"addCommunityHouses","code":"@Override\n  public ResponseEntity<AddCommunityHouseResponse> addCommunityHouses(\n      @PathVariable String communityId, @Valid @RequestBody\n      AddCommunityHouseRequest request) {\n    log.trace(\"Received request to add house to community with id[{}]\", communityId);\n    Set<CommunityHouseName> houseNames = request.getHouses();\n    Set<CommunityHouse> communityHouses =\n        communityApiMapper.communityHouseNamesSetToCommunityHouseSet(houseNames);\n    Set<String> houseIds = communityService.addHousesToCommunity(communityId, communityHouses);\n    if (houseIds.size() != 0 && houseNames.size() != 0) {\n      AddCommunityHouseResponse response = new AddCommunityHouseResponse();\n      response.setHouses(houseIds);\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    } else {\n      return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();\n    }\n  }","location":{"start":149,"insert":149,"offset":" ","indent":2},"item_type":"method","length":17},{"id":"625b9c9b-eec7-9799-e64e-8b8686730e99","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"deletes a house from a community based on the given community ID and house ID, returning a response entity indicating whether the operation was successful or not.","params":[{"name":"communityId","type_name":"String","description":"12-digit unique identifier of a community that contains the house to be removed.\n\n* `String communityId`: The unique identifier for a community.\n* `String houseId`: The unique identifier for a house within a community.","complex_type":true},{"name":"houseId","type_name":"String","description":"identifier of the house to be removed from the specified community.\n\n* `communityId`: The ID of the community that the house belongs to.\n* `houseId`: The unique identifier of the house to be removed from the community.","complex_type":true}],"returns":{"type_name":"ResponseEntityVoid","description":"a `ResponseEntity` object representing a successful deletion of a house from a community, with a status code of `noContent`.\n\n* `ResponseEntity<Void>`: The type of the output is a response entity with a void type.\n* `<Void>`: The type parameter of the response entity is void.\n* `.noContent()`: The `build()` method returns a response entity with a status code of 204 (No Content).\n* `.orElseGet()`: This method allows for alternative ways to return a response entity if the `getCommunityDetailsById` and `removeHouseFromCommunityByHouseId` methods return a null value.","complex_type":true},"usage":{"language":"java","code":"@Override\npublic ResponseEntity<Void> removeCommunityHouse(\n    @PathVariable String communityId, @PathVariable String houseId) {\n  log.trace(\"Received request to delete house with id[{}] from community with id[{}]\",\n      houseId, communityId);\n\n  Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n  return communityOptional.filter(\n      community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n      .map(removed -> ResponseEntity.noContent().<Void>build())\n      .orElseGet(() -> ResponseEntity.notFound().build());\n}\n","description":""},"name":"removeCommunityHouse","code":"@Override\n  public ResponseEntity<Void> removeCommunityHouse(\n      @PathVariable String communityId, @PathVariable String houseId\n  ) {\n    log.trace(\n        \"Received request to delete house with id[{}] from community with id[{}]\",\n        houseId, communityId);\n\n    Optional<Community> communityOptional = communityService.getCommunityDetailsById(communityId);\n\n    return communityOptional.filter(\n        community -> communityService.removeHouseFromCommunityByHouseId(community, houseId))\n        .map(removed -> ResponseEntity.noContent().<Void>build())\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":167,"insert":167,"offset":" ","indent":2},"item_type":"method","length":15},{"id":"2a6946dc-40c7-a28b-4b4d-e71d02eb0118","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"receives the community ID and admin ID as path variables, and uses the `communityService` to remove an admin from a community. If successful, it returns a HTTP NO_CONTENT status code, otherwise it returns a NOT_FOUND status code.","params":[{"name":"communityId","type_name":"String","description":"id of the community that the admin belongs to.\n\n* `communityId`: This is a string that represents the unique identifier for a community in the application. It could be a UUID or any other suitable identifier.","complex_type":true},{"name":"adminId","type_name":"String","description":"identifier of the admin to be removed from the community.\n\n* `communityId`: The ID of the community where the admin is to be removed.\n* `adminId`: The ID of the admin to be removed from the community.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` with a status code of either `NO_CONTENT` or `NOT_FOUND`, depending on whether the admin was successfully removed from the community.\n\n* `HttpStatus.NO_CONTENT`: This status code indicates that the admin was successfully removed from the community.\n* `HttpStatus.NOT_FOUND`: This status code indicates that the admin could not be found in the community, which means that either the admin ID or the community ID is invalid.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testRemoveAdminFromCommunity() {\n    String communityId = \"123\";\n    String adminId = \"456\";\n    \n    ResponseEntity<Void> response = communityService.removeAdminFromCommunity(communityId, adminId);\n    \n    assertThat(response.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);\n}\n","description":"\nThis test removes an admin from a community with the id \"123\" and checks that the response status code is equal to HttpStatus.NO_CONTENT (204)."},"name":"removeAdminFromCommunity","code":"@Override\n  public ResponseEntity<Void> removeAdminFromCommunity(\n      @PathVariable String communityId, @PathVariable String adminId) {\n    log.trace(\n        \"Received request to delete an admin from community with community id[{}] and admin id[{}]\",\n        communityId, adminId);\n    boolean adminRemoved = communityService.removeAdminFromCommunity(communityId, adminId);\n    if (adminRemoved) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":183,"insert":183,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"a4872a7a-c4cc-a4b8-624e-aef68901a1a8","ancestors":["d5e94d83-38f9-a092-3341-a76ecb7ad225"],"type":"function","description":"deletes a community identified by the `communityId` parameter, returning a `ResponseEntity` object indicating whether the deletion was successful or not.","params":[{"name":"communityId","type_name":"String","description":"ID of the community to be deleted.\n\n* `communityId`: A string representing the ID of the community to be deleted.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a HTTP NO_CONTENT status code if the community was successfully deleted, and a NOT_FOUND status code otherwise.\n\n* HttpStatus.NO_CONTENT: This indicates that the community was successfully deleted.\n* HttpStatus.NOT_FOUND: This indicates that the specified community could not be found.","complex_type":true},"usage":{"language":"java","code":"@Test\n  void deleteCommunity_deletesGivenCommunity() {\n    String communityId = \"test-community\";\n\n    ResponseEntity<Void> response = controller.deleteCommunity(communityId);\n\n    assertThat(response).isEqualTo(ResponseEntity.status(HttpStatus.NO_CONTENT).build());\n  }\n","description":""},"name":"deleteCommunity","code":"@Override\n  public ResponseEntity<Void> deleteCommunity(@PathVariable String communityId) {\n    log.trace(\"Received delete community request\");\n    boolean isDeleted = communityService.deleteCommunity(communityId);\n    if (isDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":197,"insert":197,"offset":" ","indent":2},"item_type":"method","length":10}]}}}
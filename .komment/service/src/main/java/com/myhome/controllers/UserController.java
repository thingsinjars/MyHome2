{"name":"UserController.java","path":"service/src/main/java/com/myhome/controllers/UserController.java","content":{"structured":{"description":"A `UserController` that handles user-related operations for an API. It provides endpoints for creating new users, listing all users, getting details of a specific user, resetting a user's password, and confirming or resending an email confirmation for a user's account. The controller uses dependencies from packages such as Spring Data JPA, Spring Validation, Lombok, and Slf4j.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.UserController Pages: 1 -->\n<svg width=\"172pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 172.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.UserController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-30 0,-30 0,0 164,0 164,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.User</text>\n<text text-anchor=\"middle\" x=\"82\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"112,-85 52,-85 52,-66 112,-66 112,-85\"/>\n<text text-anchor=\"middle\" x=\"82\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">UsersApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M82,-55.65C82,-47.36 82,-37.78 82,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"78.5,-55.87 82,-65.87 85.5,-55.87 78.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"74291a74-6501-1bbe-c643-448666d3497d","ancestors":[],"type":"function","description":"is a REST controller that provides endpoints for managing users, houses, and email confirmation. It receives requests to create new users, list all users, get details of a specific user, reset passwords, and confirm or resend email confirmations. The class uses dependency injection and maps the responses from the service layers to the corresponding REST API responses.","name":"UserController","code":"@RestController\n@Slf4j\n@RequiredArgsConstructor\npublic class UserController implements UsersApi {\n\n  private final UserService userService;\n  private final UserApiMapper userApiMapper;\n  private final HouseService houseService;\n  private final HouseMemberMapper houseMemberMapper;\n\n  @Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }\n\n  @Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }\n}","location":{"start":50,"insert":50,"offset":" ","indent":0,"comment":{"start":46,"end":49}},"item_type":"class","length":96},{"id":"377e61a7-757a-b680-944b-504b6f842cd6","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"handles a `CreateUserRequest` and creates a new user in the system, mapping the user entity to a `CreateUserResponse`. If the creation is successful, it returns a `ResponseEntity` with a status code of `CREATED`, otherwise it returns a `ResponseEntity` with a status code of `CONFLICT`.","params":[{"name":"request","type_name":"CreateUserRequest","description":"`CreateUserRequest` object passed to the method, which contains the user's details for creation.\n\n* `@Valid`: This annotation indicates that the input object `request` is validated by the framework.\n* `CreateUserRequest`: This is the class that represents the request body sent by the client. It contains attributes such as `username`, `email`, `password`, and `nickname`.\n* `userApiMapper`: This is an injected class that performs mapping between the request body and the desired response format.\n* `UserDto`: This is a class representing the user entity, which is created or updated in the function.\n* `userService`: This is an injected class that provides the functionality to create or update a user.\n* `Optional<UserDto>`: This represents the result of calling `createUser` on the `userService`, which may return `None` if the user already exists.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of `HTTP_CREATED` and a body containing a `CreateUserResponse`.\n\n* `ResponseEntity<CreateUserResponse>` is a generic class that represents a response entity with a status code and a body. The status code indicates whether the request was successful (201 Created) or not (409 Conflict).\n* `CreateUserResponse` is a class that contains the data returned to the client after a successful sign-up operation. It has properties for the user's ID, name, email, and password.\n* `map` method is used to transform the `Optional<UserDto>` into a `ResponseEntity` with a status code and a body. If the `Optional` contains a value, the method returns a response entity with a status code of 201 Created and a body containing the transformed `CreateUserResponse`. Otherwise, it returns a response entity with a status code of 409 Conflict.\n* `orElseGet` method is used to provide an alternative response entity if the `map` method does not produce one. In this case, the alternative response entity has a status code of 409 Conflict.","complex_type":true},"usage":{"language":"java","code":"UserDto requestUserDto = new UserDto();\nrequestUserDto.setId(\"12345\");\nrequestUserDto.setUsername(\"bobsmith\");\nrequestUserDto.setEmail(\"bob@example.com\");\nrequestUserDto.setPassword(\"password\");\nCreateUserRequest request = new CreateUserRequest();\nrequest.setUser(requestUserDto);\nResponseEntity<CreateUserResponse> response = \n    userService.signUp(request);\n","description":"\nThe method signUp in the User Service is called, passing a CreateUserRequest object as input. The CreateUserRequest contains a UserDto object that has fields for id, username, email, and password. The createUser method creates a new user with the given information and returns an Optional containing the newly created UserDto object if successful, or an empty Optional otherwise. The response is then returned to the caller."},"name":"signUp","code":"@Override\n  public ResponseEntity<CreateUserResponse> signUp(@Valid CreateUserRequest request) {\n    log.trace(\"Received SignUp request\");\n    UserDto requestUserDto = userApiMapper.createUserRequestToUserDto(request);\n    Optional<UserDto> createdUserDto = userService.createUser(requestUserDto);\n    return createdUserDto\n        .map(userDto -> {\n          CreateUserResponse response = userApiMapper.userDtoToCreateUserResponse(userDto);\n          return ResponseEntity.status(HttpStatus.CREATED).body(response);\n        })\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.CONFLICT).build());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"374b050e-5023-96b4-5942-947b53dcc9f1","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"receives a `Pageable` parameter and returns a response with a list of users fetched from the user service and mapped to the API response format using the `userApiMapper`.","params":[{"name":"pageable","type_name":"Pageable","description":"pagination information for listing all users, allowing the listAllUsers method to retrieve a subset of user details from the database based on the specified page number and page size.\n\n* `log.trace(\"Received request to list all users\")` - This line logs a trace message indicating that the function has received a request to list all users.\n* `Set<User> userDetails = userService.listAll(pageable);` - This line calls the `listAll` method of the `userService` class, passing in `pageable` as a parameter. The `listAll` method returns a set of `User` objects representing all users in the system.\n* `Set<GetUserDetailsResponseUser> userDetailsResponse = userApiMapper.userSetToRestApiResponseUserSet(userDetails);` - This line maps the `User` objects returned by the `listAll` method to a set of `GetUserDetailsResponseUser` objects using the `userApiMapper` class. The resulting `userDetailsResponse` set represents the users in the system in a format suitable for return as part of the API response.\n* `GetUserDetailsResponse response = new GetUserDetailsResponse();` - This line creates a new instance of the `GetUserDetailsResponse` class, which is the response object for this API endpoint.\n* `response.setUsers(userDetailsResponse);` - This line sets the `users` field of the `GetUserDetailsResponse` object to the `userDetailsResponse` set, thereby populating the response with the mapped users.","complex_type":true}],"returns":{"type_name":"GetUserDetailsResponse","description":"a list of user details in REST API format.\n\n* `response`: This is the main output of the function, which contains a set of `GetUserDetailsResponseUser` objects representing all the users in the system.\n* `users`: This is a Set containing the user details, where each user detail is represented as a `GetUserDetailsResponseUser` object.\n* `HttpStatus.OK`: This is the status code of the response, indicating that the request was successful.","complex_type":true},"usage":{"language":"java","code":"// Invoke the method using a Pageable object with default page and size values\nPageable pageable = new Pageable();\nGetUserDetailsResponse response = userController.listAllUsers(pageable);\n\n// Print the total number of users found, along with the users in the current page\nSystem.out.println(\"Total Number of Users: \" + response.getTotalElements());\nSystem.out.println(\"Number of Users in Page: \" + response.getUsers().size());\nfor (GetUserDetailsResponseUser user : response.getUsers()) {\n    System.out.println(user.getEmail() + \", \" + user.getName());\n}\n","description":""},"name":"listAllUsers","code":"@Override\n  public ResponseEntity<GetUserDetailsResponse> listAllUsers(Pageable pageable) {\n    log.trace(\"Received request to list all users\");\n\n    Set<User> userDetails = userService.listAll(pageable);\n    Set<GetUserDetailsResponseUser> userDetailsResponse =\n        userApiMapper.userSetToRestApiResponseUserSet(userDetails);\n\n    GetUserDetailsResponse response = new GetUserDetailsResponse();\n    response.setUsers(userDetailsResponse);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":73,"insert":73,"offset":" ","indent":2,"comment":null},"item_type":"method","length":13},{"id":"14615890-e2e6-2599-6341-a977bcbdb81d","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"receives a user ID and returns a `ResponseEntity` with a `GetUserDetailsResponseUser` object containing user details or a `HttpStatus.NOT_FOUND` status code if the user is not found.","params":[{"name":"userId","type_name":"String","description":"ID of the user for whom the details are being requested.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with an HTTP status code of OK and a body containing the user details.\n\n* The response entity is of type `ResponseEntity`, which indicates that it contains a result and an HTTP status code.\n* The status code is set to `HttpStatus.OK`, indicating that the request was successful.\n* The body of the response entity contains an instance of `GetUserDetailsResponse`, which represents the details of the user requested. This class has a single property, `userDto`, which is a `UserDTO` object representing the user's details.","complex_type":true},"usage":{"language":"java","code":"String userId = \"123456789\"; // replace with a valid user ID\nResponseEntity<GetUserDetailsResponseUser> responseEntity = userController.getUserDetails(userId);\n","description":""},"name":"getUserDetails","code":"@Override\n  public ResponseEntity<GetUserDetailsResponseUser> getUserDetails(String userId) {\n    log.trace(\"Received request to get details of user with Id[{}]\", userId);\n\n    return userService.getUserDetails(userId)\n        .map(userApiMapper::userDtoToGetUserDetailsResponse)\n        .map(response -> ResponseEntity.status(HttpStatus.OK).body(response))\n        .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).build());\n  }","location":{"start":87,"insert":87,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"5cfe3e05-077a-1487-0d4b-468a86efc69d","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"processes password reset requests. It checks if the action is FORGOT or RESET, and if the request is valid, it calls the corresponding method in the `userService` to reset the password. If the password is successfully reset, it returns a `ResponseEntity` with a status code of `OK`. Otherwise, it returns a `ResponseEntity` with a status code of `BAD_REQUEST`.","params":[{"name":"action","type_name":"String","description":"password action type, which determines the corresponding action to be taken by the method.","complex_type":false},{"name":"forgotPasswordRequest","type_name":"ForgotPasswordRequest","description":"Forgot Password Request object that contains the user's email address and other information required to initiate the password reset process.\n\n* `@NotNull`: The `action` parameter must not be null.\n* `@Valid`: The `forgotPasswordRequest` parameter must be validated by the framework.\n* `@RequestBody`: The `forgotPasswordRequest` parameter is passed as a request body in the HTTP request.\n* `ForgotPasswordRequest`: This class represents the request body for resetting a user's password. It contains properties such as:\n\t+ `email`: The email address of the user to whom the password should be reset.\n\t+ `password`: The new password to be set.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status code of either `ok` or `badRequest`, depending on the success of the password reset process.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a response to a RESTful API request. It contains information about the status of the response, such as whether it was successful or not, and any additional details that may be useful for handling the response.\n* `ok`: This is a boolean attribute of the `ResponseEntity` class, indicating whether the response was successful (i.e., true) or not (i.e., false).\n* `build`: This is a method of the `ResponseEntity` class that returns a new instance of the `ResponseEntity` class with the specified attributes. In this case, it returns a new instance of the `ResponseEntity` class with the `ok` attribute set to true.","complex_type":true},"usage":{"language":"java","code":"public class UserControllerTest {\n    @Autowired\n    private MockMvc mockMvc;\n    \n    @MockBean\n    private UserService userService;\n    \n    @Test\n    void testUsersPasswordPost() throws Exception {\n        // given\n        ForgotPasswordRequest request = new ForgotPasswordRequest();\n        \n        String action = \"FORGOT\";\n        boolean result = true;\n        PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n        if (parsedAction == PasswordActionType.FORGOT) {\n            result = true;\n            userService.requestResetPassword(request);\n        } else if (parsedAction == PasswordActionType.RESET) {\n            result = userService.resetPassword(request);\n        }\n        \n        // when\n        mockMvc.perform(post(\"/users/password\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"action\", action)\n                .content(new ObjectMapper().writeValueAsString(request)))\n            .andExpect(status().isOk());\n    }\n}\n","description":""},"name":"usersPasswordPost","code":"@Override\n  public ResponseEntity<Void> usersPasswordPost(@NotNull @Valid String action, @Valid @RequestBody ForgotPasswordRequest forgotPasswordRequest) {\n    boolean result = false;\n    PasswordActionType parsedAction = PasswordActionType.valueOf(action);\n    if (parsedAction == PasswordActionType.FORGOT) {\n      result = true;\n      userService.requestResetPassword(forgotPasswordRequest);\n    } else if (parsedAction == PasswordActionType.RESET) {\n      result = userService.resetPassword(forgotPasswordRequest);\n    }\n    if (result) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":97,"insert":97,"offset":" ","indent":2,"comment":null},"item_type":"method","length":16},{"id":"997524e3-4cc4-f396-8642-fd756fab0f03","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"receives a user ID and a pageable parameter, retrieves the list of house members for all houses associated with the given user ID, maps them to a `HashSet`, and returns a `ResponseEntity` object representing the list of house members.","params":[{"name":"userId","type_name":"String","description":"user for whom the list of housemates is being requested.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page number and page size for fetching a subset of the list of house members, allowing for efficient pagination and result set retrieval.\n\n* `userId`: The ID of the user whose houses are to be listed.\n* `pageable`: A `Pageable` object representing the pagination parameters for listing all housemates. The various properties and attributes of `pageable` include:\n\t+ `pageNumber`: The current page number being requested (optional)\n\t+ `pageSize`: The number of housemates to be listed per page (optional)\n\t+ `sort`: The field by which the list of housemates should be sorted (optional)\n\t+ `direction`: The direction of the sort order (optional)","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a list of `HouseMemberSet` objects, representing all members of all houses belonging to the specified user.\n\n* `ResponseEntity`: This is the type of the outermost component of the return value, indicating whether the call was successful or not. In this case, it is `ok`, indicating a successful response.\n* `ListHouseMembersResponse`: This is the inner component of the return value, representing the list of house members returned by the function. It contains a list of `HouseMemberSet` objects, which are the actual data returned by the function.\n* `members`: This is a list of `HouseMemberSet` objects, each representing a set of house members for a particular house. The `House Member Set` class has several properties, including the `houseId`, `userId`, and `members` fields.\n\nOverall, the `listAllHousemates` function returns a list of house members belonging to the user with the specified ID, organized into sets for each house.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }\n","description":""},"name":"listAllHousemates","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllHousemates(String userId, Pageable pageable) {\n    log.trace(\"Received request to list all members of all houses of user with Id[{}]\", userId);\n\n    return houseService.listHouseMembersForHousesOfUserId(userId, pageable)\n            .map(HashSet::new)\n            .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n            .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n            .map(ResponseEntity::ok)\n            .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2,"comment":null},"item_type":"method","length":11},{"id":"e265dcdb-9505-28b9-7c43-23340a51e572","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"confirms an email address for a user using a confirmation token provided by the server. If the email is confirmed, a `ResponseEntity.ok()` is returned. Otherwise, a `ResponseEntity.badRequest()` is returned.","params":[{"name":"userId","type_name":"String","description":"identity of the user whose email confirmation is being checked.","complex_type":false},{"name":"emailConfirmToken","type_name":"String","description":"token sent to the user's email address for confirmation of their email address.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object with a status of either `ok` or `badRequest`, depending on whether the email confirmation was successful or not.\n\nThe `ResponseEntity` object is an instance of the `ResponseEntity` class, which represents a response entity in a web application. The `ok` method returns a ResponseEntity with a status code of 200 (OK), indicating that the email confirmation was successful. On the other hand, the `badRequest` method returns a ResponseEntity with a status code of 400 (Bad Request), indicating that there was an error in processing the request.\n\nThe `Void` parameter represents the lack of any content returned by the function. It is a type parameter passed to the `ResponseEntity` constructor, indicating that no content is being returned.","complex_type":true},"usage":{"language":"java","code":"UserController userController = new UserController(userService, userApiMapper, houseService);\nString userId = \"abc123\"; // ID of the user to confirm email for\nString emailConfirmToken = \"xyz789\"; // Confirmation token sent in an email\nResponseEntity<Void> response = userController.confirmEmail(userId, emailConfirmToken);\n","description":""},"name":"confirmEmail","code":"@Override\n  public ResponseEntity<Void> confirmEmail(String userId, String emailConfirmToken) {\n    boolean emailConfirmed = userService.confirmEmail(userId, emailConfirmToken);\n    if(emailConfirmed) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":126,"insert":126,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"fc137a95-9142-40a3-2744-b954d4305fb7","ancestors":["74291a74-6501-1bbe-c643-448666d3497d"],"type":"function","description":"resends an email confirmation to a user if one was previously sent, and returns a response entity indicating the result of the operation.","params":[{"name":"userId","type_name":"String","description":"identifier of the user for whom an email confirmation link is to be resent.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"an `OK` response entity indicating successful email resending for the specified user ID.\n\n* `ResponseEntity`: This is an object that represents the response of the API. It has several attributes, including the status code (either 200 for success or a non-200 status code for failure), the body of the response (which can be empty or contain data depending on the response), and the headers of the response.\n* `ok`: This is a boolean attribute that indicates whether the resending of the email confirmation was successful or not. If `emailConfirmResend` is true, then the response entity has an `statusCode` of 200 and an empty body. Otherwise, it has a status code of 400 (bad request) and an empty body.\n* `build`: This is a method that creates a new instance of `ResponseEntity` with the specified attributes. It is called automatically when the function returns an instance of `ResponseEntity`.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<Void> response = userController.resendConfirmEmailMail(userId);\nif (response.getStatusCode() == HttpStatus.OK) {\n    System.out.println(\"Email confirmation resent successfully\");\n} else {\n    System.out.println(\"Error resending email confirmation\");\n}\n","description":""},"name":"resendConfirmEmailMail","code":"@Override\n  public ResponseEntity<Void> resendConfirmEmailMail(String userId) {\n    boolean emailConfirmResend = userService.resendEmailConfirm(userId);\n    if(emailConfirmResend) {\n      return ResponseEntity.ok().build();\n    } else {\n      return ResponseEntity.badRequest().build();\n    }\n  }","location":{"start":136,"insert":136,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9}]}}}
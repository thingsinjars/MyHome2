{"name":"AuthenticationController.java","path":"service/src/main/java/com/myhome/controllers/AuthenticationController.java","content":{"structured":{"description":"An `AuthenticationController` class that implements `AuthenticationApi`, a Spring Boot REST controller responsible for handling login requests. The class has a single method, `login()`, which takes a valid `LoginRequest` object as input and returns a `ResponseEntity<Void>` object with the user ID and JWT token in the HTTP headers. The `createLoginHeaders()` method is used to generate the HTTP headers based on the `AuthenticationData` object returned by the `authenticationService.login()` method.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.AuthenticationController Pages: 1 -->\n<svg width=\"221pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 221.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.AuthenticationController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"213,-30 0,-30 0,0 213,0 213,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Authentication</text>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"158.5,-85 54.5,-85 54.5,-66 158.5,-66 158.5,-85\"/>\n<text text-anchor=\"middle\" x=\"106.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthenticationApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M106.5,-55.65C106.5,-47.36 106.5,-37.78 106.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"103,-55.87 106.5,-65.87 110,-55.87 103,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"09b5bd6d-7823-0fa4-754e-08b5ad87a0b7","ancestors":[],"type":"function","description":"is a Spring Boot REST controller that implements the AuthenticationApi interface. It handles login requests and returns an HTTP response with the user ID and JWT token for authentication. The class has one method, `login()`, which takes a valid `LoginRequest` object as input and returns a ResponseEntity with the user ID and JWT token.","name":"AuthenticationController","code":"@RequiredArgsConstructor\n@RestController\npublic class AuthenticationController implements AuthenticationApi {\n\n  private final AuthenticationService authenticationService;\n\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n\n  private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }\n}","location":{"start":13,"insert":13,"offset":" ","indent":0,"comment":null},"item_type":"class","length":21},{"id":"116b4777-f5c0-8489-274f-fe9776d0f3fb","ancestors":["09b5bd6d-7823-0fa4-754e-08b5ad87a0b7"],"type":"function","description":"authenticates a user using the provided login request data and returns an `ResponseEntity` with a `Void` body and custom headers containing authentication data.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"authentication request containing the user credentials for authentication verification and validation by the `authenticationService`.\n\n* The `@Valid` annotation on the `LoginRequest` parameter indicates that the object must be validated before it can be processed by the method.\n* The `authenticationService` field is used to call the `login` method, which takes the `LoginRequest` object as a parameter and returns an authentication data object.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing an `OK` status and custom headers generated based on the `AuthenticationData` result.\n\n* `ResponseEntity`: This is an instance of a class that represents a response entity, which is a general-purpose response class in Spring WebFlux. It contains information about the status code, headers, and body of the response.\n* `ok()`: This is a method that returns a `ResponseEntity` instance with a status code of 200 (OK), indicating that the login request was successful.\n* `headers()`: This is a method that returns a list of headers, which are key-value pairs that provide additional information about the response. In this case, the headers contain information about the authentication data.\n* `build()`: This is a method that builds the response entity by combining the status code, headers, and body.\n\nOverall, the output of the `login` function is a successful response with information about the authentication data.","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class AuthenticationController implements AuthenticationApi {\n  @Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }\n}\n","description":""},"name":"login","code":"@Override\n  public ResponseEntity<Void> login(@Valid LoginRequest loginRequest) {\n    final AuthenticationData authenticationData = authenticationService.login(loginRequest);\n    return ResponseEntity.ok()\n        .headers(createLoginHeaders(authenticationData))\n        .build();\n  }","location":{"start":19,"insert":19,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7},{"id":"224a2b39-e5e9-c49d-4e4e-89b1a12ce74e","ancestors":["09b5bd6d-7823-0fa4-754e-08b5ad87a0b7"],"type":"function","description":"generates HTTP headers for login authentication, adding user ID and JWT token to the headers.","params":[{"name":"authenticationData","type_name":"AuthenticationData","description":"login data of a user, providing the user ID and JWT token for authentication purposes.\n\n* `getUserId()`: Retrieves the user ID associated with the authentication data.\n* `getJwtToken()`: Retrieves the JWT token issued for the user ID.","complex_type":true}],"returns":{"type_name":"HttpHeaders","description":"a set of HTTP headers containing the user ID and JWT token for authentication purposes.\n\n* `HttpHeaders`: This is an instance of the `HttpHeaders` class in Java, which contains a collection of HTTP headers.\n* `userId`: The value of this header is a string representing the user ID associated with the login credentials provided in the `authenticationData` parameter.\n* `token`: The value of this header is a string representing the JWT token issued to the user for authentication purposes.","complex_type":true},"usage":{"language":"java","code":"private void Example() {\n    AuthenticationData authenticationData = new AuthenticationData(\"user\", \"token\");\n    HttpHeaders headers = createLoginHeaders(authenticationData);\n}\n","description":"\nIn this example, a user with the id 'user' and jwt token 'token' is created. Then, the method createLoginHeaders is called with the object as an argument. The returned value, headers, contains two headers, the user id header with the value of \"userId\" and the JWT token header with the value of \"token\"."},"name":"createLoginHeaders","code":"private HttpHeaders createLoginHeaders(AuthenticationData authenticationData) {\n    final HttpHeaders httpHeaders = new HttpHeaders();\n    httpHeaders.add(\"userId\", authenticationData.getUserId());\n    httpHeaders.add(\"token\", authenticationData.getJwtToken());\n    return httpHeaders;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2,"comment":null},"item_type":"method","length":6}]}}}
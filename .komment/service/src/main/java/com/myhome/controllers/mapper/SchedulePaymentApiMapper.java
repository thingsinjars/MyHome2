{"name":"SchedulePaymentApiMapper.java","path":"service/src/main/java/com/myhome/controllers/mapper/SchedulePaymentApiMapper.java","content":{"structured":{"description":"An interface named SchedulePaymentApiMapper that implements MapStruct and Lombok annotations for mapping between different types of payment requests and payment responses. The code provides various methods for mapping payments, including enriching the payment request with user details, mapping the payment to a payment response, and setting user fields in the payment response. Additionally, the code defines several named mappings and expressions for mapping various field types. Overall, the code is used for mapping between different types of payment requests and responses in an API context.","items":[{"id":"697d6958-331d-9281-d54e-626cc4e03a16","ancestors":[],"type":"function","description":"provides a mapping between various request and response objects for schedule payments, including PaymentDto, EnrichedSchedulePaymentRequest, SchedulePaymentResponse, UserDto, HouseMemberDto, and others.","name":"SchedulePaymentApiMapper","code":"@Mapper\npublic interface SchedulePaymentApiMapper {\n\n  @Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }\n\n  @Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n\n  @Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }\n\n  @Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }\n\n  @Mappings({\n      @Mapping(source = \"adminId\", target = \"admin\", qualifiedByName = \"adminIdToAdmin\"),\n      @Mapping(source = \"memberId\", target = \"member\", qualifiedByName = \"memberIdToMember\")\n  })\n  PaymentDto schedulePaymentRequestToPaymentDto(SchedulePaymentRequest schedulePaymentRequest);\n\n  PaymentDto enrichedSchedulePaymentRequestToPaymentDto(\n      EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest);\n\n  @AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }\n\n  Set<MemberPayment> memberPaymentSetToRestApiResponseMemberPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"memberId\", expression = \"java(payment.getMember().getMemberId())\")\n  MemberPayment paymentToMemberPayment(Payment payment);\n\n  Set<AdminPayment> adminPaymentSetToRestApiResponseAdminPaymentSet(\n      Set<Payment> memberPaymentSet);\n\n  @Mapping(target = \"adminId\", expression = \"java(payment.getAdmin().getUserId())\")\n  AdminPayment paymentToAdminPayment(Payment payment);\n\n  @Mappings({\n      @Mapping(source = \"admin\", target = \"adminId\", qualifiedByName = \"adminToAdminId\"),\n      @Mapping(source = \"member\", target = \"memberId\", qualifiedByName = \"memberToMemberId\")\n  })\n  SchedulePaymentResponse paymentToSchedulePaymentResponse(PaymentDto payment);\n\n  default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }\n\n  default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }\n\n  default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }\n}","location":{"start":41,"insert":41,"offset":" ","indent":0},"item_type":"interface","length":103},{"id":"9e3ac240-4154-d69a-494c-974edd37620e","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"converts a `String` representing an admin ID into a `UserDto` object with the admin's ID as its `userId`.","params":[{"name":"adminId","type_name":"String","description":"ID of an administrator for which an `AdminDto` object is to be constructed.\n\n* `userId`: This field contains the user ID of the admin in question.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object with a `userId` field set to the given `adminId`.\n\n* `userId`: A String attribute that contains the admin ID passed as an argument to the function.\n* Built using a `UserDto.builder()` method, which creates a new instance of the `UserDto` class with the specified attributes.","complex_type":true},"usage":{"language":"java","code":"UserDto user = adminIdToAdminDto(\"123456789\");\nSystem.out.println(user);  // Output: UserDto(userId=123456789)\n","description":""},"name":"adminIdToAdminDto","code":"@Named(\"adminIdToAdmin\")\n  static UserDto adminIdToAdminDto(String adminId) {\n    return UserDto.builder()\n        .userId(adminId)\n        .build();\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"a1e07a5b-0181-5a9d-994b-1250627b0412","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"converts a `memberId` string into an instance of `HouseMemberDto`.","params":[{"name":"memberId","type_name":"String","description":"unique identifier of a member within the scope of the `HouseMemberDto` class.\n\n* `memberId`: A String attribute representing the unique identifier for a member in the House.","complex_type":true}],"returns":{"type_name":"HouseMemberDto","description":"a `HouseMemberDto` object containing the `memberId` property.\n\n* memberId: This is a String attribute that contains the member ID.","complex_type":true},"usage":{"language":"java","code":"@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }\n","description":""},"name":"memberIdToMemberDto","code":"@Named(\"memberIdToMember\")\n  static HouseMemberDto memberIdToMemberDto(String memberId) {\n    return new HouseMemberDto()\n        .memberId(memberId);\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"21715b5e-914a-0c86-8d45-ebcc313b89a4","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"converts a `UserDto` object to its corresponding `UserId`.","params":[{"name":"userDto","type_name":"UserDto","description":"user object containing the user ID, which is returned as the output of the `adminToAdminId` function.\n\n* `UserId`: This field contains the user ID of the administrative user.","complex_type":true}],"returns":{"type_name":"String","description":"a string representing the user ID of the admin entity.\n\n* The output is a string representing a user ID.\n* The user ID is obtained by using the `getUserId()` method of the `UserDto` object passed as an argument to the function.\n* The `UserDto` object contains information about a user, including their ID.\n* The `adminToAdminId` function extracts the user ID from the `UserDto` object and returns it as a string.","complex_type":true},"usage":{"language":"java","code":"UserDto userDto = new UserDto();\nuserDto.setUserId(\"admin123\");\nString adminId = adminToAdminId(userDto); // outputs \"admin123\"\n","description":""},"name":"adminToAdminId","code":"@Named(\"adminToAdminId\")\n  static String adminToAdminId(UserDto userDto) {\n    return userDto.getUserId();\n  }","location":{"start":57,"insert":57,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"234c07cb-cb52-6d91-b544-a7eae2fd22b7","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"maps a `HouseMemberDto` object to its corresponding member ID.","params":[{"name":"houseMemberDto","type_name":"HouseMemberDto","description":"House Member object containing information about a member of a household, which is passed to the function to retrieve their member ID.\n\n* `getMemberId()`: Returns the member ID of the House Member.","complex_type":true}],"returns":{"type_name":"String","description":"a string representing the member ID of the inputted House Member DTO.\n\n* The output is a string containing the member ID of the inputted House Member Dto.\n* The string consists of a unique identifier for the member within the context of the House application.\n* The member ID serves as a reference point for interactions between members within the application, enabling efficient communication and data exchange.","complex_type":true},"usage":{"language":"java","code":"public static void main(String[] args) {\n    HouseMemberDto houseMemberDto = new HouseMemberDto();\n    houseMemberDto.setMemberId(\"123\");\n    String result = memberToMemberId(houseMemberDto);\n    System.out.println(result); // prints 123\n}\n","description":""},"name":"memberToMemberId","code":"@Named(\"memberToMemberId\")\n  static String memberToMemberId(HouseMemberDto houseMemberDto) {\n    return houseMemberDto.getMemberId();\n  }","location":{"start":62,"insert":62,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"94e444c8-fe2a-388d-d449-25c74417637d","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"maps the user details of a `PaymentRequest` to its corresponding administrator and member fields in a `PaymentDto`.","params":[{"name":"paymentDto","type_name":"PaymentDto.PaymentDtoBuilder","description":"PaymentDto instance that will be populated with user details from the enriched schedule payment request.\n\n* `PaymentDto.PaymentDtoBuilder`: This is an instance of a builder class for the `PaymentDto` class, which is annotated with `@Builder`. The `PaymentDtoBuilder` allows for the configuration and modification of the `PaymentDto` instance through method calls.\n* `EnrichedSchedulePaymentRequest`: This is an instance of a class that contains enriched payment request details. It has various attributes, including `member` and `admin`, which are used in the `setUserFields` function.","complex_type":true},{"name":"enrichedSchedulePaymentRequest","type_name":"EnrichedSchedulePaymentRequest","description":"enriched payment request with additional user details, which are then mapped to admin and member fields in the `PaymentDto` object using the `setUserFields` method.\n\n* `paymentDto`: The `PaymentDto` object that is being populated with user details from the input.\n* `paymentDto.member`: A reference to the `Member` property of the `PaymentDto`, which will be set to an enriched version of the `house Member` property of the input.\n* `paymentDto.admin`: A reference to the `Admin` property of the `PaymentDto`, which will be set to an enriched version of the `house Admin` property of the input.\n\nThe `enrichedSchedulePaymentRequest` object contains various properties and attributes, including:\n\n* `member`: A `Member` object representing the user's details for the payment request.\n* `admin`: An `Admin` object representing the user's details for the payment request.","complex_type":true}],"usage":{"language":"java","code":"PaymentDto paymentDto = new PaymentDto()\n    .description(\"Description\")\n    .charge(BigDecimal.TEN)\n    .dueDate(LocalDate.now().plusDays(1))\n    .recurring(false);\nEnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = new EnrichedSchedulePaymentRequest()\n    .type(\"Type\")\n    .description(\"Description\")\n    .isRecurring(true)\n    .charge(BigDecimal.TEN)\n    .dueDate(LocalDate.now().plusDays(1))\n    .adminId(\"admin-id\")\n    .memberId(\"member-id\");\npaymentDto.setUserFields(enrichedSchedulePaymentRequest);\n","description":""},"name":"setUserFields","code":"@AfterMapping\n  default void setUserFields(@MappingTarget PaymentDto.PaymentDtoBuilder paymentDto, EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    // MapStruct and Lombok requires you to pass in the Builder instance of the class if that class is annotated with @Builder, or else the AfterMapping method is not used.\n    // required to use AfterMapping to convert the user details of the payment request to admin, and same with house member\n    paymentDto.member(getEnrichedRequestMember(enrichedSchedulePaymentRequest));\n    paymentDto.admin(getEnrichedRequestAdmin(enrichedSchedulePaymentRequest));\n  }","location":{"start":76,"insert":76,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"8459ebcc-9568-4ca1-5d48-1906ca594492","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"enriches a `SchedulePaymentRequest` object with additional information, such as community IDs, admin and member details, and additional fields for recurring payments.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"Schedule Payment Request to be enriched, providing its type, description, recurrence, charge, due date, and other relevant information.\n\n* `type`: The type of payment request, which could be either \"schedule\" or \"one-time\".\n* `description`: A brief description of the payment request.\n* `isRecurring`: Whether the payment is recurring or not.\n* `charge`: The amount of the payment request.\n* `dueDate`: The date by which the payment is due.\n* `adminId`: The ID of the administrator who created the payment request.\n* `adminName`: The name of the administrator who created the payment request.\n* `adminEmail`: The email address of the administrator who created the payment request.\n* `encryptedPassword`: The encrypted password of the administrator who created the payment request.\n* `communityIds`: A set of community IDs that the payment request is related to.\n* `memberId`: The ID of the member whose payment request this is.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the member.\n* `memberName`: The name of the member whose payment request this is.\n* `communityHouseId`: The ID of the community house associated with the member.","complex_type":true},{"name":"admin","type_name":"User","description":"user who is authorizing the payment request, providing their ID, name, email address, and encrypted password to enrich the request with additional information.\n\n* `getCommunities()` returns a stream of `Community` objects, which represent the communities that the admin is a member of.\n* `map()` is used to transform each `Community` object into a `String` representing its community ID.\n* `collect()` is used to collect the transformed strings into a set called `communityIds`.\n* `getAdminId()` returns the ID of the admin who created the schedule payment request.\n* `getId()` returns the ID of the admin who created the schedule payment request.\n* `getName()` returns the name of the admin who created the schedule payment request.\n* `getEmail()` returns the email address of the admin who created the schedule payment request.\n* `getEncryptedPassword()` returns the encrypted password of the admin who created the schedule payment request.\n* `getCommunityIds()` returns a set of community IDs that are associated with the admin who created the schedule payment request.\n* `getMemberId()` returns the ID of the member whose payment request is being enriched.\n* `getHouseMemberDocument()` returns a `Document` object representing the member's house membership document, or an empty string if no document is available.","complex_type":true},{"name":"member","type_name":"HouseMember","description":"HouseMember object associated with the Schedule Payment Request, providing additional information such as the member's ID and community house ID.\n\n* `member.getMemberId()`: The unique identifier of the member in the community.\n* `member.getId()`: The ID of the member.\n* `member.getHouseMemberDocument() != null ? member.getHouseMemberDocument().getDocumentFilename() : \"\"`: The filename of the document associated with the member's household, if available.\n* `member.getName()`: The name of the member.\n* `member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\"\": The ID of the community house associated with the member.","complex_type":true}],"returns":{"type_name":"EnrichedSchedulePaymentRequest","description":"an enriched `SchedulePaymentRequest` object containing additional information.\n\n* `type`: The type of payment request, which can be either \"ONE_TIME\" or \"RECURRING\".\n* `description`: A brief description of the payment request.\n* `isRecurring`: Indicates whether the payment request is recurring or not.\n* `charge`: The amount of the payment request.\n* `dueDate`: The date by which the payment must be made.\n* `adminId`: The ID of the admin who created the payment request.\n* `adminName`: The name of the admin who created the payment request.\n* `adminEmail`: The email address of the admin who created the payment request.\n* `encryptedPassword`: The encrypted password of the admin who created the payment request.\n* `communityIds`: A set of community IDs associated with the payment request.\n* `memberId`: The ID of the member who made the payment request.\n* `houseMemberDocumentFilename`: The filename of the House Member document associated with the payment request (only if it exists).\n* `memberName`: The name of the member who made the payment request.\n* `communityHouseId`: The ID of the community house associated with the payment request (only if it exists).","complex_type":true},"usage":{"language":"java","code":"public class App {\n  public static void main(String[] args) {\n    UserDto admin = new UserDto()\n        .setUserId(\"admin\")\n        .setId(\"admin_id\")\n        .setName(\"Admin Name\")\n        .setEmail(\"admin@example.com\")\n        .setEncryptedPassword(\"encrypted_password\");\n    HouseMemberDto member = new HouseMemberDto()\n        .setHouseMemberDocument(\"document_filename\")\n        .setCommunityId(\"community_id\")\n        .setCommunityHouse(\"house_id\")\n        .setId(\"member_id\")\n        .setName(\"Member Name\");\n    SchedulePaymentRequest request = new SchedulePaymentRequest()\n        .setType(SchedulePaymentRequest.Type.SCHEDULED)\n        .setDescription(\"This is a scheduled payment\")\n        .setRecurring(true)\n        .setCharge(10.0)\n        .setDueDate(LocalDate.now())\n        .setAdminId(\"admin_id\")\n        .setMemberId(\"member_id\");\n    EnrichedSchedulePaymentRequest enriched = new App().enrichSchedulePaymentRequest(request, admin, member);\n  }\n}\n","description":""},"name":"enrichSchedulePaymentRequest","code":"default EnrichedSchedulePaymentRequest enrichSchedulePaymentRequest(\n      SchedulePaymentRequest request, User admin, HouseMember member) {\n    Set<String> communityIds = admin.getCommunities()\n        .stream()\n        .map(Community::getCommunityId)\n        .collect(Collectors.toSet());\n    return new EnrichedSchedulePaymentRequest(request.getType(),\n        request.getDescription(),\n        request.isRecurring(),\n        request.getCharge(),\n        request.getDueDate(),\n        request.getAdminId(),\n        admin.getId(),\n        admin.getName(),\n        admin.getEmail(),\n        admin.getEncryptedPassword(),\n        communityIds,\n        member.getMemberId(),\n        member.getId(),\n        member.getHouseMemberDocument() != null ? member.getHouseMemberDocument()\n            .getDocumentFilename() : \"\",\n        member.getName(),\n        member.getCommunityHouse() != null ? member.getCommunityHouse().getHouseId() : \"\");\n  }","location":{"start":102,"insert":102,"offset":" ","indent":2},"item_type":"method","length":24},{"id":"d1b7b23b-8645-0a80-754d-59efd09b9c35","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"builds a `UserDto` object representing the administrator of an enriched schedule payment request, fetching their details from the provided `EnrichedSchedulePaymentRequest`.","params":[{"name":"enrichedSchedulePaymentRequest","type_name":"EnrichedSchedulePaymentRequest","description":"administrative user for whom the `UserDto` is being built, providing its ID, name, email, and encrypted password.\n\n* `userId`: The ID of the user who made the request.\n* `id`: The ID of the administrative entity associated with the request.\n* `name`: The name of the administrative entity associated with the request.\n* `email`: The email address of the administrative entity associated with the request.\n* `encryptedPassword`: The encrypted password for the administrative entity associated with the request.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the administrator's details.\n\n* `userId`: The ID of the administrator associated with the enriched schedule payment request.\n* `id`: The entity ID of the administrator associated with the enriched schedule payment request.\n* `name`: The name of the administrator associated with the enriched schedule payment request.\n* `email`: The email address of the administrator associated with the enriched schedule payment request.\n* `encryptedPassword`: The encrypted password of the administrator associated with the enriched schedule payment request.","complex_type":true},"usage":{"language":"java","code":"UserDto admin = getEnrichedRequestAdmin(enrichedSchedulePaymentRequest);\n","description":"\nHere, the value of enrichedSchedulePaymentRequest.getAdminId() is passed to the getEnrichedRequestAdmin method which returns an instance of UserDto.\n\nThe UserDto class has a builder for creating instances with the following properties: userId, id, name, email, encryptedPassword. The values are extracted from enrichedSchedulePaymentRequest and assigned accordingly to the fields in the UserDto object. Then, the build method is called to return an instance of UserDto containing these properties.\n\nThe example above would create a new UserDto object with the userId, id, name, email and encryptedPassword fields set according to enrichedSchedulePaymentRequest.\n\nIt's important to note that this method only works if the EnrichedSchedulePaymentRequest class has the properties adminId, adminEntityId, adminName and adminEmail, otherwise a NullPointerException will be thrown."},"name":"getEnrichedRequestAdmin","code":"default UserDto getEnrichedRequestAdmin(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return UserDto.builder()\n        .userId(enrichedSchedulePaymentRequest.getAdminId())\n        .id(enrichedSchedulePaymentRequest.getAdminEntityId())\n        .name(enrichedSchedulePaymentRequest.getAdminName())\n        .email(enrichedSchedulePaymentRequest.getAdminEmail())\n        .encryptedPassword(enrichedSchedulePaymentRequest.getAdminEncryptedPassword())\n        .build();\n  }","location":{"start":127,"insert":127,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"78d52396-3c6c-5b9a-8f4f-860993ad8b89","ancestors":["697d6958-331d-9281-d54e-626cc4e03a16"],"type":"function","description":"generates a `HouseMemberDto` object with information from an `EnrichedSchedulePaymentRequest`. It provides the member entity ID, ID, and name.","params":[{"name":"enrichedSchedulePaymentRequest","type_name":"EnrichedSchedulePaymentRequest","description":"HouseMemberDto object that contains additional information about the member, such as their ID, name, and entity ID.\n\n* `getMemberEntityId()` returns the ID of the member entity associated with the schedule payment request.\n* `getMemberId()` returns the ID of the member associated with the schedule payment request.\n* `getHouseMemberName()` returns the name of the house member associated with the schedule payment request.","complex_type":true}],"returns":{"type_name":"HouseMemberDto","description":"a `HouseMemberDto` object containing the member's ID, name, and entity ID.\n\n* `id`: This property represents the ID of the house member entity associated with the enriched schedule payment request.\n* `memberId`: This property represents the ID of the member associated with the enriched schedule payment request.\n* `name`: This property represents the name of the house member associated with the enriched schedule payment request.","complex_type":true},"usage":{"language":"java","code":"public class SchedulePaymentUseCase {\n  private final PaymentRepository paymentRepository;\n  private final UserService userService;\n  private final HouseMemberService houseMemberService;\n  private final PaymentDtoMapper paymentDtoMapper;\n  \n  public SchedulePaymentUseCase(PaymentRepository paymentRepository, UserService userService, HouseMemberService houseMemberService, PaymentDtoMapper paymentDtoMapper) {\n    this.paymentRepository = paymentRepository;\n    this.userService = userService;\n    this.houseMemberService = houseMemberService;\n    this.paymentDtoMapper = paymentDtoMapper;\n  }\n  \n  public SchedulePaymentResponse schedulePayment(SchedulePaymentRequest request) {\n    User admin = userService.getUserByEmail(request.getAdminEmail());\n    HouseMember member = houseMemberService.getHouseMemberByMemberId(request.getMemberId());\n    \n    EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest = paymentDtoMapper.enrichSchedulePaymentRequest(request, admin, member);\n    PaymentDto paymentDto = new PaymentDto();\n    paymentDtoMapper.setEnrichedSchedulePaymentRequestToPaymentDto(enrichedSchedulePaymentRequest, paymentDto);\n    \n    Payment payment = paymentRepository.save(paymentDto);\n    return paymentDtoMapper.paymentToSchedulePaymentResponse(payment);\n  }\n}\n","description":"\nThe example uses the SchedulePaymentUseCase class that has a method called schedulePayment, which takes in a SchedulePaymentRequest object as input and saves it to the database using PaymentRepository and HouseMemberService. The method also uses UserService to retrieve an admin and a member by their email addresses from the request. The mapper is then used to enrich the request with these entities and save the payment using PaymentDtoMapper.\n\nThis is an example of how the code would be tested:\n"},"name":"getEnrichedRequestMember","code":"default HouseMemberDto getEnrichedRequestMember(EnrichedSchedulePaymentRequest enrichedSchedulePaymentRequest) {\n    return new HouseMemberDto()\n        .id(enrichedSchedulePaymentRequest.getMemberEntityId())\n        .memberId(enrichedSchedulePaymentRequest.getMemberId())\n        .name(enrichedSchedulePaymentRequest.getHouseMemberName());\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2},"item_type":"method","length":6}]}}}
{"name":"PaymentController.java","path":"service/src/main/java/com/myhome/controllers/PaymentController.java","content":{"structured":{"description":"A REST controller responsible for managing payments in a community. The controller provides endpoints for scheduling payments, listing all member payments, and listing all admin scheduled payments. It uses packages from Spring Data, Spring Web Flux, and Lombok to perform these tasks efficiently.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.PaymentController Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.PaymentController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.Payment</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"132.5,-85 52.5,-85 52.5,-66 132.5,-66 132.5,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">PaymentsApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"c9e54eb0-ee35-f2a5-5847-24eef544ff82","ancestors":[],"type":"function","description":"is responsible for handling payment-related requests in a housing platform. It provides endpoints for scheduling payments, listing all member and admin scheduled payments, and listing all payments for a given community or member. The controller uses dependency injection to inject the required services, such as the PaymentService, CommunityService, and SchedulePaymentApiMapper. The controller also implements security constraints using the @Auth decorator to ensure only authorized users can access the endpoints.","name":"PaymentController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class PaymentController implements PaymentsApi {\n  private final PaymentService paymentService;\n  private final CommunityService communityService;\n  private final SchedulePaymentApiMapper schedulePaymentApiMapper;\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }\n\n  @Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }\n\n  private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }\n}","location":{"start":51,"insert":51,"offset":" ","indent":0,"comment":{"start":47,"end":50}},"item_type":"class","length":94},{"id":"6b2f6831-82fb-f28b-ba4c-eeb0f81ad324","ancestors":["c9e54eb0-ee35-f2a5-5847-24eef544ff82"],"type":"function","description":"receives a Schedule Payment Request from the API and checks if the user is an admin of the community house. If so, it schedules a payment using the API and returns the response. Otherwise, it returns a `NOT_FOUND` status.","params":[{"name":"request","type_name":"SchedulePaymentRequest","description":"SchedulePaymentRequest object containing the details of the payment to be scheduled, which is used to generate an enriched Schedule Payment Request, schedule the payment, and return the resulting Schedule Payment Response.\n\n* `request.getMemberId()`: A unique identifier for a member within a community house.\n* `request.getAdminId()`: A unique identifier for an administrator within a community house.\n* `paymentService.getHouseMember(request.getMemberId())`: Returns a HouseMember object associated with the specified member ID, or throws an exception if the member does not exist.\n* `communityService.findCommunityAdminById(request.getAdminId())`: Returns a User object associated with the specified administrator ID, or throws an exception if the administrator does not exist.\n* `isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)`: A boolean value indicating whether the administrator is an admin of the community house associated with the member.","complex_type":true}],"returns":{"type_name":"SchedulePaymentResponse","description":"a `SchedulePaymentResponse` object containing the scheduled payment details.\n\n* `ResponseEntity`: This is an instance of the `ResponseEntity` class, which represents a generic response object that can hold any type of data. In this case, it holds a `SchedulePaymentResponse` object.\n* `status`: This is a field of type `HttpStatus`, which indicates the HTTP status code of the response. In this case, it is set to `CREATED`, indicating that the payment has been scheduled successfully.\n* `body`: This is a field of type `SchedulePaymentResponse`, which contains the details of the scheduled payment.\n\nThe various attributes of the `SchedulePaymentResponse` object are as follows:\n\n* `id`: A unique identifier for the scheduled payment.\n* `paymentId`: The ID of the payment that has been scheduled.\n* `amount`: The amount of the payment that has been scheduled.\n* `memberId`: The ID of the member who has scheduled the payment.\n* `adminId`: The ID of the admin who has scheduled the payment.\n* `scheduledDate`: The date and time when the payment is scheduled to be made.","complex_type":true},"usage":{"language":"java","code":"SchedulePaymentRequest request = new SchedulePaymentRequest();\nrequest.setAdminId(\"admin-id\");\nrequest.setMemberId(\"member-id\");\nrequest.setAmount(10);\nrequest.setDate(LocalDateTime.now());\n\nResponseEntity<SchedulePaymentResponse> response = schedulePayment(request);\n","description":"\nIn this example, the request object is constructed and its adminId, memberId, amount, and date are set to values that would satisfy the conditions specified in the method's documentation. The response returned by the method is stored in a variable called 'response'. Since the response status code is HTTP_CREATED (201), it means that the request was successful and a new resource has been created. The response body contains the payment details, which can be accessed through the SchedulePaymentResponse object.\n\nIt's important to note that this example only works if the adminId provided in the request actually exists and is an admin of the community house where the member belongs. If either of these conditions are not met, then a HTTP_NOT_FOUND (404) status code would be returned."},"name":"schedulePayment","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> schedulePayment(@Valid\n      SchedulePaymentRequest request) {\n    log.trace(\"Received schedule payment request\");\n\n    HouseMember houseMember = paymentService.getHouseMember(request.getMemberId())\n        .orElseThrow(() -> new RuntimeException(\n            \"House member with given id not exists: \" + request.getMemberId()));\n    User admin = communityService.findCommunityAdminById(request.getAdminId())\n        .orElseThrow(\n            () -> new RuntimeException(\"Admin with given id not exists: \" + request.getAdminId()));\n\n    if (isUserAdminOfCommunityHouse(houseMember.getCommunityHouse(), admin)) {\n      final EnrichedSchedulePaymentRequest paymentRequest =\n          schedulePaymentApiMapper.enrichSchedulePaymentRequest(request, admin, houseMember);\n      final PaymentDto paymentDto =\n          schedulePaymentApiMapper.enrichedSchedulePaymentRequestToPaymentDto(paymentRequest);\n      final PaymentDto processedPayment = paymentService.schedulePayment(paymentDto);\n      final SchedulePaymentResponse paymentResponse =\n          schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment);\n      return ResponseEntity.status(HttpStatus.CREATED).body(paymentResponse);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":59,"insert":59,"offset":" ","indent":2,"comment":null},"item_type":"method","length":25},{"id":"afea1598-8231-438b-db4b-17f5a8611b65","ancestors":["c9e54eb0-ee35-f2a5-5847-24eef544ff82"],"type":"function","description":"checks if a given `User` is an admin of a specified `CommunityHouse`. It does so by checking if the `User` is present in the community's admin list.","params":[{"name":"communityHouse","type_name":"CommunityHouse","description":"CommunityHouse object that is being checked for the presence of the provided `admin` parameter among its list of admins.\n\n* `communityHouse`: A `CommunityHouse` object that represents a community house with various attributes and methods for managing community members and their roles.\n* `getCommunity()`: A method that returns a `Community` object, representing the community associated with the `CommunityHouse`.\n* `getAdmins()`: A method that returns a list of `User` objects, representing the admins of the community house.","complex_type":true},{"name":"admin","type_name":"User","description":"User object to be checked for admin status within the CommunityHouse community.\n\n* `CommunityHouse communityHouse`: This represents an object of type `CommunityHouse`, which contains information about a community house.\n* `getCommunity()`: This method returns an object of type `Community`, which contains information about the community associated with the community house.\n* `getAdmins()`: This method returns a list of objects of type `User`, which represents the admins of the community.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified user is an admin of the community house.","complex_type":false},"usage":{"language":"java","code":"@Test\npublic void isUserAdminOfCommunityHouse() {\n    Community community = new Community();\n    User admin = new User();\n    community.setAdmins(Collections.singletonList(admin));\n    CommunityHouse communityHouse = new CommunityHouse();\n    communityHouse.setCommunity(community);\n    \n    assertTrue(isUserAdminOfCommunityHouse(communityHouse, admin));\n}\n","description":"\nExplanation:\n* First, we create a `Community` object with a single administrator.\n* Then, we create a `User` object that is the same as the administrator from the previous step.\n* Next, we create a `CommunityHouse` object with its `community` attribute set to the community created in the first step.\n* Finally, we assert that the method returns `true` when both the `admin` and the `communityHouse` objects are passed as arguments.\n\nThis test shows that the method is working correctly by testing whether an administrator of a community is also an administrator of any community house belonging to that community."},"name":"isUserAdminOfCommunityHouse","code":"private boolean isUserAdminOfCommunityHouse(CommunityHouse communityHouse, User admin) {\n    return communityHouse.getCommunity()\n        .getAdmins()\n        .contains(admin);\n  }","location":{"start":85,"insert":85,"offset":" ","indent":2,"comment":null},"item_type":"method","length":5},{"id":"38680162-f08f-37b2-1d41-353c2920646e","ancestors":["c9e54eb0-ee35-f2a5-5847-24eef544ff82"],"type":"function","description":"retrieves payment details for a given payment ID from the payment service and maps them to a `SchedulePaymentResponse` object using the provided API mapper. It returns a `ResponseEntity` with the payment details or an error response if not found.","params":[{"name":"paymentId","type_name":"String","description":"id of the payment for which details are being requested.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object representing the payment details or an error message indicating that the payment does not exist.\n\n* `paymentId`: The unique identifier of the payment for which details are being requested.\n* `paymentService`: A service responsible for retrieving payment details.\n* `schedulePaymentApiMapper`: An object that maps payment details to `SchedulePaymentResponse` objects.\n* `ResponseEntity`: A class representing a response entity, which contains the status code and body of the response.\n* `ok`: The status code indicating that the request was successful and the payment details were retrieved.","complex_type":true},"usage":{"language":"java","code":"public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n  final PaymentDto processedPayment = paymentService.getPaymentDetails(paymentId);\n  return ResponseEntity.ok(schedulePaymentApiMapper.paymentToSchedulePaymentResponse(processedPayment));\n}\n","description":"\nThe method listPaymentDetails uses the paymentService to get the details of a payment with the specified id, and then maps the result to a SchedulePaymentResponse using schedulePaymentApiMapper.paymentToSchedulePaymentResponse. The response is then returned as an OK HTTP status code ResponseEntity."},"name":"listPaymentDetails","code":"@Override\n  public ResponseEntity<SchedulePaymentResponse> listPaymentDetails(String paymentId) {\n    log.trace(\"Received request to get details about a payment with id[{}]\", paymentId);\n\n    return paymentService.getPaymentDetails(paymentId)\n        .map(schedulePaymentApiMapper::paymentToSchedulePaymentResponse)\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":91,"insert":91,"offset":" ","indent":2,"comment":null},"item_type":"method","length":9},{"id":"63702157-7ff0-92a9-cb4c-6494f67d87ef","ancestors":["c9e54eb0-ee35-f2a5-5847-24eef544ff82"],"type":"function","description":"receives a member ID and retrieves all payments associated with that member from multiple sources, maps them to a standardized response format, and returns it as a `ResponseEntity`.","params":[{"name":"memberId","type_name":"String","description":"id of the house member for whom all payments are to be listed.","complex_type":false}],"returns":{"type_name":"ResponseEntity","description":"a `List Member Payments Response` object containing the list of payments for the specified member ID.\n\n* `ResponseEntity`: This is an object that represents a response entity with a status code and a body. The status code indicates whether the request was successful or not, and the body contains the list of member payments.\n* `ok`: This is a method on the `ResponseEntity` object that returns a `ResponseEntity` instance with a status code of 200 (OK).\n* `notFound`: This is a method on the `ResponseEntity` object that returns a `ResponseEntity` instance with a status code of 404 (Not Found).\n* `payments`: This is an attribute of the `ListMemberPaymentsResponse` class that contains the list of member payments.\n\nThe `listAllMemberPayments` function takes in a `memberId` parameter and uses it to retrieve the list of payments for that member from the payment service. It then maps the payment service response to a `ListMemberPaymentsResponse` object, which is then returned as the output of the function.","complex_type":true},"usage":{"language":"java","code":"List<Payment> payments = paymentService.getPaymentsByMember(memberId);\nSet<AdminPayment> adminPayments = schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet(new HashSet<>(payments));\nListMemberPaymentsResponse response = new ListMemberPaymentsResponse().payments(adminPayments);\nreturn ResponseEntity.ok().body(response);\n","description":"\nThis example uses the paymentService to retrieve a list of payments for the member with ID `memberId`. It then creates a set from this list and passes it as an argument to `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()` which returns a set of `AdminPayment` objects that represent the response for the list payments endpoint. This response is then used to create a new instance of `ListMemberPaymentsResponse` and returned as a `ResponseEntity<ListMemberPaymentsResponse>`.\n\nPlease note that the use of `schedulePaymentApiMapper.memberPaymentSetToRestApiResponseMemberPaymentSet()` in this example is not necessary, since it returns a set of `AdminPayment` objects which is the same type as the `payments` variable. However, using this method ensures that the code will work correctly regardless if the `payments` variable is already a set or not."},"name":"listAllMemberPayments","code":"@Override\n  public ResponseEntity<ListMemberPaymentsResponse> listAllMemberPayments(String memberId) {\n    log.trace(\"Received request to list all the payments for the house member with id[{}]\",\n        memberId);\n\n    return paymentService.getHouseMember(memberId)\n        .map(payments -> paymentService.getPaymentsByMember(memberId))\n        .map(schedulePaymentApiMapper::memberPaymentSetToRestApiResponseMemberPaymentSet)\n        .map(memberPayments -> new ListMemberPaymentsResponse().payments(memberPayments))\n        .map(ResponseEntity::ok)\n        .orElseGet(() -> ResponseEntity.notFound().build());\n  }","location":{"start":101,"insert":101,"offset":" ","indent":2,"comment":null},"item_type":"method","length":12},{"id":"cac862f3-5330-3bba-0644-57c05716fbf8","ancestors":["c9e54eb0-ee35-f2a5-5847-24eef544ff82"],"type":"function","description":"receives a request to list all scheduled payments for an admin, retrieves the payments from the payment service, and returns them in a response entity along with pagination information.","params":[{"name":"communityId","type_name":"String","description":"community for which the payments are being listed, and is used to filter the list of payments to only those that are scheduled by the specified admin.","complex_type":false},{"name":"adminId","type_name":"String","description":"ID of the admin for whom scheduled payments are to be listed, and is used to filter the payments returned in the response.","complex_type":false},{"name":"pageable","type_name":"Pageable","description":"page number and size of the payment list that the administrator wants to view, which is used to retrieve the relevant payments from the database.\n\n* `communityId`: A string representing the ID of the community to filter payments for.\n* `adminId`: A string representing the ID of the admin to filter payments by.\n* `isAdminInGivenCommunity`: A boolean indicating whether the given admin is present in the specified community.\n\nThe function then makes use of these properties to retrieve a list of payments scheduled by the admin and return it in the response.","complex_type":true}],"returns":{"type_name":"ListAdminPaymentsResponse","description":"a `ResponseEntity` object containing a `ListAdminPaymentsResponse` body with the scheduled payments and pagination information.\n\n* `payments`: A list of `AdminPayment` objects representing the scheduled payments for the given admin.\n* `pageInfo`: Represents the pagination information of the payments, including the current page, total pages, and total number of payments.\n\nThe function first checks if the admin is in the given community by calling `isAdminInGivenCommunity`. If the admin is present in the community, it retrieves the scheduled payments using `paymentService.getPaymentsByAdmin()` and maps them to an `AdminPaymentSet` using `schedulePaymentApiMapper`. The mapped `AdminPaymentSet` is then returned as the output of the function. If the admin is not present in the community, a `ResponseEntity.notFound().build()` is returned indicating that the admin is not found.","complex_type":true},"usage":{"language":"java","code":"@Autowired\nprivate SchedulePaymentApiController schedulePaymentApiController;\n\nvoid demonstrateListingAdminPayments() {\n  // Given: A community with id \"1\" and admin with id \"2\".\n  String communityId = \"1\";\n  String adminId = \"2\";\n\n  Pageable pageable = new PageRequest(0, 5);\n\n  // When: Listing all the payments scheduled by the admin.\n  ResponseEntity<ListAdminPaymentsResponse> response = schedulePaymentApiController.listAllAdminScheduledPayments(communityId, adminId, pageable);\n\n  // Then: The returned list of payments should be non-empty and contain only those payments that were scheduled by the admin in the given community.\n  assertThat(response.getBody().getPayments()).isNotEmpty();\n  assertThat(response.getBody().getPayments().stream()\n                    .map(AdminPayment::getCommunityId)\n                    .allMatch(communityId::equals)).isTrue();\n}\n","description":"\nHere, we demonstrate the usage of listAllAdminScheduledPayments by listing all payments scheduled by an admin in a given community. We first set up some input parameters (the community and admin IDs), then pass them to the method to retrieve the response. Finally, we assert that the response contains non-empty list of payments, and that all payments were indeed scheduled by the admin in the given community."},"name":"listAllAdminScheduledPayments","code":"@Override\n  public ResponseEntity<ListAdminPaymentsResponse> listAllAdminScheduledPayments(\n      String communityId, String adminId, Pageable pageable) {\n    log.trace(\"Received request to list all the payments scheduled by the admin with id[{}]\",\n        adminId);\n\n    final boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n\n    if (isAdminInGivenCommunity) {\n      final Page<Payment> paymentsForAdmin = paymentService.getPaymentsByAdmin(adminId, pageable);\n      final List<Payment> payments = paymentsForAdmin.getContent();\n      final Set<AdminPayment> adminPayments =\n          schedulePaymentApiMapper.adminPaymentSetToRestApiResponseAdminPaymentSet(\n              new HashSet<>(payments));\n      final ListAdminPaymentsResponse response = new ListAdminPaymentsResponse()\n          .payments(adminPayments)\n          .pageInfo(PageInfo.of(pageable, paymentsForAdmin));\n      return ResponseEntity.ok().body(response);\n    }\n\n    return ResponseEntity.notFound().build();\n  }","location":{"start":114,"insert":114,"offset":" ","indent":2,"comment":null},"item_type":"method","length":22},{"id":"f9735451-daf8-4087-9343-186266f2a500","ancestors":["c9e54eb0-ee35-f2a5-5847-24eef544ff82"],"type":"function","description":"checks if a user is an admin in a specific community by querying the community details and admins, then filtering the admins based on the user ID, and returning true if the user is an admin or false otherwise.","params":[{"name":"communityId","type_name":"String","description":"unique identifier of a Community, which is used to retrieve the details of that Community and its associated Admins.","complex_type":false},{"name":"adminId","type_name":"String","description":"12-digit ID of an admin user who belongs to the community, and is used to filter the list of admins in the community to check if the provided user ID matches any of them.","complex_type":false}],"returns":{"type_name":"Boolean","description":"a `Boolean` value indicating whether the specified admin is an administrator of the given community.\n\n* `communityId`: The ID of the community being checked for the admin role.\n* `adminId`: The ID of the admin to be checked for membership in the community.\n* `map(Function)`: The map method is used to apply a function to each element of the input stream, in this case, `Community::getAdmins`. This function takes a `Community` object and returns a stream of `Admin` objects.\n* `map(Function<Admin, Boolean>)`: The map method is applied again to the stream of `Admin` objects, this time with a function that takes an `Admin` object and returns a `Boolean` value indicating whether the admin is in the given community.\n* `orElseThrow()`: This method is used to provide a default value if the stream of `Admin` objects is empty. If no admins are found in the community, an exception is thrown with a message containing the ID of the community and the ID of the admin.\n\nOverall, the function returns a `Boolean` value indicating whether the specified admin is present in the given community.","complex_type":true},"usage":{"language":"java","code":"@Test\npublic void testIsAdminInGivenCommunity() {\n  //Arrange\n  final String communityId = \"1\";\n  final String adminId = \"adminId\";\n  \n  //Act\n  Boolean isAdminInGivenCommunity = isAdminInGivenCommunity(communityId, adminId);\n  \n  //Assert\n  assertTrue(isAdminInGivenCommunity);\n}\n","description":"\nThis test case demonstrates the following:\n* The input values for communityId and adminId are given.\n* The method isAdminInGivenCommunity is called with these input values.\n* The output value of the call to the method, isAdminInGivenCommunity, is asserted to be true. This indicates that the admin with the ID \"adminId\" exists in the community with the ID \"1\"."},"name":"isAdminInGivenCommunity","code":"private Boolean isAdminInGivenCommunity(String communityId, String adminId) {\n    return communityService.getCommunityDetailsByIdWithAdmins(communityId)\n        .map(Community::getAdmins)\n        .map(admins -> admins.stream().anyMatch(admin -> admin.getUserId().equals(adminId)))\n        .orElseThrow(\n            () -> new RuntimeException(\"Community with given id not exists: \" + communityId));\n  }","location":{"start":137,"insert":137,"offset":" ","indent":2,"comment":null},"item_type":"method","length":7}]}}}
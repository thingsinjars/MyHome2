{"name":"HouseController.java","path":"service/src/main/java/com/myhome/controllers/HouseController.java","content":{"structured":{"description":"A HouseController class that implements the HousesApi interface. It provides RESTful endpoints for listing all houses, getting details of a specific house, and adding or deleting members of a house. The controller uses dependency injection and maps the responses to appropriate object types using Jackson mapping.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.controllers.HouseController Pages: 1 -->\n<svg width=\"181pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 181.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.controllers.HouseController</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 0,-30 0,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.controllers.House</text>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Controller</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"120.5,-85 52.5,-85 52.5,-66 120.5,-66 120.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HousesApi</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86.5,-55.65C86.5,-47.36 86.5,-37.78 86.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"83,-55.87 86.5,-65.87 90,-55.87 83,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"ea2e243e-45ee-79af-6c42-bc3d4b5e1d26","ancestors":[],"type":"function","description":"TODO","name":"HouseController","code":"@RestController\n@RequiredArgsConstructor\n@Slf4j\npublic class HouseController implements HousesApi {\n  private final HouseMemberMapper houseMemberMapper;\n  private final HouseService houseService;\n  private final HouseApiMapper houseApiMapper;\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }\n\n  @Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n\n  @Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }\n\n  @Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }\n}","location":{"start":43,"insert":43,"offset":" ","indent":0},"item_type":"class","length":81},{"id":"c21e08d1-7b76-8e88-bb4d-a178dcf62116","ancestors":["ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"],"type":"function","description":"receives a pageable request and returns a set of houses through the `houseService.listAllHouses()` method, which is then converted to a REST API response using `houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet()`. The response is then returned with the list of houses in the set.","params":[{"name":"pageable","type_name":"Pageable","description":"default page size and sorting options for listing all houses.\n\n* `@PageableDefault`: This annotation is used to specify default values for the pageable parameters, in this case, the size of the page to be retrieved. The value `200` indicates that the function will return a maximum of 200 houses per page.\n* `size`: This property represents the number of houses to be returned per page. It can take any non-negative integer value, and in this case, it is set to `200`.\n\nIn summary, the `pageable` input to the function has a single property, `size`, which specifies the maximum number of houses to be retrieved per page.","complex_type":true}],"returns":{"type_name":"GetHouseDetailsResponse","description":"a `GetHouseDetailsResponse` object containing a set of `CommunityHouse` objects converted from the service's response.\n\n* `GetHouseDetailsResponse`: This class represents the response to the list all houses request. It has a set of `CommunityHouse` objects as its attribute.\n* `CommunityHouse`: This class represents an individual house in the list. It has several attributes, including the house ID, name, address, and more.\n* `Pageable`: This interface provides methods for pagination, which is used to page the results of the list all houses request. The `size` attribute specifies the number of houses to return per page.","complex_type":true},"usage":{"language":"java","code":"Pageable pageable = PageRequest.of(0, 20);\nResponseEntity<GetHouseDetailsResponse> response = houseController.listAllHouses(pageable);\nif (response.getStatusCode() == HttpStatus.OK) {\n    GetHouseDetailsResponse getHouseDetailsResponse = response.getBody();\n    // Use the response object to access the houses returned in the response body\n}\n","description":""},"name":"listAllHouses","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> listAllHouses(\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all houses\");\n\n    Set<CommunityHouse> houseDetails =\n        houseService.listAllHouses(pageable);\n    Set<GetHouseDetailsResponseCommunityHouse> getHouseDetailsResponseSet =\n        houseApiMapper.communityHouseSetToRestApiResponseCommunityHouseSet(houseDetails);\n\n    GetHouseDetailsResponse response = new GetHouseDetailsResponse();\n\n    response.setHouses(getHouseDetailsResponseSet);\n\n    return ResponseEntity.status(HttpStatus.OK).body(response);\n  }","location":{"start":51,"insert":51,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"93898c2e-f859-0ca8-dd45-d5000987a1ca","ancestors":["ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"],"type":"function","description":"receives a house ID and retrieves the details of that house from the service layer, mapping the response to a `GetHouseDetailsResponse` object and returning it as an `ResponseEntity`.","params":[{"name":"houseId","type_name":"String","description":"id of the house for which details are requested, and is used to retrieve the relevant house details from the service.\n\n* `log.trace(\"Received request to get details of a house with id[{}],\"` - This line traces the receiving of the request for the details of a particular house using the `log` facility in the logging framework. The format string `\"Received request to get details of a house with id[{}]\"`, where `houseId` is the actual value being passed as an argument, is used to generate a log message that provides additional context and information about the request.\n* `houseService.getHouseDetailsById(houseId)` - This line calls the `getHouseDetailsById` method of the `houseService` class, passing in the `houseId` as an argument. This method is responsible for retrieving the details of a particular house based on its ID.\n* `map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)` - This line uses the `map` method to apply a function to the result of the `getHouseDetailsById` call. The function being applied is `houseApiMapper::communityHouseToRestApiResponseCommunityHouse`, which is responsible for converting the house details from the API format used by the `houseService` to the REST API format expected by the `getHouseDetails` function.\n* `map(Collections::singleton)` - This line uses the `map` method again to apply a function to the result of the previous mapping operation. The function being applied is `Collections::singleton`, which returns a single item (i.e., the converted house details) from the result of the previous mapping operation.\n* `map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))` - This line uses the `map` method again to apply a function to the result of the previous mapping operation. The function being applied is `getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses)`, which creates a new `GetHouseDetailsResponse` instance and sets its `houses` field to the result of the previous mapping operation.\n* `map(ResponseEntity::ok) - This line uses the `map` method again to apply a function to the result of the previous mapping operation. The function being applied is `ResponseEntity::ok`, which returns a `ResponseEntity` instance with an HTTP status code of 200 (i.e., OK).\n* `orElse(ResponseEntity.notFound().build())` - This line provides an alternative to the previous mapping operation if it fails. The function being applied is `ResponseEntity.notFound().build()`, which creates a new `ResponseEntity` instance with an HTTP status code of 404 (i.e., NOT FOUND).","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a `ResponseEntity` object containing a list of house details in REST API format.\n\n* `ResponseEntity<GetHouseDetailsResponse>`: This is the generic type of the response entity, which is a wrapper class for the actual response data.\n* `getHouseDetailsResponseCommunityHouses`: This is a list of community houses, which is the primary output of the function. Each house in the list is represented as an object with several attributes, including the house ID, name, and address.\n* `houses(getHouseDetailsResponseCommunityHouses)`: This is a method that takes a list of community houses as input and returns a single list of houses, which is the actual output of the function.\n* `ok`: This is a constant that indicates the response status code for a successful request. In this case, it means the response was successful and the requested data was found.\n* `notFound()`: This is a builder class that creates a response entity with a 404 status code, indicating that the requested data could not be found.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<GetHouseDetailsResponse> response = houseController.getHouseDetails(\"houseId\");\n","description":"\nIn this example, the house controller would return a Response Entity that contains a Get House Details Response with details about the house with id \"houseId\"."},"name":"getHouseDetails","code":"@Override\n  public ResponseEntity<GetHouseDetailsResponse> getHouseDetails(String houseId) {\n    log.trace(\"Received request to get details of a house with id[{}]\", houseId);\n    return houseService.getHouseDetailsById(houseId)\n        .map(houseApiMapper::communityHouseToRestApiResponseCommunityHouse)\n        .map(Collections::singleton)\n        .map(getHouseDetailsResponseCommunityHouses -> new GetHouseDetailsResponse().houses(getHouseDetailsResponseCommunityHouses))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":68,"insert":68,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"b2516efe-3749-128d-2344-4747d751263e","ancestors":["ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"],"type":"function","description":"receives a house ID and page size, retrieves the members of the house using the `houseService`, maps them to a `HashSet`, converts them to a REST API response, and returns it as an `ResponseEntity`.","params":[{"name":"houseId","type_name":"String","description":"ID of the house for which members are to be listed.\n\n* `houseId`: The unique identifier for a house, which can be used to retrieve information about the house and its members.\n* `@PageableDefault(size = 200)`: An annotation that specifies the default page size for the list of members returned in the response.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"200 members of the house that are to be listed, as specified by the default page size of 200.\n\nThe `@PageableDefault` annotation specifies that the page size should be 200 by default.","complex_type":true}],"returns":{"type_name":"OkResponseEntity","description":"a `ListHouseMembersResponse` object containing the list of members of the specified house.\n\n* `ResponseEntity`: This is the generic type of the response entity, which is an extension of the `ResponseEntity` class.\n* `ListHouseMembersResponse`: This is a custom response class that represents the list of house members. It has a single field called `members`, which is a list of `HouseMember` objects.\n* `ok`: This is a method on the `ResponseEntity` class that indicates the response was successful and includes the requested data.\n* `notFound`: This is a method on the `ResponseEntity` class that indicates the response was not successful (i.e., the house could not be found).\n* `houseId`: This is the ID of the house for which members are being listed.\n* `pageable`: This is a parameter that represents the pageable request, which allows for pagination of the list of members. It has a default value of `@PageableDefault(size = 200)`, which sets the page size to 200.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }\n","description":""},"name":"listAllMembersOfHouse","code":"@Override\n  public ResponseEntity<ListHouseMembersResponse> listAllMembersOfHouse(\n      String houseId,\n      @PageableDefault(size = 200) Pageable pageable) {\n    log.trace(\"Received request to list all members of the house with id[{}]\", houseId);\n\n    return houseService.getHouseMembersById(houseId, pageable)\n        .map(HashSet::new)\n        .map(houseMemberMapper::houseMemberSetToRestApiResponseHouseMemberSet)\n        .map(houseMembers -> new ListHouseMembersResponse().members(houseMembers))\n        .map(ResponseEntity::ok)\n        .orElse(ResponseEntity.notFound().build());\n  }","location":{"start":79,"insert":79,"offset":" ","indent":2},"item_type":"method","length":13},{"id":"ae72589f-ebf0-cd93-c54f-9e939ec0d069","ancestors":["ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"],"type":"function","description":"receives a request to add members to a house, validates the request, and adds the members to the house's member list. If the addition is successful, it returns a response indicating the new members, otherwise it returns a NOT_FOUND status.","params":[{"name":"houseId","type_name":"String","description":"ID of the house for which members are being added, and it is used to identify the house in the addHouseMembers method.\n\n* `houseId`: A string representing the ID of the house to which members will be added.\n\nThe function then performs the following operations:\n\n* Logs a trace message with the ID of the house and the request.\n* Maps the `AddHouseMemberRequest` DTO to a `Set` of `House Member` objects using the `houseMemberMapper`.\n* Calls the `addHouseMembers` method on the `houseService` with the ID of the house and the `Set` of `House Member` objects as arguments.\n* Checks if any members were saved successfully, and if not, returns a `ResponseEntity` with a `HttpStatus.NOT_FOUND` status code.\n* If successful, creates a new `AddHouseMemberResponse` object with the saved `House Member` objects, and returns it as the response entity with a `HttpStatus.CREATED` status code.","complex_type":true},{"name":"request","type_name":"AddHouseMemberRequest","description":"AddHouseMemberRequest object containing the information about the members to be added to the house.\n\n* `houseId`: The ID of the house to which members will be added.\n* `request.getMembers()`: A set of `HouseMemberDto` objects representing the new members to be added to the house.\n* `houseService.addHouseMembers(houseId, members)`: This method adds the members provided in the `request.getMembers()` set to the house with the given ID. The return value is a set of newly created `HouseMember` objects.","complex_type":true}],"returns":{"type_name":"AddHouseMemberResponse","description":"a `ResponseEntity` object with a status code of either `HttpStatus.NOT_FOUND` or `HttpStatus.CREATED`, depending on whether any members were added successfully.\n\n* `response`: This is an instance of `AddHouseMemberResponse`, which contains a list of `House Member` objects representing the newly added members to the house.\n* `savedHouseMembers`: This is a set of `House Member` objects representing the members that were successfully saved in the database.\n* `size`: The size of the `savedHouseMembers` set, which can be used to determine the number of successfully added members.","complex_type":true},"usage":{"language":"java","code":"// Add members to a house with the given houseId and request\nAddHouseMemberRequest addHouseMemberRequest = new AddHouseMemberRequest();\naddHouseMemberRequest.setMembers(List.of(new HouseMember(\"John\", \"Doe\"), new HouseMember(\"Jane\", \"Doe\")));\nhouseController.addHouseMembers(houseId, addHouseMemberRequest);\n","description":"\nIn this example, the method `addHouseMembers` is being used to add a list of members (`List<HouseMember>`) to a house with the given `houseId`. The request object `AddHouseMemberRequest` contains a list of members to be added and is passed as an argument to the method. If any member fails to be added, an error response is returned with status code 404 (Not Found). Otherwise, a success response is returned with status code 201 (Created) and the list of saved members in the body of the response object `AddHouseMemberResponse`."},"name":"addHouseMembers","code":"@Override\n  public ResponseEntity<AddHouseMemberResponse> addHouseMembers(\n      @PathVariable String houseId, @Valid AddHouseMemberRequest request) {\n\n    log.trace(\"Received request to add member to the house with id[{}]\", houseId);\n    Set<HouseMember> members =\n        houseMemberMapper.houseMemberDtoSetToHouseMemberSet(request.getMembers());\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, members);\n\n    if (savedHouseMembers.size() == 0 && request.getMembers().size() != 0) {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    } else {\n      AddHouseMemberResponse response = new AddHouseMemberResponse();\n      response.setMembers(\n          houseMemberMapper.houseMemberSetToRestApiResponseAddHouseMemberSet(savedHouseMembers));\n      return ResponseEntity.status(HttpStatus.CREATED).body(response);\n    }\n  }","location":{"start":93,"insert":93,"offset":" ","indent":2},"item_type":"method","length":18},{"id":"64682819-d26c-10b5-a64b-3090c7f81e9d","ancestors":["ea2e243e-45ee-79af-6c42-bc3d4b5e1d26"],"type":"function","description":"deletes a member from a house based on the specified house ID and member ID, returning a response entity with HTTP status code indicating the result of the operation.","params":[{"name":"houseId","type_name":"String","description":"unique identifier of the house for which a member is to be deleted.\n\n* `log`: a logging object used to log messages related to the function's execution.\n* `houseService`: an interface or class that provides methods for managing houses.\n* `houseId`: a string representing the unique identifier of a house.\n* `memberId`: a string representing the unique identifier of a member to be deleted from the specified house.","complex_type":true},{"name":"memberId","type_name":"String","description":"ID of the member to be deleted from the specified house.\n\n* `houseId`: The unique identifier for a house, which is used to identify the house in the system.\n* `memberId`: A unique identifier for a member within a house, which is used to identify the member in the system.","complex_type":true}],"returns":{"type_name":"ResponseEntity","description":"a HTTP NO_CONTENT status code indicating successful deletion of the member from the house.\n\n* The `ResponseEntity` object is built with an HTTP status code of either `NO_CONTENT` (204) or `NOT_FOUND` (404).\n* The `status` field of the `ResponseEntity` object contains the HTTP status code.\n* The `build()` method is used to create the complete `ResponseEntity` object.","complex_type":true},"usage":{"language":"java","code":"ResponseEntity<Void> response = controller.deleteHouseMember(houseId, memberId);\nif (response.getStatusCode() == HttpStatus.NO_CONTENT) {\n    // Member was successfully deleted from house\n} else if (response.getStatusCode() == HttpStatus.NOT_FOUND) {\n    // Member could not be found in the house or the house does not exist\n} else {\n    // Unexpected error occurred while trying to delete member from house\n}\n","description":""},"name":"deleteHouseMember","code":"@Override\n  public ResponseEntity<Void> deleteHouseMember(String houseId, String memberId) {\n    log.trace(\"Received request to delete a member from house with house id[{}] and member id[{}]\",\n        houseId, memberId);\n    boolean isMemberDeleted = houseService.deleteMemberFromHouse(houseId, memberId);\n    if (isMemberDeleted) {\n      return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n    } else {\n      return ResponseEntity.status(HttpStatus.NOT_FOUND).build();\n    }\n  }","location":{"start":112,"insert":112,"offset":" ","indent":2},"item_type":"method","length":11}]}}}
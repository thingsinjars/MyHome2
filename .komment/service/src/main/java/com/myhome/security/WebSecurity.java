{"name":"WebSecurity.java","path":"service/src/main/java/com/myhome/security/WebSecurity.java","content":{"structured":{"description":"A WebSecurity configuration class for Spring Security in a Spring Boot application. It sets up authentication and authorization filters, configures HTTP security settings, and defines an user details service and password encoder. The code also enables web security and requires the necessary dependencies to function correctly.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.CommunityAuthorizationFilter Pages: 1 -->\n<svg width=\"193pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 193.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.CommunityAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"185,-30 0,-30 0,0 185,0 185,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.Community</text>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"162,-85 23,-85 23,-66 162,-66 162,-85\"/>\n<text text-anchor=\"middle\" x=\"92.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92.5,-55.65C92.5,-47.36 92.5,-37.78 92.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"89,-55.87 92.5,-65.87 96,-55.87 89,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"5b47360e-e706-409f-464c-57a4fd233d6f","ancestors":[],"type":"function","description":"TODO","name":"WebSecurity","code":"@Configuration\n@EnableWebSecurity\n@RequiredArgsConstructor\npublic class WebSecurity extends WebSecurityConfigurerAdapter {\n  private final Environment environment;\n  private final UserDetailsService userDetailsService;\n  private final CommunityService communityService;\n  private final PasswordEncoder passwordEncoder;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }\n\n  private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n}","location":{"start":36,"insert":36,"offset":" ","indent":0},"item_type":"class","length":53},{"id":"5aa51da1-dec6-21a9-1942-ac84bdd31d68","ancestors":["5b47360e-e706-409f-464c-57a4fd233d6f"],"type":"function","description":"sets up security features for an API, disabling CORS and CSFR, and enforcing stateful session management. It also adds filters to authorize requests based on specific URLs and HTTP methods, and enables authenticated access to the API.","params":[{"name":"http","type_name":"HttpSecurity","description":"HTTP security configuration object, which is used to configure various security features such as CORS, CSFR, session management, and authorization rules for different URL paths.\n\n* `cors()` - Enables Cross-Origin Resource Sharing (CORS) functionality.\n* `csrf()`. disable() - Disables Cross-Site Request Forgery (CSRF) protection.\n* `headers().frameOptions().disable()` - Disables the Frame option for HTTP headers.\n* `sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)` - Sets the session creation policy to stateless, which means that no sessions will be created.\n* `addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class)` - Adds a filter after the community filter.\n* `authorizeRequests()` - Authorizes requests based on various matchers and allows or denies them accordingly. The matchers include:\n\t+ `antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))` - Matches URLs with the given path.\n\t+ `permitAll()` - Allows all requests without any restrictions.\n\t+ `antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))` - Matches URLs with the given path.\n\t+ `permitAll()` - Allows all requests without any restrictions.\n\t+ `antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))` - Matches POST requests to the given URL.\n\t+ `permitAll()` - Allows all POST requests without any restrictions.\n\t+ `antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))` - Matches POST requests to the given URL.\n\t+ `permitAll()` - Allows all POST requests without any restrictions.\n\t+ `antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))` - Matches OPTIONS requests to the given URL.\n\t+ `permitAll()` - Allows all OPTIONS requests without any restrictions.\n\t+ `antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))` - Matches GET requests to the given URL.\n\t+ `permitAll()` - Allows all GET requests without any restrictions.\n\t+ `antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))` - Matches GET requests to the given URL.\n\t+ `permitAll()` - Allows all GET requests without any restrictions.\n\t+ `antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))` - Matches POST requests to the given URL.\n\t+ `permitAll()` - Allows all POST requests without any restrictions.\n\t+ `/swagger/<any>` - Matches any Swagger request.\n\t+ `<any>` - Matches any other request.\n* `addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment, appJwtEncoderDecoder))` - Adds a filter to authorize requests based on the JWT encoder/decoder.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // Disable CORS and CSRF\n    http.cors().disable();\n    http.csrf().disable();\n    \n    // Disable frame options header\n    http.headers().frameOptions().disable();\n    \n    // Set session creation policy to stateless\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    \n    // Add community authorization filter after MyHomeAuthorizationFilter\n    Filter communityFilter = getCommunityFilter();\n    http.addFilterAfter(communityFilter, MyHomeAuthorizationFilter.class);\n    \n    // Authenticate all requests and permit all requests to public endpoints\n    http.authorizeRequests()\n        .antMatchers(\"/api/public/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated();\n  }\n","description":""},"name":"configure","code":"@Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.cors().and().csrf().disable();\n    http.headers().frameOptions().disable();\n    http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);\n    http.addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n\n    http.authorizeRequests()\n        .antMatchers(environment.getProperty(\"api.public.h2console.url.path\"))\n        .permitAll()\n        .antMatchers(environment.getProperty(\"api.public.actuator.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.registration.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.login.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.OPTIONS, environment.getProperty(\"api.public.cors.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.GET, environment.getProperty(\"api.public.resend-confirmation-email.url.path\"))\n        .permitAll()\n        .antMatchers(HttpMethod.POST, environment.getProperty(\"api.public.confirm-email.url.path\"))\n        .permitAll()\n        .antMatchers(\"/swagger/**\")\n        .permitAll()\n        .anyRequest()\n        .authenticated()\n        .and()\n        .addFilter(new MyHomeAuthorizationFilter(authenticationManager(), environment,\n            appJwtEncoderDecoder))\n        .addFilterAfter(getCommunityFilter(), MyHomeAuthorizationFilter.class);\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":33},{"id":"e1770e19-94c1-5b9f-f847-6e7bbb9d640e","ancestors":["5b47360e-e706-409f-464c-57a4fd233d6f"],"type":"function","description":"creates a `CommunityAuthorizationFilter` instance, using the `authenticationManager()` and `communityService` objects provided as parameters. This filter will likely restrict access to certain community-related resources based on user authentication.","params":[],"returns":{"type_name":"Filter","description":"a `Filter` object implementing community authorization logic.\n\n* The `getCommunityFilter` function returns an instance of the `Filter` class.\n* The `Filter` object is constructed using the `AuthenticationManager` and `CommunityService` objects as parameters.\n* The `AuthenticationManager` object represents the authentication mechanism used to authenticate users, while the `CommunityService` object manages the communities in the system.","complex_type":true},"usage":{"language":"java","code":"@RestController\npublic class MyHomeController {\n    @Autowired\n    private WebSecurity webSecurity;\n\n    @GetMapping(\"/api/myhome\")\n    public String home(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        // get the community filter from the web security configuration\n        Filter communityFilter = webSecurity.getCommunityFilter();\n        \n        // do something with the community filter\n        return \"Hello World!\";\n    }\n}\n","description":""},"name":"getCommunityFilter","code":"private Filter getCommunityFilter() throws Exception {\n    return new CommunityAuthorizationFilter(authenticationManager(), communityService);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"c25ee986-dc43-1196-004d-d4a16e15d8fd","ancestors":["5b47360e-e706-409f-464c-57a4fd233d6f"],"type":"function","description":"configures authentication settings by providing a user details service and password encoder to an AuthenticationManagerBuilder instance.","params":[{"name":"auth","type_name":"AuthenticationManagerBuilder","description":"AuthenticationManagerBuilder object, which is being configured by setting the userDetailsService and passwordEncoder properties.\n\n* `userDetailsService`: This is an instance of `UserDetailsService`, which provides methods for retrieving and manipulating user details.\n* `passwordEncoder`: This is an instance of `PasswordEncoder`, which encodes passwords securely.","complex_type":true}],"usage":{"language":"java","code":"@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }\n","description":"\nHere, the `configure` method is a part of WebSecurity class which is an extension of WebSecurityConfigurerAdapter. This method is used to configure the authentication manager using the provided AuthenticationManagerBuilder instance. The example code provides an instance of UserDetailsService as the user details service and passwordEncoder as the password encoder, allowing the authentication manager to use these services for user details and password encoding."},"name":"configure","code":"@Override\n  protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder);\n  }","location":{"start":84,"insert":84,"offset":" ","indent":2},"item_type":"method","length":4}]}}}
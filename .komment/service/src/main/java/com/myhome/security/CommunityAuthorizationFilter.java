{"name":"CommunityAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/CommunityAuthorizationFilter.java","content":{"structured":{"description":"A custom authentication filter called CommunityAuthorizationFilter that extends the BasicAuthenticationFilter. The filter checks if the user is an administrator of a community based on a unique identifier in the request URI. If the user is not an admin, it returns a HTTP status code of UNAUTHORIZED. The filter also calls the superclass's doFilterInternal method to continue the authentication process.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.User Pages: 1 -->\n<svg width=\"187pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 187.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.User</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"164,-19 15,-19 15,0 164,0 164,-19\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.User</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-74 0,-74 0,-55 179,-55 179,-74\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-44.66C89.5,-35.93 89.5,-25.99 89.5,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-44.75 89.5,-54.75 93,-44.75 86,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-129 52.5,-129 52.5,-110 126.5,-110 126.5,-129\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-99.66C89.5,-90.93 89.5,-80.99 89.5,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-99.75 89.5,-109.75 93,-99.75 86,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"311abc8b-4bf4-3482-cf43-211452f983ff","ancestors":[],"type":"function","description":"TODO","name":"CommunityAuthorizationFilter","code":"public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {\n    private final CommunityService communityService;\n    private final String uuidPattern = \"[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\";\n    private final Pattern addAdminRequestPattern = Pattern.compile(\"/communities/\" + uuidPattern + \"/admins\");\n\n\n    public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,\n                                        CommunityService communityService) {\n        super(authenticationManager);\n        this.communityService = communityService;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }\n\n    private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }\n}","location":{"start":19,"insert":19,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"c1ed2da9-3fb2-3495-4249-d9ae31d25109","ancestors":["311abc8b-4bf4-3482-cf43-211452f983ff"],"type":"function","description":"filters incoming HTTP requests based on a pattern and user authentication. If the URL matches the pattern and the user is not an admin, it sets the response status to SC_UNAUTHORIZED and returns. Otherwise, it delegates to the super method for further filtering.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request received by the filter.\n\n* `getRequestURI()` returns the request URI, which is the path of the requested resource.\n* `matcher` refers to an instance of `Matcher`, which is used to match the URL pattern of the request against a regular expression.\n* `find()` method of the `Matcher` object returns `true` if the URL matches the pattern, otherwise it returns `false`.\n* `isUserCommunityAdmin(request)` is a method that checks whether the current user is an administrator of a user community. If the method returns `false`, the response status code is set to `HttpServletResponse.SC_UNAUTHORIZED`.\n* `super.doFilterInternal(request, response, chain)` calls the superclass's implementation of the `doFilterInternal` method, which handles the actual filtering of the request.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"HttpServletResponse object that contains information about the HTTP request and is used to send the response back to the client.\n\n* `response`: A reference to the HttpServletResponse object that represents the response sent to the client.\n* `request`: A reference to the HttpServletRequest object that represents the request received from the client.\n* `chain`: A reference to the FilterChain object that represents the chain of filters that have been applied to the request.\n\nThe function performs an internal filter operation on the request and response objects, and then passes the request to the next filter in the chain for further processing.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"FilterChain that needs to be processed by the overridden doFilterInternal method.\n\n* `request`: The incoming HTTP request object.\n* `response`: The HTTP response object.\n* `chain`: The FilterChain object representing the chain of filters to be executed.\n* `isUserCommunityAdmin`: A boolean value indicating whether the user is an admin of a community or not.","complex_type":true}],"usage":{"language":"java","code":"@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n        \n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n        \n        super.doFilterInternal(request, response, chain);\n    }\n}\n","description":"\nThis method is used to filter HTTP requests based on a pattern match for the URL and whether the user is an admin of the community they are trying to add an admin to. The method first creates a Matcher object using the request URI and the compiled pattern from the addAdminRequestPattern field. If the pattern matches, it then checks if the user is an admin of the community by calling the isUserCommunityAdmin method. If the user is not an admin, the response status is set to unauthorized. Finally, the superclass' doFilterInternal method is called to continue processing the request.\n\nThe input parameters are as follows:\n* 'request', a HttpServletRequest object representing the incoming HTTP request.\n* 'response', a HttpServletResponse object representing the outgoing HTTP response.\n* 'chain', an instance of FilterChain, which represents the filter chain that this filter is part of.\n\nThe return value is void, as the method modifies the response directly and does not return any data."},"name":"doFilterInternal","code":"@Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n                                    FilterChain chain) throws IOException, ServletException {\n\n        Matcher urlMatcher = addAdminRequestPattern.matcher(request.getRequestURI());\n\n        if (urlMatcher.find() && !isUserCommunityAdmin(request)) {\n            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n            return;\n        }\n\n        super.doFilterInternal(request, response, chain);\n    }","location":{"start":31,"insert":31,"offset":" ","indent":4},"item_type":"method","length":13},{"id":"14571122-23d2-5987-ec44-18dc2fb6432c","ancestors":["311abc8b-4bf4-3482-cf43-211452f983ff"],"type":"function","description":"determines if a user is a community admin based on their user ID and the community ID in the request URL. It retrieves the list of community admins from the service, filters out non-matching users, and returns whether the user is a community admin or not.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that triggered the function execution and provides the community ID from the request URI.\n\n* `request`: An instance of `HttpServletRequest`, representing an HTTP request made to the server.\n* `getRequestURI()`: Returns the string representation of the request URI, which contains the path and query parameters of the request.\n* `split()`: Splits the request URI into a array of strings using the specified separator.\n* `[]`: Extracts the second element of the array, which represents the community ID in the function's context.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the current user is an administrator of a specific community.","complex_type":false},"usage":{"language":"java","code":"import javax.servlet.http.HttpServletRequest;\n\n// ...\n\npublic void someMethod(HttpServletRequest request) {\n    // ...\n    boolean isUserCommunityAdmin = isUserCommunityAdmin(request);\n    if (isUserCommunityAdmin) {\n        // Do something as the user is a community admin\n    } else {\n        // Do something else since the user is not a community admin\n    }\n}\n","description":""},"name":"isUserCommunityAdmin","code":"private boolean isUserCommunityAdmin(HttpServletRequest request) {\n        String userId = (String) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String communityId = request\n                .getRequestURI().split(\"/\")[2];\n        Optional<List<User>> optional = communityService\n                .findCommunityAdminsById(communityId, null);\n\n        if (optional.isPresent()) {\n            List<User> communityAdmins = optional.get();\n            User admin = communityAdmins\n                    .stream()\n                    .filter(communityAdmin -> communityAdmin.getUserId().equals(userId))\n                    .findFirst()\n                    .orElse(null);\n\n            return admin != null;\n        }\n\n        return false;\n    }","location":{"start":45,"insert":45,"offset":" ","indent":4},"item_type":"method","length":21}]}}}
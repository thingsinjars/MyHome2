{"name":"AppUserDetailsService.java","path":"service/src/main/java/com/myhome/security/AppUserDetailsService.java","content":{"structured":{"description":"an custom `UserDetailsService` implementation for a Spring Security system, responsible for loading user details by username. The service uses a repository and mapper to retrieve a `com.myhome.domain.User` object from a database based on the provided username, and then converts it to a `User` object using a mapper. If the user is not found in the database, a `UsernameNotFoundException` is thrown. Additionally, the service provides a method for retrieving user details as a `UserDto`.","items":[{"id":"9f86275a-3256-0bbf-8944-261ef2fc765b","ancestors":[],"type":"function","description":"TODO","name":"AppUserDetailsService","code":"@Service\n@RequiredArgsConstructor\npublic class AppUserDetailsService implements UserDetailsService {\n  private final UserRepository userRepository;\n  private final UserMapper userMapper;\n\n  @Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n\n  public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0},"item_type":"class","length":31},{"id":"6565215f-ad15-ccb1-944e-7e957937d64f","ancestors":["9f86275a-3256-0bbf-8944-261ef2fc765b"],"type":"function","description":"loads a user by their username, retrieving the user from the repository and returning a `User` object with the email address, encrypted password, and other properties set to true.","params":[{"name":"username","type_name":"String","description":"username for which the UserDetails object is to be loaded.\n\n* `email`: The user's email address.\n* `encryptedPassword`: The encrypted password for the user.\n* `isAdmin`: A boolean value indicating whether the user is an administrator or not.\n* `isActive`: A boolean value indicating whether the user is active or not.\n* `isAccountNonExpired`: A boolean value indicating whether the user's account has not expired.\n* `isPasswordNonExpired`: A boolean value indicating whether the user's password is non-expired.\n* `accountLocked`: A boolean value indicating whether the user's account is locked.","complex_type":true}],"returns":{"type_name":"instance","description":"a `UserDetails` object representing the user with the provided username.\n\n* `Email`: The email address of the user.\n* `EncryptedPassword`: The encrypted password for the user.\n* `IsAdmin`: A boolean indicating whether the user is an administrator or not.\n* `IsEnabled`: A boolean indicating whether the user is enabled or not.\n* `IsAccountNonExpired`: A boolean indicating whether the user's account is non-expired or not.\n* `IsPasswordNonExpired`: A boolean indicating whether the user's password is non-expired or not.\n* `Collections emptyList`: An empty list of objects, which is used to represent an empty collection.","complex_type":true},"usage":{"language":"java","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }\n","description":"\nThe above code would be used to create a UserDetails instance from the username provided. The method would first call findByEmail on the userRepository and check if the returned value is null. If it is, then the exception would be thrown as no user with the given username was found in the repository. Otherwise, the User constructor is called using the email and encrypted password of the user found in the repository to create a new UserDetails instance."},"name":"loadUserByUsername","code":"@Override public UserDetails loadUserByUsername(String username)\n      throws UsernameNotFoundException {\n\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n\n    return new User(user.getEmail(),\n        user.getEncryptedPassword(),\n        true,\n        true,\n        true,\n        true,\n        Collections.emptyList());\n  }","location":{"start":39,"insert":39,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"c2966ca9-f9e9-9198-fa4e-c74158545c6b","ancestors":["9f86275a-3256-0bbf-8944-261ef2fc765b"],"type":"function","description":"retrieves a `User` entity from the repository based on the provided username, maps it to a `UserDto`, and returns the mapped result.","params":[{"name":"username","type_name":"String","description":"email address of the user for which details are being requested.\n\n* `username`: This parameter represents a string value passed as an argument to the function.\n* `userRepository.findByEmail(username)`: This method call retrieves a `com.myhome.domain.User` object from the user repository based on the provided `username`.\n* `userMapper.userToUserDto(user)`: This method call converts the retrieved `com.myhome.domain.User` object into a `UserDto` object, which is then returned as the function's output.","complex_type":true}],"returns":{"type_name":"UserDto","description":"a `UserDto` object containing the details of the user with the specified username.\n\n* The function returns a `UserDto` object, which represents a user in the application.\n* The `User` object is retrieved from the `userRepository` using the `findByEmail` method, passing in the `username` parameter. If the user is not found, a `UsernameNotFoundException` is thrown.\n* The `UserMapper` class is used to map the `User` object to a `UserDto` object, which includes only the relevant attributes for the application.","complex_type":true},"usage":{"language":"java","code":"public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }\n","description":""},"name":"getUserDetailsByUsername","code":"public UserDto getUserDetailsByUsername(String username) {\n    com.myhome.domain.User user = userRepository.findByEmail(username);\n    if (user == null) {\n      throw new UsernameNotFoundException(username);\n    }\n    return userMapper.userToUserDto(user);\n  }","location":{"start":56,"insert":56,"offset":" ","indent":2},"item_type":"method","length":7}]}}}
{"name":"NoSecretJwtEncoderDecoder.java","path":"service/src/main/java/com/myhome/security/jwt/impl/NoSecretJwtEncoderDecoder.java","content":{"structured":{"description":"An implementation of `AppJwtEncoderDecoder`, a class that encodes and decodes JSON Web Tokens (JWTs). The concrete implementation, called `NoSecretJwtEncoderDecoder`, is only meant for testing purposes and does not use any secrets. It takes the encoded JWT and the secret as input, and returns the decoded JWT or the encoded JWT, respectively. The class uses Spring's `@Profile` annotation to enable it only in testing environments.","items":[{"id":"d6fe1aea-be31-8a8b-a04b-ef19f3bdcce6","ancestors":[],"type":"function","description":"TODO","name":"NoSecretJwtEncoderDecoder","code":"@Profile(\"test\")\n@Component\npublic class NoSecretJwtEncoderDecoder implements AppJwtEncoderDecoder {\n  private static final String SEPARATOR = \"\\\\+\";\n\n  @Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n\n  @Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }\n}","location":{"start":28,"insert":28,"offset":" ","indent":0},"item_type":"class","length":14},{"id":"9de0269a-c607-8791-0d4e-a682cb1571e6","ancestors":["d6fe1aea-be31-8a8b-a04b-ef19f3bdcce6"],"type":"function","description":"decodes a JSON Web Token (JWT) and returns an instance of the `AppJwt` class with the extracted values: user ID, expiration time.","params":[{"name":"encodedJwt","type_name":"String","description":"JSON Web Token (JWT) that needs to be decoded and converted into an instance of `AppJwt`.\n\n* `encodedJwt`: A string containing the encrypted JWT token, which is split into two parts using the provided separator `SEPARATOR`.\n* `secret`: The secret key used for decoding the JWT token.","complex_type":true},{"name":"secret","type_name":"String","description":"secret key used to verify the digital signature of the JWT, which is necessary for authenticating the user and determining whether the JWT has been tampered with.\n\nThe `encodedJwt` parameter is split into an array of strings using the `SEPARATOR` constant.\n\nThe first element in the array represents the user ID, which is used to construct the `AppJwt` object's `userId` field.\n\nThe second element in the array represents the expiration time of the JWT, which is converted to a `LocalDateTime` object using the `parse()` method. This object is then used to set the `expiration` field of the `AppJwt` object.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"an instance of `AppJwt` containing the user ID and expiration date extracted from the encoded JWT.\n\n* `AppJwt`: This is the class being modified to decode an JWT token.\n* `builder()`: This is a method used to create a new instance of the `AppJwt` class with default values.\n* `userId(strings[0])`: The `userId` property is set to the first element of the array `strings`, which is obtained by splitting the encoded JWT token using the `SEPARATOR`.\n* `expiration(LocalDateTime.parse(strings[1]))`: The `expiration` property is set to the second element of the array `strings`, which is a string in the format `YYYY-MM-DDTHH:mm:ssZ`. This value represents the expiration time of the JWT token.\n* `build()`: This method creates a new instance of the `AppJwt` class with the properties set using the `builder()` method.","complex_type":true},"usage":{"language":"java","code":"@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(\"\\\\+\");\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }\n}\n","description":"\n\nExample inputs for ('encodedJwt', 'String') are:\n"},"name":"decode","code":"@Override public AppJwt decode(String encodedJwt, String secret) {\n    String[] strings = encodedJwt.split(SEPARATOR);\n    return AppJwt.builder().userId(strings[0]).expiration(LocalDateTime.parse(strings[1])).build();\n  }","location":{"start":33,"insert":33,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"bdb780ab-2244-e0a1-e540-e761e91636d2","ancestors":["d6fe1aea-be31-8a8b-a04b-ef19f3bdcce6"],"type":"function","description":"takes a `AppJwt` object and a secret as input, and returns a modified `AppJwt` object with an additional field containing the user ID and expiration date.","params":[{"name":"jwt","type_name":"AppJwt","description":"JSON Web Token being encoded, which contains the user ID and expiration time.\n\n* `jwt`: A `AppJwt` object containing information about the JWT token, including the user ID and expiration time.","complex_type":true},{"name":"secret","type_name":"String","description":"secret key used to sign the JWT token.\n\n* `secret`: The secret used to sign the JWT.\n* `jwt`: The JWT object containing the user ID and expiration time.","complex_type":true}],"returns":{"type_name":"String","description":"a concatenation of the `userId` and `expiration` properties of the `AppJwt` object, separated by a separator.\n\n* `jwt.getUserId()`: This is a string representing the user ID.\n* `SEPARATOR`: This is a constant string used to separate the user ID and expiration time.\n* `jwt.getExpiration()`: This is an integer representing the expiration time of the JWT in milliseconds since the Unix epoch (January 1, 1970, 00:00:00 UTC).","complex_type":true},"usage":{"language":"java","code":"@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n}\n","description":"\nThis code uses the AppJwt object's getter methods to extract user ID and expiration time from the JWT token. It then concatenates these values with a \"+\" character (SEPARATOR) and returns the resulting string. This method would typically be used by other components in the system to encode a JWT token for transmission or storage, such as sending it over a network or storing it in a database.\n\nThe example inputs for this code are:\n"},"name":"encode","code":"@Override public String encode(AppJwt jwt, String secret) {\n    return jwt.getUserId() + SEPARATOR + jwt.getExpiration();\n  }","location":{"start":38,"insert":38,"offset":" ","indent":2},"item_type":"method","length":3}]}}}
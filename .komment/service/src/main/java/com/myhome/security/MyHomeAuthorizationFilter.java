{"name":"MyHomeAuthorizationFilter.java","path":"service/src/main/java/com/myhome/security/MyHomeAuthorizationFilter.java","content":{"structured":{"description":"A custom filter called MyHomeAuthorizationFilter that extends the BasicAuthenticationFilter from Spring Security. The filter checks for an authentication token in the HTTP request header and decodes it using the AppJwtEncoderDecoder class. If the token is valid, it sets the authentication token using the getAuthentication method and passes the request to the chain of filters.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.security.MyHomeAuthorizationFilter Pages: 1 -->\n<svg width=\"180pt\" height=\"93pt\"\n viewBox=\"0.00 0.00 180.00 93.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 89)\">\n<title>com.myhome.security.MyHomeAuthorizationFilter</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"172,-30 0,-30 0,0 172,0 172,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.security.MyHome</text>\n<text text-anchor=\"middle\" x=\"86\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">AuthorizationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"155.5,-85 16.5,-85 16.5,-66 155.5,-66 155.5,-85\"/>\n<text text-anchor=\"middle\" x=\"86\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BasicAuthenticationFilter</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M86,-55.65C86,-47.36 86,-37.78 86,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"82.5,-55.87 86,-65.87 89.5,-55.87 82.5,-55.87\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"e48c4612-edf8-f9a2-2a4f-30000adc8669","ancestors":[],"type":"function","description":"TODO","name":"MyHomeAuthorizationFilter","code":"public class MyHomeAuthorizationFilter extends BasicAuthenticationFilter {\n\n  private final Environment environment;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n\n  public MyHomeAuthorizationFilter(\n      AuthenticationManager authenticationManager,\n      Environment environment,\n      AppJwtEncoderDecoder appJwtEncoderDecoder) {\n    super(authenticationManager);\n    this.environment = environment;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n  }\n\n  @Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }\n\n  private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }\n}","location":{"start":33,"insert":33,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"e1bc13e9-01bc-f8ab-b347-76aec270293b","ancestors":["e48c4612-edf8-f9a2-2a4f-30000adc8669"],"type":"function","description":"filters incoming HTTP requests based on an authorization token found in the request header. If the token is present and does not start with a prefix specified in environment variables, it proceeds to the next stage of filtering. Otherwise, it sets an authentication token using getAuthentication() and then proceeds to the next stage of filtering.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that is being processed by the filter.\n\n* `authHeaderName`: String property that represents the name of the HTTP header field containing the authentication token.\n* `authHeaderPrefix`: String property that represents the prefix of the authentication token in the HTTP header field.\n* `authHeader`: String property that contains the value of the authentication token in the HTTP header field, which may or may not start with the specified prefix.\n* `request`: The original HTTP request object, which is deserialized and passed through the filter chain for further processing.","complex_type":true},{"name":"response","type_name":"HttpServletResponse","description":"response object that is being filtered by the chain of filters in the `doFilterInternal()` method.\n\n* `HttpServletResponse response`: This is an instance of the `HttpServletResponse` class, which provides information about the HTTP request and response, including headers, status codes, and other metadata.\n* `IOException IOException`: This is a subclass of `Throwable` that represents an error occurring during input/output operations, such as network connections or file I/O.\n* `ServletException ServletException`: This is a subclass of `Throwable` that represents an error occurring during the processing of an HTTP request by a servlet container, typically related to handling HTTP requests and responses.","complex_type":true},{"name":"chain","type_name":"FilterChain","description":"3rd party filter chain that the current filter will execute, allowing the current filter to perform additional processing before the next filter in the chain.\n\n* `request`: The original HTTP request object that triggered the filter chain execution.\n* `response`: The HTTP response object that the filter chain is processing.\n* `FilterChain`: An instance of the `FilterChain` interface, representing the sequence of filters that need to be executed for this request.\n* `getAuthentication()`: A method that retrieves an authentication token from the `request` object using the specified `authHeaderName` and `authHeaderPrefix`.\n* `SecurityContextHolder`: A class that provides a mechanism for storing and retrieving security-related information, including the current authentication token.","complex_type":true}],"usage":{"language":"java","code":"import javax.servlet.*;\nimport javax.servlet.http.*;\n\npublic class ExampleServlet extends HttpServlet {\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        // Get the authorization header from the request\n        String authHeader = request.getHeader(\"Authorization\");\n        \n        // Check if the authorization header is present and starts with \"Bearer\"\n        if (authHeader != null && authHeader.startsWith(\"Bearer\")) {\n            // Extract the token from the header\n            String token = authHeader.substring(7);\n            \n            // Use the token to authenticate the user\n            UsernamePasswordAuthenticationToken authentication = getAuthentication(token);\n            SecurityContextHolder.getContext().setAuthentication(authentication);\n        }\n        \n        // Call the next filter in the chain\n        chain.doFilter(request, response);\n    }\n}\n","description":""},"name":"doFilterInternal","code":"@Override\n  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,\n      FilterChain chain) throws IOException, ServletException {\n    String authHeaderName = environment.getProperty(\"authorization.token.header.name\");\n    String authHeaderPrefix = environment.getProperty(\"authorization.token.header.prefix\");\n\n    String authHeader = request.getHeader(authHeaderName);\n    if (authHeader == null || !authHeader.startsWith(authHeaderPrefix)) {\n      chain.doFilter(request, response);\n      return;\n    }\n\n    UsernamePasswordAuthenticationToken authentication = getAuthentication(request);\n    SecurityContextHolder.getContext().setAuthentication(authentication);\n    chain.doFilter(request, response);\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2},"item_type":"method","length":16},{"id":"684e7024-47b8-139b-d34d-18a3eb1ddc3f","ancestors":["e48c4612-edf8-f9a2-2a4f-30000adc8669"],"type":"function","description":"retrieves an authentication token from a request header and decodes it to obtain a user ID. It then creates a `UsernamePasswordAuthenticationToken` instance with the user ID and no credentials.","params":[{"name":"request","type_name":"HttpServletRequest","description":"HTTP request that is being processed and provides the authorization token header value.\n\n* `getHeader()` method is called on the `HttpServletRequest` object to retrieve an HTTP header value. The property name returned by this method is specified as an environment property (`\"authorization.token.header.name\"`).\n* The retrieved header value is stored in a variable named `authHeader`.\n* A substring of the `authHeader` value is extracted using string manipulation, specifically replacing a prefix specified by another environment property (`\"authorization.token.header.prefix\"`). This results in a shorter token value.\n* The decoded JWT token contained within the `authHeader` value is retrieved using an instance of the `appJwtEncoderDecoder` class and the `decode()` method.\n* The `Jwt` object returned by this method contains a `userId` property, which is then used to create a new `UsernamePasswordAuthenticationToken` instance. This token has no credentials (i.e., an empty list ofPrincipal and Credentials).","complex_type":true}],"returns":{"type_name":"UsernamePasswordAuthenticationToken","description":"a `UsernamePasswordAuthenticationToken` instance containing the user ID and an empty list of roles.\n\n* `usernamePasswordAuthenticationToken`: This is an instance of the `UsernamePasswordAuthenticationToken` class, which represents a user authentication token containing the user ID and a password.\n* `userID`: This property is of type `Long`, representing the unique identifier of the user who made the request.\n* `password`: This property is of type `String`, representing the password associated with the user ID.\n* `authorizationHeader`: This property is of type `String`, representing the authorization header received in the HTTP request.\n* `tokenSecret`: This property is of type `String`, representing the secret key used to decode the JWT token.\n\nOverall, the `getAuthentication` function returns a user authentication token containing the user ID and password, which can be used for authentication purposes.","complex_type":true},"usage":{"language":"java","code":"@PostMapping(\"/login\")\npublic ResponseEntity<String> login(@RequestBody User user) {\n    String token = getAuthentication(user).getToken(); //token returned from JWT encoder\n    return new ResponseEntity<>(token, HttpStatus.OK);\n}\n","description":""},"name":"getAuthentication","code":"private UsernamePasswordAuthenticationToken getAuthentication(HttpServletRequest request) {\n    String authHeader =\n        request.getHeader(environment.getProperty(\"authorization.token.header.name\"));\n    if (authHeader == null) {\n      return null;\n    }\n\n    String token =\n        authHeader.replace(environment.getProperty(\"authorization.token.header.prefix\"), \"\");\n    AppJwt jwt = appJwtEncoderDecoder.decode(token, environment.getProperty(\"token.secret\"));\n\n    if (jwt.getUserId() == null) {\n      return null;\n    }\n    return new UsernamePasswordAuthenticationToken(jwt.getUserId(), null, Collections.emptyList());\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":16}]}}}
{"name":"BookingSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/BookingSDJpaService.java","content":{"structured":{"description":"A `BookingSDJpaService` class that implements `BookingService` interface using Spring Data JPA. The service provides a method `deleteBooking()` that takes amenity ID and booking ID as parameters and deletes a booking item from the repository based on the amenity ID. The method is transactional and uses `Optional` to check if the booking item exists before deleting it.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.springdatajpa.BookingSDJpaService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.springdatajpa.BookingSDJpaService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">BookingSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"interfacecom_1_1myhome_1_1services_1_1BookingService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"185,-96 15,-96 15,-66 185,-66 185,-96\"/>\n<text text-anchor=\"start\" x=\"23\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.Booking</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"069bbb7e-12b5-acac-014c-ccebc6de6195","ancestors":[],"type":"function","description":"TODO","name":"BookingSDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class BookingSDJpaService implements BookingService {\n\n  private final AmenityBookingItemRepository bookingRepository;\n\n  @Transactional\n  @Override\n  public boolean deleteBooking(String amenityId, String bookingId) {\n    Optional<AmenityBookingItem> booking =\n        bookingRepository.findByAmenityBookingItemId(bookingId);\n    return booking.map(bookingItem -> {\n      boolean amenityFound =\n          bookingItem.getAmenity().getAmenityId().equals(amenityId);\n      if (amenityFound) {\n        bookingRepository.delete(bookingItem);\n        return true;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":23},{"id":"4a7bdeb8-fda0-6288-0042-920b63640420","ancestors":["069bbb7e-12b5-acac-014c-ccebc6de6195"],"type":"function","description":"deletes a booking from the repository based on the amenity ID and booking ID provided. It first finds the booking item with the given IDs, then checks if the amenity associated with the booking item matches the provided amenity ID. If it does, the function deletes the booking item from the repository and returns `true`. Otherwise, it returns `false`.","params":[{"name":"amenityId","type_name":"String","description":"ID of the amenity that the booking item belongs to, which is used to determine whether the booking item should be deleted.\n\n* `Optional<AmenityBookingItem> booking`: This is an optional reference to a `AmenityBookingItem` object in the repository. If no matching booking item is found, this will be `Optional.empty()`.\n* `AmenityBookingItem amenityBookingItem`: This is a `AmenityBookingItem` class that represents a single booking item in the database. It has an `AmenityId` property that references the `amenityId` passed as input.\n* `getAmenity():` This method returns a reference to the `Amenity` object associated with the `AmenityBookingItem`.\n* `orElse(false):` This method returns a boolean value indicating whether a booking item with the specified `bookingId` exists in the database. If no such booking item is found, it returns `false`. Otherwise, it returns `true`.","complex_type":true},{"name":"bookingId","type_name":"String","description":"unique identifier of a booking item that needs to be deleted.\n\n* `amenityId`: The ID of the amenity associated with the booking item to be deleted.\n* `bookingItem`: The booking item containing the information about the booking, including its ID.","complex_type":true}],"returns":{"type_name":"Boolean","description":"a boolean value indicating whether the booking item was successfully deleted.\n\n* The function returns a boolean value indicating whether the booking item was successfully deleted or not.\n* The `Optional<AmenityBookingItem>` returned by the `bookingRepository.findByAmenityBookingItemId(bookingId)` method represents the found booking item, if any. If no booking item is found, the `Optional` will be `empty`.\n* The `map` method is used to check whether the found booking item has the correct amenity ID. If the amenity ID matches the input `amenityId`, the method returns a boolean value indicating whether the booking item should be deleted or not.\n* If the `Optional` is `empty`, the function returns `false`. Otherwise, it returns `true`.","complex_type":true},"usage":{"language":"java","code":"deleteBooking(\"amenity-1\", \"booking-1\")\n","description":"\nThis will delete a booking with the ID of \"booking-1\" from the amenity with the ID of \"amenity-1\"."},"name":"deleteBooking","code":"@Transactional\n  @Override\n  public boolean deleteBooking(String amenityId, String bookingId) {\n    Optional<AmenityBookingItem> booking =\n        bookingRepository.findByAmenityBookingItemId(bookingId);\n    return booking.map(bookingItem -> {\n      boolean amenityFound =\n          bookingItem.getAmenity().getAmenityId().equals(amenityId);\n      if (amenityFound) {\n        bookingRepository.delete(bookingItem);\n        return true;\n      } else {\n        return false;\n      }\n    }).orElse(false);\n  }","location":{"start":17,"insert":17,"offset":" ","indent":2},"item_type":"method","length":16}]}}}
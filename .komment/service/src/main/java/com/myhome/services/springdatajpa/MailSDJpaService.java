{"name":"MailSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/MailSDJpaService.java","content":{"structured":{"description":"A MailSDJpaService class that implements the MailService interface. It uses Spring Data JPA, Spring Boot Autoconfigure, and Thymeleaf for email templating. The class provides methods for sending password recovery codes, successfully changed passwords, account creation confirmation links, and account confirmation emails.","items":[{"id":"7071a916-45c0-eaa3-8944-9c71bf0b0aed","ancestors":[],"type":"function","description":"TODO","name":"MailSDJpaService","code":"@Service\n@ConditionalOnProperty(value = \"spring.mail.devMode\", havingValue = \"false\", matchIfMissing = false)\n@RequiredArgsConstructor\n@Slf4j\npublic class MailSDJpaService implements MailService {\n\n  private final ITemplateEngine emailTemplateEngine;\n  private final JavaMailSender mailSender;\n  private final ResourceBundleMessageSource messageSource;\n  private final MailProperties mailProperties;\n\n  @Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }\n\n  @Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }\n\n  private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n    MimeMessage message = mailSender.createMimeMessage();\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n    helper.setFrom(mailProperties.getUsername());\n    helper.setTo(to);\n    helper.setSubject(subject);\n    helper.setText(htmlBody, true);\n    mailSender.send(message);\n  }\n\n  private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }\n\n  private String getAccountConfirmLink(User user, SecurityToken token) {\n    String baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\n    return String.format(\"%s/users/%s/email-confirm/%s\", baseUrl, user.getUserId(), token.getToken());\n  }\n\n  private String getLocalizedMessage(String prop) {\n    String message = \"\";\n    try {\n      message = messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n    } catch (Exception e) {\n      message = prop + \": localization error\";\n    }\n    return message;\n  }\n\n}","location":{"start":26,"insert":26,"offset":" ","indent":0},"item_type":"class","length":96},{"id":"e86971ca-855c-09ae-714e-19b58e4f3377","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"sends a password recovery email to a user with a randomly generated code.","params":[{"name":"user","type_name":"User","description":"user for whom the password recovery code is being generated and sent.\n\n* `user.getName()` represents the user's name.\n* `randomCode` is a string parameter representing the random code sent to the user for password recovery.","complex_type":true},{"name":"randomCode","type_name":"String","description":"6-digit recovery code sent to the user's email address for password reset.\n\n* `randomCode`: A String that represents a unique code sent to the user for password recovery.\n\nThe function first creates a `Map<String, Object>` template model with two key-value pairs: `username` and `recoverCode`. These values are then used to construct an email subject and message using the `send` function. The `mailSent` boolean value is returned as the function result.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email with a password recovery code was successfully sent to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }\n","description":"\nThe method is overridden from the parent class and takes two parameters. The first parameter user is of type User and represents a user in the system. The second parameter randomCode is of type String and represents a unique code sent to the user for password recovery.\n\nTo use this method, you can call it with any instance of the User class and a unique String as shown below:\n"},"name":"sendPasswordRecoverCode","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"recoverCode\", randomCode);\n    String passwordRecoverSubject = getLocalizedMessage(\"locale.EmailSubject.passwordRecover\");\n    boolean mailSent = send(user.getEmail(), passwordRecoverSubject,\n        MailTemplatesNames.PASSWORD_RESET.filename, templateModel);\n    return mailSent;\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2},"item_type":"method","length":10},{"id":"0584ea3c-30ef-11b1-b549-015ad4672628","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"maps user information to a template model and sends an email to the user's email address with the subject \"locale.EmailSubject.passwordChanged\".","params":[{"name":"user","type_name":"User","description":"user whose password has been successfully changed, providing the necessary information to craft the email notification.\n\n* `name`: A `String` property representing the user's name.\n* `email`: An `EmailAddress` property representing the user's email address.\n\nThe function creates a `Map` called `templateModel`, which contains a single entry with the key being `username` and the value being the `name` of the user. The function then sends an email using the `send` method, passing in the user's email address and a customized subject derived from a localized message using the `getLocalizedMessage` method. The email is sent using the `MailTemplatesNames.PASSWORD_CHANGED.filename` template file name.\n\nThe function returns a boolean value indicating whether the email was successfully sent.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was successfully sent to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }\n","description":""},"name":"sendPasswordSuccessfullyChanged","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String passwordChangedSubject = getLocalizedMessage(\"locale.EmailSubject.passwordChanged\");\n    boolean mailSent = send(user.getEmail(), passwordChangedSubject,\n        MailTemplatesNames.PASSWORD_CHANGED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":48,"insert":48,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"7f0efdf3-3759-9caf-9b4e-68230920e480","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"maps user and security token data to a message template and sends an email confirmation link to the user's registered email address.","params":[{"name":"user","type_name":"User","description":"user whose account is being created and confirmed.\n\n* `user`: The user object containing the name and email fields.\n\nThe function first creates a map of template model objects, where the `username` field is set to the user's name and the `emailConfirmLink` field is set to the link for confirming the account creation via email. Then, it sends an email with the subject \"locale.EmailSubject.accountCreated\" using the `MailTemplatesNames.ACCOUNT_CREATED.filename` template file, passing in the `user.getEmail()` address and the map of template model objects as parameters. Finally, it returns a boolean value indicating whether the email was sent successfully or not.","complex_type":true},{"name":"emailConfirmToken","type_name":"SecurityToken","description":"email confirmation token for the created account, which is used to verify the user's email address during the account confirmation process.\n\n* `user`: A `User` object representing the user whose account was created.\n* `securityToken`: A unique token generated by the server for email confirmation.\n\nThe `templateModel` is created with two properties:\n\n* `username`: The username of the newly created account.\n* `emailConfirmLink`: The URL of the email confirmation page.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"public class UserService {\n    public void createUser(User user) {\n        SecurityToken emailConfirmToken = new SecurityToken();\n        // Save the token to a database or a file\n        boolean success = mailService.sendAccountCreated(user, emailConfirmToken);\n        \n        if (success) {\n            // Successful email send\n        } else {\n            // Failed email send\n        }\n    }\n}\n","description":"\nIn this example, the method sendAccountCreated is used to create an account for a user. First, we create a new SecurityToken object and save it to the database or a file. We then pass this token to the sendAccountCreated method, along with the user's email address and the template name of the account created message. The method returns true if the email is sent successfully, and false otherwise."},"name":"sendAccountCreated","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    Map<String, Object> templateModel = new HashMap<>();\n    String emailConfirmLink = getAccountConfirmLink(user, emailConfirmToken);\n    templateModel.put(\"username\", user.getName());\n    templateModel.put(\"emailConfirmLink\", emailConfirmLink);\n    String accountCreatedSubject = getLocalizedMessage(\"locale.EmailSubject.accountCreated\");\n    boolean mailSent = send(user.getEmail(), accountCreatedSubject,\n        MailTemplatesNames.ACCOUNT_CREATED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":58,"insert":58,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"7e5af200-7bb2-7ea1-6641-3a9381c896f0","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"sends an email to a user with a subject containing information about their account being confirmed.","params":[{"name":"user","type_name":"User","description":"User object containing the user's information that is being confirmed.\n\n* `username`: A string representing the user's name.\n\nThe function then proceeds to create and send an email using the `send` method, with the subject generated from a localized message (\"locale.EmailSubject.accountConfirmed\"). The template filename is retrieved from the `MailTemplatesNames.ACCOUNT_CONFIRMED` constant, and the `templateModel` map contains the user's name as its single entry. Finally, the function returns a boolean value indicating whether the email was sent successfully.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether an email was sent successfully to the user's registered email address.","complex_type":false},"usage":{"language":"java","code":"Map<String, Object> templateModel = new HashMap<>();\ntemplateModel.put(\"username\", user.getName());\nString accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\nboolean mailSent = send(user.getEmail(), accountConfirmedSubject, MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n","description":""},"name":"sendAccountConfirmed","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    Map<String, Object> templateModel = new HashMap<>();\n    templateModel.put(\"username\", user.getName());\n    String accountConfirmedSubject = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n    boolean mailSent = send(user.getEmail(), accountConfirmedSubject,\n        MailTemplatesNames.ACCOUNT_CONFIRMED.filename, templateModel);\n    return mailSent;\n  }","location":{"start":70,"insert":70,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"093bac73-403c-50a7-3047-1228dd98c3a7","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"creates an email message using a `MimeMessage` object and sends it to a specified recipient with a customized subject and body.","params":[{"name":"to","type_name":"String","description":"email address of the recipient to whom the HTML message will be sent.\n\n* `to`: The String representing the recipient's email address. It can be an individual email address or an email address range separated by commas (e.g., \"john@example.com,mary@example.com\").\n* `subject`: The String representing the email subject line. It is a concise description of the message's content.\n* `htmlBody`: The String containing the HTML body of the message. It can include formatting, images, links, and other elements to enhance the message's presentation.","complex_type":true},{"name":"subject","type_name":"String","description":"subject line of the email to be sent.\n\n* `to`: The email address of the recipient.\n* `subject`: A string that represents the subject line of the email. It can contain various attributes such as the recipient's name, a brief description of the message, and any formatting options.\n* `htmlBody`: The HTML content of the email message.","complex_type":true},{"name":"htmlBody","type_name":"String","description":"HTML content of the message to be sent through email.\n\n* `true`: indicates whether the message body is in HTML format\n* `\"UTF-8\"`: represents the encoding format of the message body\n* `mailProperties.getUsername()`: retrieves the username for sending emails\n* `to`: specifies the recipient's email address\n* `subject`: defines the subject line of the email\n* `htmlBody`: contains the HTML content of the message","complex_type":true}],"usage":{"language":"java","code":"private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n  MimeMessage message = mailSender.createMimeMessage();\n  MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n  helper.setFrom(mailProperties.getUsername());\n  helper.setTo(to);\n  helper.setSubject(subject);\n  helper.setText(htmlBody, true);\n  mailSender.send(message);\n}\n","description":""},"name":"sendHtmlMessage","code":"private void sendHtmlMessage(String to, String subject, String htmlBody) throws MessagingException {\n    MimeMessage message = mailSender.createMimeMessage();\n    MimeMessageHelper helper = new MimeMessageHelper(message, true, \"UTF-8\");\n    helper.setFrom(mailProperties.getUsername());\n    helper.setTo(to);\n    helper.setSubject(subject);\n    helper.setText(htmlBody, true);\n    mailSender.send(message);\n  }","location":{"start":80,"insert":80,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"c9fbd88c-868a-65a4-da43-04f353588f9b","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"takes an email recipient (`emailTo`), subject, template name, and model as input. It then uses Thymeleaf to process the template and generates an HTML message body. Finally, it sends the message using a mail client.","params":[{"name":"emailTo","type_name":"String","description":"email address to which the HTML message will be sent.\n\n* `emailTo`: This is a string parameter representing the email address to which the message will be sent.\n\nThe rest of the code in the function can be executed without modification.","complex_type":true},{"name":"subject","type_name":"String","description":"subject line of the email to be sent.\n\n* `String subject`: The subject line of the email to be sent.\n* `emailTo`: The recipient's email address.\n* `templateName`: The name of the Thymeleaf template to be processed for the email body.\n* `templateModel`: A map of Thymeleaf model objects that are passed as variables to the template engine for rendering.","complex_type":true},{"name":"templateName","type_name":"String","description":"name of the Thymeleaf template to be processed and rendered into an HTML message for sending via email.\n\n* `String`: The name of the Thymeleaf template to be processed.\n* `Context`: An object that contains variables and other contextual information for the template processing.\n* `LocaleContextHolder`: A class that provides access to the current locale.\n* `emailTo`: The recipient's email address.\n* `subject`: The subject of the email message.\n* `templateModel`: A map containing variables and other data that can be used in the template.","complex_type":true},{"name":"templateModel","type_name":"Map<String, Object>","description":"map of data that will be used to populate the email template using Thymeleaf, allowing for dynamic content and formatting.\n\n* `LocaleContextHolder`: This is an instance of `LocaleContextHolder`, which manages the locale context for Thymeleaf template engine.\n* `Map<String, Object>`: This is a map containing key-value pairs representing the variables that will be used in the template.\n* `emailTo`: This is a string representing the email address to send the message to.\n* `subject`: This is a string representing the subject of the email.\n* `templateName`: This is a string representing the name of the Thymeleaf template to use for rendering the email message.\n\nThe function first creates a `Context` instance using the `LocaleContextHolder`, and sets the variables in the `templateModel` map as its variables. Then, it uses the `emailTemplateEngine` to process the `templateName` with the `thymeleafContext`, and generates an HTML body from the resulting template output. Finally, the function sends the email message using the `sendHtmlMessage` function.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the email was sent successfully or not.","complex_type":false},"usage":{"language":"java","code":"send(\"email@example.com\", \"Subject\", \"TemplateName\", templateModel);\n","description":"\nIn this example, `emailTo` is set to the email address of the recipient, `subject` is set to the subject line of the message, and `templateName` is the name of the email template that will be used to generate the message body. The method also takes a map as input for the variable `templateModel`, which contains the data that will be inserted into the template.\nThe method returns a boolean value indicating whether or not the message was sent successfully."},"name":"send","code":"private boolean send(String emailTo, String subject, String templateName, Map<String, Object> templateModel) {\n    try {\n      Context thymeleafContext = new Context(LocaleContextHolder.getLocale());\n      thymeleafContext.setVariables(templateModel);\n      String htmlBody = emailTemplateEngine.process(templateName, thymeleafContext);\n      sendHtmlMessage(emailTo, subject, htmlBody);\n    } catch (MailException | MessagingException mailException) {\n      log.error(\"Mail send error!\", mailException);\n      return false;\n    }\n    return true;\n  }","location":{"start":90,"insert":90,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"25c1db9c-1ab8-21b7-e24e-62bc8ba0c489","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"generates a hyperlink for an email confirmation process for a user. The base URL is constructed from the current context path, and the user's ID and security token are appended to form the full URL.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user for whom the confirmation link will be generated.\n\n* `user`: A `User` object representing the current user whose email confirmation link is being generated.\n* `token`: An instance of `SecurityToken`, which contains a unique token for authenticating the user's account confirmation request.","complex_type":true},{"name":"token","type_name":"SecurityToken","description":"email confirmation token that is to be linked with the user's account, which is generated by the server-side code and passed as a security token to the client-side code for the purpose of verifying the user's identity.\n\n* `token.getToken()`: The value of this property represents the token to be used in the URL for email confirmation.\n* `user.getUserId()`: The value of this property represents the user ID for whom the email confirmation link is being generated.","complex_type":true}],"returns":{"type_name":"String","description":"a URL string containing the base URL and user ID, followed by the email confirmation token.\n\n* `baseUrl`: The base URL of the application, which is generated using the `ServletUriComponentsBuilder` class.\n* `userId`: The user ID of the user for whom the email confirmation link is being generated.\n* `token`: The security token generated by the application, which is used to authenticate the user and prevent unauthorized access to the link.","complex_type":true},"usage":{"language":"java","code":"public class UserService {\n    private MailSDJpaService mailService;\n\n    public User createUser(String name, String email) throws MessagingException {\n        User user = new User();\n        user.setName(name);\n        user.setEmail(email);\n        saveUser(user);\n        SecurityToken token = generateSecurityToken(user);\n        mailService.sendAccountCreated(user, token);\n    }\n}\n","description":""},"name":"getAccountConfirmLink","code":"private String getAccountConfirmLink(User user, SecurityToken token) {\n    String baseUrl = ServletUriComponentsBuilder.fromCurrentContextPath()\n        .replacePath(null)\n        .build()\n        .toUriString();\n    return String.format(\"%s/users/%s/email-confirm/%s\", baseUrl, user.getUserId(), token.getToken());\n  }","location":{"start":103,"insert":103,"offset":" ","indent":2},"item_type":"method","length":7},{"id":"c8496700-9c8b-e790-aa4b-987e8752f926","ancestors":["7071a916-45c0-eaa3-8944-9c71bf0b0aed"],"type":"function","description":"retrieves a localized message from a message source based on a property name, handling any exceptions that may occur during the process.","params":[{"name":"prop","type_name":"String","description":"property key for which a localized message is being retrieved.\n\n* `prop`: A string input parameter representing the key for which a localized message is to be retrieved from the message source.\n* `messageSource`: An object that provides localized messages based on the passed key.\n* `LocaleContextHolder`: Holds the current locale context, which is used to retrieve the appropriate message from the message source.","complex_type":true}],"returns":{"type_name":"String","description":"a localized message for a given property, or an error message if there was an exception during localization.\n\n* `message`: A string that is generated by calling the `getMessage` method of the `messageSource` object, passing in the `prop` parameter as a string and ignoring any null values.\n* `prop`: The input parameter passed to the function, which represents the key for the message to be localized.\n* `LocaleContextHolder`: A class that provides a way to access the current locale context of the application, which is used to determine the correct message to return.\n\nThe function returns a string that contains the localized message for the provided property, or a default message if there is an error in localization.","complex_type":true},"usage":{"language":"java","code":"private String getLocalizedMessage(String prop) {\n    return messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n}\n\n...\n\nString message = getLocalizedMessage(\"locale.EmailSubject.accountConfirmed\");\n","description":""},"name":"getLocalizedMessage","code":"private String getLocalizedMessage(String prop) {\n    String message = \"\";\n    try {\n      message = messageSource.getMessage(prop, null, LocaleContextHolder.getLocale());\n    } catch (Exception e) {\n      message = prop + \": localization error\";\n    }\n    return message;\n  }","location":{"start":111,"insert":111,"offset":" ","indent":2},"item_type":"method","length":9}]}}}
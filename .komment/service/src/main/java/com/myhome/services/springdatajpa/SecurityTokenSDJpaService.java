{"name":"SecurityTokenSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/SecurityTokenSDJpaService.java","content":{"structured":{"description":"A SecurityTokenService class that implements SecurityToken Service interface using Spring Data JPA. It provides methods for creating email confirmation tokens, password reset tokens, and saving used tokens in a repository. The service uses Lombok to inject dependencies and utilizes Spring Beans factory annotation to provide the dependencies.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"d010be33-fa4f-63b7-2f46-b7a4597606e4","ancestors":[],"type":"function","description":"TODO","name":"SecurityTokenSDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class SecurityTokenSDJpaService implements SecurityTokenService {\n\n  private final SecurityTokenRepository securityTokenRepository;\n\n  @Value(\"${tokens.reset.expiration}\")\n  private Duration passResetTokenTime;\n  @Value(\"${tokens.email.expiration}\")\n  private Duration emailConfirmTokenTime;\n\n  private SecurityToken createSecurityToken(SecurityTokenType tokenType, Duration liveTimeSeconds, User tokenOwner) {\n    String token = UUID.randomUUID().toString();\n    LocalDate creationDate = LocalDate.now();\n    LocalDate expiryDate = getDateAfterDays(LocalDate.now(), liveTimeSeconds);\n    SecurityToken newSecurityToken = new SecurityToken(tokenType, token, creationDate, expiryDate, false, null);\n    newSecurityToken.setTokenOwner(tokenOwner);\n    newSecurityToken = securityTokenRepository.save(newSecurityToken);\n    return newSecurityToken;\n  }\n\n  @Override\n  public SecurityToken createEmailConfirmToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.EMAIL_CONFIRM, emailConfirmTokenTime, tokenOwner);\n  }\n\n  @Override\n  public SecurityToken createPasswordResetToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.RESET, passResetTokenTime, tokenOwner);\n  }\n\n  @Override\n  public SecurityToken useToken(SecurityToken token) {\n    token.setUsed(true);\n    token = securityTokenRepository.save(token);\n    return token;\n  }\n\n  private LocalDate getDateAfterDays(LocalDate date, Duration liveTime) {\n    return date.plusDays(liveTime.toDays());\n  }\n}","location":{"start":16,"insert":16,"offset":" ","indent":0},"item_type":"class","length":42},{"id":"d1d4f853-94ce-5a82-e64f-fc29c0875a8c","ancestors":["d010be33-fa4f-63b7-2f46-b7a4597606e4"],"type":"function","description":"generates a unique token, sets its expiration date based on a provided duration, and saves it to a repository for storage.","params":[{"name":"tokenType","type_name":"SecurityTokenType","description":"type of security token being created, which determines the characteristics of the token.\n\n* `tokenType`: This parameter represents the type of security token being created, which can be one of several predefined values (e.g., `ClientCertificate`, `SymmetricKey`, etc.).\n* `liveTimeSeconds`: The duration in seconds that the security token is valid for, starting from the creation date.\n* `tokenOwner`: The user who owns the security token.","complex_type":true},{"name":"liveTimeSeconds","type_name":"Duration","description":"duration of time that the security token is valid, which is used to calculate the expiration date of the token.\n\n* `liveTimeSeconds`: A `Duration` object representing the lifetime of the security token in seconds.\n* `Duration`: A class that represents a period of time, represented as an interval between two points in time, usually measured in seconds or milliseconds.\n* `LocalDate`: A class that represents a date and time in the form of a combination of year, month, day, hour, minute, and second values.\n* `getDateAfterDays`: A method that retrieves a new date that is a specified number of days after the current date.","complex_type":true},{"name":"tokenOwner","type_name":"User","description":"user who owns the security token being created.\n\n* `tokenOwner`: The user who owns the security token.\n* `LocalDate creationDate`: The date and time when the security token was created.\n* `LocalDate expiryDate`: The date and time when the security token will expire.\n* `boolean isActive`: A boolean value indicating whether the security token is active or inactive.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a newly created security token with a unique identifier, creation and expiry dates, and a token owner.\n\n* `token`: A unique token string generated using UUID.randomUUID() method.\n* `creationDate`: The current date and time when the security token was created, represented as a LocalDate object.\n* `expiryDate`: The date and time after which the security token will expire, calculated by subtracting the specified number of days from the current date and time using the getDateAfterDays() method. Represented as a LocalDate object.\n* `tokenOwner`: The user who owns the security token, represented as an instance of the User class.\n* `newSecurityToken`: An instance of the SecurityToken class, containing all the properties and attributes of the created security token.","complex_type":true},"usage":{"language":"java","code":"User user = new User(\"johnDoe@email.com\", \"password123\");\n// Create a password reset token for the user with a 30 day expiration time\nSecurityToken resetToken = createSecurityToken(SecurityTokenType.RESET, Duration.ofDays(30), user);\nSystem.out.println(\"Password Reset Token: \" + resetToken.getToken());\n","description":""},"name":"createSecurityToken","code":"private SecurityToken createSecurityToken(SecurityTokenType tokenType, Duration liveTimeSeconds, User tokenOwner) {\n    String token = UUID.randomUUID().toString();\n    LocalDate creationDate = LocalDate.now();\n    LocalDate expiryDate = getDateAfterDays(LocalDate.now(), liveTimeSeconds);\n    SecurityToken newSecurityToken = new SecurityToken(tokenType, token, creationDate, expiryDate, false, null);\n    newSecurityToken.setTokenOwner(tokenOwner);\n    newSecurityToken = securityTokenRepository.save(newSecurityToken);\n    return newSecurityToken;\n  }","location":{"start":27,"insert":27,"offset":" ","indent":2},"item_type":"method","length":9},{"id":"416398f8-f1dd-c59b-e741-04ed0cd1da9f","ancestors":["d010be33-fa4f-63b7-2f46-b7a4597606e4"],"type":"function","description":"creates an email confirmation security token for a specified user based on the current time and the user's identity.","params":[{"name":"tokenOwner","type_name":"User","description":"user for whom the email confirmation token is being generated.\n\n* `tokenOwner`: A `User` object representing the user whose email confirmation token is being generated. The `User` class has attributes such as `id`, `username`, `email`, and `password`.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a SecurityToken object representing an email confirmation token.\n\n* `SecurityTokenType`: This field denotes the type of security token created, which is specifically `EMAIL_CONFIRM`.\n* `emailConfirmTokenTime`: The time at which the email confirm token was generated.\n* `tokenOwner`: The user whose email confirmation token has been created and returned.","complex_type":true},"usage":{"language":"java","code":"// assuming 'tokenOwner' is an instance of the User class\nSecurityToken emailConfirmToken = securityTokenService.createEmailConfirmToken(tokenOwner);\n","description":"\nIn this example, we are creating a new SecurityToken using the createEmailConfirmToken method with 'tokenOwner' as input. The method creates a new SecurityToken of type EMAIL_CONFIRM and saves it to the database using the securityTokenRepository instance."},"name":"createEmailConfirmToken","code":"@Override\n  public SecurityToken createEmailConfirmToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.EMAIL_CONFIRM, emailConfirmTokenTime, tokenOwner);\n  }","location":{"start":37,"insert":37,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"b6c69a60-da33-7284-2b49-4e4726afa519","ancestors":["d010be33-fa4f-63b7-2f46-b7a4597606e4"],"type":"function","description":"creates a security token for password reset with a specified expiration time and associated with the provided user.","params":[{"name":"tokenOwner","type_name":"User","description":"user for whom a password reset token is being created.\n\n* `tokenOwner`: A `User` object representing the user whose password reset token is being generated. This object contains information about the user's account, such as their username and email address.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a security token with a type of `RESET` and a creation time stamped at `passResetTokenTime`.\n\n* `SecurityTokenType`: This is an instance of the `SecurityTokenType` class, which represents the type of security token being generated. In this case, it is set to `RESET`, indicating that the token is for password reset purposes.\n* `passResetTokenTime`: This is a long value representing the time at which the password reset token was created. It is used in conjunction with other data to ensure the token's validity and relevance.\n* `tokenOwner`: This is an instance of the `User` class, which represents the user for whom the password reset token is being generated. The token is personalized to this user.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public SecurityToken createPasswordResetToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.RESET, passResetTokenTime, tokenOwner);\n  }\n","description":"\nThis code creates a security token of type RESET with the specified expiration time."},"name":"createPasswordResetToken","code":"@Override\n  public SecurityToken createPasswordResetToken(User tokenOwner) {\n    return createSecurityToken(SecurityTokenType.RESET, passResetTokenTime, tokenOwner);\n  }","location":{"start":42,"insert":42,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"7510950e-0af4-7bab-b444-fe03dc033c53","ancestors":["d010be33-fa4f-63b7-2f46-b7a4597606e4"],"type":"function","description":"updates a provided `SecurityToken` instance and persists it to the repository, making it available for further use.","params":[{"name":"token","type_name":"SecurityToken","description":"SecurityToken object that is being used by the method, and its `used` field is set to `true` before saving it in the security token repository using the `save()` method.\n\n* `setUsed(true)` marks the token as used to indicate that it has been consumed in a security context.\n* `securityTokenRepository.save(token)` persists the modified token in the repository for future access.","complex_type":true}],"returns":{"type_name":"SecurityToken","description":"a modified SecurityToken object with the `used` field set to `true` and saved in the repository.\n\n* The `token` object is assigned a new value, which is saved in the `securityTokenRepository`.\n* The `used` attribute of the token is set to `true`.\n* The token's identity is persisted in the repository.","complex_type":true},"usage":{"language":"java","code":"@Override\n  public SecurityToken useToken(SecurityToken token) {\n    token.setUsed(true);\n    token = securityTokenRepository.save(token);\n    return token;\n  }\n\n// Example usage of the above method\nSecurityToken token = new SecurityToken(\"some-token\", LocalDate.now(), Duration.ofDays(30));\nuseToken(token);\n","description":""},"name":"useToken","code":"@Override\n  public SecurityToken useToken(SecurityToken token) {\n    token.setUsed(true);\n    token = securityTokenRepository.save(token);\n    return token;\n  }","location":{"start":47,"insert":47,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"77c3a5b9-6891-a7b0-414d-25231dc70e0b","ancestors":["d010be33-fa4f-63b7-2f46-b7a4597606e4"],"type":"function","description":"takes a `LocalDate` and a `Duration` as input, and returns a new `LocalDate` representing the date after the specified number of days have passed since the original date.","params":[{"name":"date","type_name":"LocalDate","description":"LocalDate that is being modified by adding a specified number of days.\n\nLocalDate is an immutable date-time value object that represents a point in time. It has several properties, including year, month, day of the month, and hour of the day. The `plusDays` method calculates the date after adding a specified number of days to the original date.","complex_type":true},{"name":"liveTime","type_name":"Duration","description":"number of days that must elapse after the original `date` before the method returns a new `LocalDate`.\n\n* `toDays()` is a method that converts a `Duration` object into a number of days.","complex_type":true}],"returns":{"type_name":"LocalDate","description":"a new LocalDate that represents the date after adding the specified number of days to the given date.\n\n* The output is a `LocalDate` object representing the date after adding the specified number of days to the given `date`.\n* The `date` parameter is non-null and represents a valid `LocalDate` value.\n* The `liveTime` parameter is non-null and represents a valid `Duration` value, which is converted to days using the `toDays()` method.","complex_type":true},"usage":{"language":"java","code":"LocalDate date = LocalDate.of(2023, Month.APRIL, 15);\nDuration liveTime = Duration.ofDays(7);\ngetDateAfterDays(date, liveTime);\n","description":"\nIn the example above, we create a date object using the of() method from the LocalDate class and pass in the year, month, and day. We then create a duration object using the ofDays() method from the Duration class passing in the number of days to be added to the current date. After that, we call the getDateAfterDays method passing in the date and liveTime objects as arguments and assign it's returned value to the newLocalDate variable."},"name":"getDateAfterDays","code":"private LocalDate getDateAfterDays(LocalDate date, Duration liveTime) {\n    return date.plusDays(liveTime.toDays());\n  }","location":{"start":54,"insert":54,"offset":" ","indent":2},"item_type":"method","length":3}]}}}
{"name":"HouseSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/HouseSDJpaService.java","content":{"structured":{"description":"a `HouseSDJpaService` class that provides house-related services using Spring Data JPA. The class has several methods:\n\n1. `listAllHouses()` and `listAllHouses(Pageable pageable)`: These methods return sets of all community houses in the database.\n2. `addHouseMembers(String houseId, Set<HouseMember> houseMembers)`: This method adds new members to a specific community house by creating unique member IDs and saving them to the database along with their corresponding community house.\n3. `deleteMemberFromHouse(String houseId, String memberId)`: This method removes a member from a specific community house by first finding the community house and then removing the member from its house members list before saving the changes.\n4. `getHouseDetailsById(String houseId)`: This method returns an optional community house object based on the provided house ID.\n5. `getHouseMembersById(String houseId, Pageable pageable)`: This method returns a set of all members associated with a specific community house using the provided house ID and pageable parameter.\n6. `listHouseMembersForHousesOfUserId(String userId, Pageable pageable)`: This method returns a set of all members associated with community houses owned by a specific user using the provided user ID and pageable parameter.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.services.springdatajpa.HouseSDJpaService Pages: 1 -->\n<svg width=\"208pt\" height=\"104pt\"\n viewBox=\"0.00 0.00 208.00 104.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 100)\">\n<title>com.myhome.services.springdatajpa.HouseSDJpaService</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"200,-30 0,-30 0,0 200,0 200,-30\"/>\n<text text-anchor=\"start\" x=\"8\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.springdatajpa.</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">HouseSDJpaService</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"interfacecom_1_1myhome_1_1services_1_1HouseService.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"180.5,-96 19.5,-96 19.5,-66 180.5,-66 180.5,-96\"/>\n<text text-anchor=\"start\" x=\"27.5\" y=\"-84\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.services.House</text>\n<text text-anchor=\"middle\" x=\"100\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Service</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M100,-55.54C100,-46.96 100,-37.61 100,-30.16\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"96.5,-55.8 100,-65.8 103.5,-55.8 96.5,-55.8\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"a4b55f08-0fe9-ee8c-5a40-96683087b461","ancestors":[],"type":"function","description":"TODO","name":"HouseSDJpaService","code":"@RequiredArgsConstructor\n@Service\npublic class HouseSDJpaService implements HouseService {\n  private final HouseMemberRepository houseMemberRepository;\n  private final HouseMemberDocumentRepository houseMemberDocumentRepository;\n  private final CommunityHouseRepository communityHouseRepository;\n\n  private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }\n\n  @Override\n  public Set<CommunityHouse> listAllHouses() {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll().forEach(communityHouses::add);\n    return communityHouses;\n  }\n\n  @Override\n  public Set<CommunityHouse> listAllHouses(Pageable pageable) {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);\n    return communityHouses;\n  }\n\n  @Override public Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      Set<HouseMember> savedMembers = new HashSet<>();\n      houseMembers.forEach(member -> member.setMemberId(generateUniqueId()));\n      houseMembers.forEach(member -> member.setCommunityHouse(communityHouse));\n      houseMemberRepository.saveAll(houseMembers).forEach(savedMembers::add);\n\n      communityHouse.getHouseMembers().addAll(savedMembers);\n      communityHouseRepository.save(communityHouse);\n      return savedMembers;\n    }).orElse(new HashSet<>());\n  }\n\n  @Override\n  public boolean deleteMemberFromHouse(String houseId, String memberId) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      boolean isMemberRemoved = false;\n      if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) {\n        Set<HouseMember> houseMembers = communityHouse.getHouseMembers();\n        for (HouseMember member : houseMembers) {\n          if (member.getMemberId().equals(memberId)) {\n            houseMembers.remove(member);\n            communityHouse.setHouseMembers(houseMembers);\n            communityHouseRepository.save(communityHouse);\n            member.setCommunityHouse(null);\n            houseMemberRepository.save(member);\n            isMemberRemoved = true;\n            break;\n          }\n        }\n      }\n      return isMemberRemoved;\n    }).orElse(false);\n  }\n\n  @Override\n  public Optional<CommunityHouse> getHouseDetailsById(String houseId) {\n    return communityHouseRepository.findByHouseId(houseId);\n  }\n\n  @Override\n  public Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable)\n    );\n  }\n\n  @Override\n  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId,\n      Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)\n    );\n  }\n}","location":{"start":35,"insert":35,"offset":" ","indent":0},"item_type":"class","length":84},{"id":"eb9d5d2c-a924-74af-c149-74587bd398c3","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"generates a unique identifier based on a randomly generated UUID string, returning it as a string.","params":[],"returns":{"type_name":"String","description":"a randomly generated unique string of characters.\n\nThe generated unique ID is a string of random characters, created using the `UUID.randomUUID()` method.\nIt is a deterministic sequence of characters, meaning that it will always generate the same output for the same input.\nThe length of the generated ID can vary between 10 and 36 characters, depending on the system architecture.","complex_type":true},"usage":{"language":"java","code":"String uniqueID = generateUniqueId();\nSystem.out.println(uniqueID);\n","description":""},"name":"generateUniqueId","code":"private String generateUniqueId() {\n    return UUID.randomUUID().toString();\n  }","location":{"start":42,"insert":42,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"0d14b618-de9a-579f-6448-08841be33a57","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"retrieves a set of `CommunityHouse` objects from the database using the `findAll()` method of the `communityHouseRepository`. The retrieved objects are then added to a new `Set` instance.","params":[],"returns":{"type_name":"Set","description":"a set of `CommunityHouse` objects representing all houses stored in the repository.\n\n* The `Set<CommunityHouse>` object represents a collection of all community houses in the system.\n* The set is created using the `new HashSet<>()` method, which ensures that the elements in the set are unique and do not contain duplicates.\n* The function first calls the `findAll()` method on the `communityHouseRepository` object to retrieve a list of all community houses.\n* Then, the `forEach()` method is called on the list of community houses to add each one to the set.","complex_type":true},"usage":{"language":"java","code":"Set<CommunityHouse> communityHouses = houseService.listAllHouses();\n","description":""},"name":"listAllHouses","code":"@Override\n  public Set<CommunityHouse> listAllHouses() {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll().forEach(communityHouses::add);\n    return communityHouses;\n  }","location":{"start":46,"insert":46,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"717a544d-6ac0-af8a-894f-079650ce7e54","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"retrieves a set of `CommunityHouse` objects from the database using the `findAll` method and stores them in a new `Set`.","params":[{"name":"pageable","type_name":"Pageable","description":"pagination information for retrieving a subset of the community houses from the repository.\n\n* `Pageable` is an interface that provides methods for navigating and manipulating a page of results. It typically contains several attributes such as `pageNumber`, `pageSize`, and `sort`.","complex_type":true}],"returns":{"type_name":"Set","description":"a set of `CommunityHouse` objects.\n\nThe `Set<CommunityHouse>` object represents a collection of CommunityHouse instances that have been retrieved from the database.\n\nThe `CommunityHouse` class has properties such as the name, address, and other relevant details related to the community houses.\n\nThe `pageable` parameter is used to specify how the results should be paginated and displayed.\n\nOverall, the function returns a collection of CommunityHouses that have been retrieved from the database based on the specified pageable criteria.","complex_type":true},"usage":{"language":"java","code":"// Code for listing all community houses with pageable input\nPageable pageable = PageRequest.of(0, 20); // set page number and size\nSet<CommunityHouse> communityHouses = houseService.listAllHouses(pageable);\n","description":""},"name":"listAllHouses","code":"@Override\n  public Set<CommunityHouse> listAllHouses(Pageable pageable) {\n    Set<CommunityHouse> communityHouses = new HashSet<>();\n    communityHouseRepository.findAll(pageable).forEach(communityHouses::add);\n    return communityHouses;\n  }","location":{"start":53,"insert":53,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"bd07ea78-6d8d-9398-5646-5deb10f8ef9f","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"adds new house members to an existing community house, generates unique member IDs, and updates the community house's member list in the repository.","params":[{"name":"houseId","type_name":"String","description":"unique identifier of the house for which the members are being added.\n\n* `houseId`: A string representing the unique identifier for a community house.\n* `houseMembers`: A set of `HouseMember` objects that represent the members associated with the specified community house.\n\nThe function first checks if there is already a saved community house with the matching `houseId`. If such a community house is found, the function maps it to a new set of `HouseMember` objects, each with a newly generated unique ID. The existing members are then updated by setting their `CommunityHouse` field to the mapped community house, and their IDs are saved in the `house MemberRepository`. Finally, the updated community house is saved.","complex_type":true},{"name":"houseMembers","type_name":"Set<HouseMember>","description":"set of HouseMembers that will be added or updated in the community house.\n\n* `houseId`: The unique identifier of the house where the members will be added.\n* `houseMembers`: A set of HouseMember objects that contain information about the members to be added. Each member has an ID generated using the `generateUniqueId()` method and a reference to the corresponding CommunityHouse object.\n* `communityHouseOptional`: An optional reference to a CommunityHouse object, which is used to retrieve the house details and associated members. If absent, a new CommunityHouse object will be created with the provided house ID.","complex_type":true}],"returns":{"type_name":"HashSet","description":"a set of house members, each with a unique ID and associated with a specific community house.\n\n* The output is a `Set` containing the newly added house members.\n* The `Set` contains only the unique member IDs generated for each member in the input `houseMembers` set.\n* Each member ID is assigned a unique value using the `generateUniqueId()` method.\n* Each member is associated with the corresponding community house by setting its `CommunityHouse` field to the saved community house object.\n* The `Set` also contains all the saved members from the input `houseMembers` set, which are added to the community house's `HouseMembers` field.\n* The community house is saved with its updated `HouseMembers` field after adding the new members.","complex_type":true},"usage":{"language":"java","code":"public class HouseServiceExample {\n  public static void main(String[] args) {\n    HouseService houseService = new HouseServiceImpl();\n    String houseId = \"some id\"; // this id could also come from another source like a database.\n    Set<HouseMember> houseMembers = new HashSet<>(); // populate set with some house members.\n    Set<HouseMember> savedHouseMembers = houseService.addHouseMembers(houseId, houseMembers);\n    System.out.println(\"Saved house members: \" + savedHouseMembers);\n  }\n}\n","description":""},"name":"addHouseMembers","code":"@Override public Set<HouseMember> addHouseMembers(String houseId, Set<HouseMember> houseMembers) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      Set<HouseMember> savedMembers = new HashSet<>();\n      houseMembers.forEach(member -> member.setMemberId(generateUniqueId()));\n      houseMembers.forEach(member -> member.setCommunityHouse(communityHouse));\n      houseMemberRepository.saveAll(houseMembers).forEach(savedMembers::add);\n\n      communityHouse.getHouseMembers().addAll(savedMembers);\n      communityHouseRepository.save(communityHouse);\n      return savedMembers;\n    }).orElse(new HashSet<>());\n  }","location":{"start":60,"insert":60,"offset":" ","indent":2},"item_type":"method","length":14},{"id":"7e467791-4d01-d3af-8340-8c067d97a7ab","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"removes a member from a house by searching for the member in the house's members list, removing them if found, and saving the changes to the community house and member entities.","params":[{"name":"houseId","type_name":"String","description":"ID of the community house that the member belongs to, which is used to locate the relevant community house record in the database for removal of the member.\n\n* `Optional<CommunityHouse> communityHouseOptional`: This represents an optional reference to a `CommunityHouse` object that may or may not be present in the repository.\n* `map()`: This method is used to map the `Optional` reference to a `CommunityHouse` object, which contains information about the house and its members.\n* `findByHouseIdWithHouseMembers()`: This method from the `communityHouseRepository` class is used to retrieve a `CommunityHouse` object based on the `houseId`.\n* `getHouseMembers()`: This method returns a set of `HouseMember` objects that belong to the specified `CommunityHouse`.\n* `isEmpty()`: This method is used to check if the `HouseMembers` set is empty.\n* `setHouseMembers()`: This method sets the `HouseMembers` set of the `CommunityHouse` object to the given `Set`.\n* `save()`: This method from the `communityHouseRepository` class is used to save the modified `CommunityHouse` object in the database.\n* `getMemberId()`: This method returns the ID of a specific `HouseMember` object.\n* `setCommunityHouse(null)`: This method sets the `CommunityHouse` reference of a specific `HouseMember` object to `null`.\n* `save()`: This method from the `houseMemberRepository` class is used to save the modified `HouseMember` object in the database.","complex_type":true},{"name":"memberId","type_name":"String","description":"ID of the member to be removed from the community house.\n\n* `houseId`: The ID of the house to which the member belongs.\n* `memberId`: The unique identifier of the member to be removed from the house.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the specified member was removed from the house.","complex_type":false},"usage":{"language":"java","code":"boolean removed = deleteMemberFromHouse(\"houseId\", \"memberId\");\nif (removed) {\n    System.out.println(\"Member was successfully removed.\");\n} else {\n    System.out.println(\"Member could not be removed.\");\n}\n","description":""},"name":"deleteMemberFromHouse","code":"@Override\n  public boolean deleteMemberFromHouse(String houseId, String memberId) {\n    Optional<CommunityHouse> communityHouseOptional =\n        communityHouseRepository.findByHouseIdWithHouseMembers(houseId);\n    return communityHouseOptional.map(communityHouse -> {\n      boolean isMemberRemoved = false;\n      if (!CollectionUtils.isEmpty(communityHouse.getHouseMembers())) {\n        Set<HouseMember> houseMembers = communityHouse.getHouseMembers();\n        for (HouseMember member : houseMembers) {\n          if (member.getMemberId().equals(memberId)) {\n            houseMembers.remove(member);\n            communityHouse.setHouseMembers(houseMembers);\n            communityHouseRepository.save(communityHouse);\n            member.setCommunityHouse(null);\n            houseMemberRepository.save(member);\n            isMemberRemoved = true;\n            break;\n          }\n        }\n      }\n      return isMemberRemoved;\n    }).orElse(false);\n  }","location":{"start":75,"insert":75,"offset":" ","indent":2},"item_type":"method","length":23},{"id":"47855f0b-e5eb-c082-3844-df4a199c66cd","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"retrieves the details of a specific community house based on its ID, by querying the `communityHouseRepository`.","params":[{"name":"houseId","type_name":"String","description":"unique identifier for a specific community house to be retrieved from the repository.\n\n* `houseId`: A unique identifier for a community house.","complex_type":true}],"returns":{"type_name":"Optional","description":"an optional instance of `CommunityHouse`.\n\n* `Optional<CommunityHouse>`: This type represents an optional reference to a `CommunityHouse` object, which means that the function may return either an instance of `CommunityHouse` or `Optional.empty()`.\n* `communityHouseRepository.findByHouseId(houseId)`: This method retrieves a `CommunityHouse` object from the database based on the provided `houseId`. It returns an instance of `CommunityHouse` if found, otherwise it returns `Optional.empty()`.","complex_type":true},"usage":{"language":"java","code":"CommunityHouse house = getHouseDetailsById(\"houseId\").get();\n","description":"\nHere, \"houseId\" is the input String and the method returns an Optional<CommunityHouse> that represents the requested community house. The get() method is called on the returned Optional to retrieve the CommunityHouse object if it exists."},"name":"getHouseDetailsById","code":"@Override\n  public Optional<CommunityHouse> getHouseDetailsById(String houseId) {\n    return communityHouseRepository.findByHouseId(houseId);\n  }","location":{"start":99,"insert":99,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"0eb5bb52-d59d-cfbc-c548-685d5d88f834","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"retrieves a list of `HouseMember` objects associated with a specific `houseId`. It returns an optional list, which means that if no `HouseMember` objects are found, the function will return `Optional.ofNullable(emptyList())`.","params":[{"name":"houseId","type_name":"String","description":"identifier of the house for which the list of members is being retrieved.\n\n* `houseId`: This parameter represents the unique identifier for a house in the community. It is typically an integer value.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"paging information for the HouseMember data, allowing the function to retrieve a subset of the data from the repository based on the specified page number and size.\n\n* `houseId`: The unique identifier for the house being searched for members.\n* `Pageable`: An interface representing a pagination mechanism, which allows for the retrieval of a subset of data from a large dataset in a managed and efficient manner.","complex_type":true}],"returns":{"type_name":"OptionalListHouseMember","description":"a Optional<List<HouseMember>> containing the list of HouseMembers associated with the specified house ID.\n\n* `Optional<List<HouseMember>>`: This is an optional list of HouseMembers, which means that it may be empty if no HouseMembers are found for the given house ID.\n* `getHouseMembersById(String houseId, Pageable pageable)`: This function takes two parameters - `houseId` and `pageable`. The first parameter is a string representing the ID of the house for which the HouseMembers are being retrieved, while the second parameter is a `Pageable` object that defines how the list of HouseMembers should be paginated.","complex_type":true},"usage":{"language":"java","code":"Optional<List<HouseMember>> houseMembers = HouseService.getHouseMembersById(\"houseId\", pageable);\nif (houseMembers.isPresent()) {\n    // Get the list of house members for a given house ID\n    List<HouseMember> members = houseMembers.get();\n}\n","description":""},"name":"getHouseMembersById","code":"@Override\n  public Optional<List<HouseMember>> getHouseMembersById(String houseId, Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_HouseId(houseId, pageable)\n    );\n  }","location":{"start":104,"insert":104,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"00f3bf53-3eda-c5be-3f46-824b96b7fb2b","ancestors":["a4b55f08-0fe9-ee8c-5a40-96683087b461"],"type":"function","description":"retrieves a list of `HouseMember` objects from the database based on the user ID and pageable parameters.","params":[{"name":"userId","type_name":"String","description":"user for whom the list of HouseMembers is being retrieved.\n\n* `userId`: A `String` representing the user ID for which the house members are to be listed.\n\nThe function returns an optional list of `HouseMember` instances retrieved from the `houseMemberRepository`. The returned list is filtered based on the `communityHouse_Community_Admins_UserId` field in the database, using the `findAllBy` method with the `pageable` parameter.","complex_type":true},{"name":"pageable","type_name":"Pageable","description":"pagination information for the query, allowing the function to retrieve a subset of the house members for a given user ID.\n\n* `userId`: A String representing the user ID for which house members are to be listed.\n* `pageable`: An instance of `Pageable`, which allows for pagination and sorting of results. Its properties include `getPageNumber()` (an integer representing the current page number), `getPageSize()` (an integer representing the number of elements per page), and `getSort()` (a String representing the sort order, or an empty String if no sorting is required).","complex_type":true}],"returns":{"type_name":"OptionalListHouseMember","description":"a pageable list of house members for the specified user ID.\n\n* `Optional<List<HouseMember>>`: The output is an optional list of HouseMembers, which means that it may be null if there are no HouseMembers found for the given user ID.\n* `listHouseMembersForHousesOfUserId(String userId, Pageable pageable)`: This method takes a user ID as input and returns a pageable list of HouseMembers associated with that user ID.","complex_type":true},"usage":{"language":"java","code":"@Autowired HouseMemberRepository houseMemberRepository;\n// get all house members for a given user Id\nOptional<List<HouseMember>> members = \nhouseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(\"userId\", pageable);\n","description":"\nIn the above example, the method findAllByCommunityHouse_Community_Admins_UserId is called on a house member repository object. This method takes in two arguments: a user Id and a pageable object. The method returns an optional list of house members for the given user id.\nThe provided userId is a String, this is passed to the method as one of its arguments. The second argument is a Pageable object which contains information about the current page and number of items per page to be returned by the method."},"name":"listHouseMembersForHousesOfUserId","code":"@Override\n  public Optional<List<HouseMember>> listHouseMembersForHousesOfUserId(String userId,\n      Pageable pageable) {\n    return Optional.ofNullable(\n        houseMemberRepository.findAllByCommunityHouse_Community_Admins_UserId(userId, pageable)\n    );\n  }","location":{"start":111,"insert":111,"offset":" ","indent":2},"item_type":"method","length":7}]}}}
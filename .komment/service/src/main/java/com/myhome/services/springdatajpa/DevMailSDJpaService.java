{"name":"DevMailSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/DevMailSDJpaService.java","content":{"structured":{"description":"A service class called `DevMailSDJpaService` that implements the `MailService` interface using Spring Data JPA. The service class includes four methods for sending emails: `sendPasswordRecoverCode`, `sendAccountConfirmed`, `sendPasswordSuccessfullyChanged`, and `sendAccountCreated`. These methods are annotated with various Spring Boot conditions to control their execution based on property values. The code uses Lombok, Slf4j, and Spring Framework packages.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.SecurityToken Pages: 1 -->\n<svg width=\"187pt\" height=\"148pt\"\n viewBox=\"0.00 0.00 187.00 148.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 144)\">\n<title>com.myhome.domain.SecurityToken</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"173,-30 6,-30 6,0 173,0 173,-30\"/>\n<text text-anchor=\"start\" x=\"14\" y=\"-18\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Security</text>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Token</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"179,-85 0,-85 0,-66 179,-66 179,-85\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-73\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-55.65C89.5,-47.36 89.5,-37.78 89.5,-30.11\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-55.87 89.5,-65.87 93,-55.87 86,-55.87\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"126.5,-140 52.5,-140 52.5,-121 126.5,-121 126.5,-140\"/>\n<text text-anchor=\"middle\" x=\"89.5\" y=\"-128\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M89.5,-110.66C89.5,-101.93 89.5,-91.99 89.5,-85.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"86,-110.75 89.5,-120.75 93,-110.75 86,-110.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"1bffaed9-479c-a293-6146-47df130cd225","ancestors":[],"type":"function","description":"TODO","name":"DevMailSDJpaService","code":"@Slf4j\n@Service\n@ConditionalOnProperty(value = \"spring.mail.dev-mode\", havingValue = \"true\", matchIfMissing = true)\npublic class DevMailSDJpaService implements MailService {\n\n  @Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }\n\n  @Override\n  public boolean sendAccountConfirmed(User user) {\n    log.info(String.format(\"Account confirmed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n  @Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n\n  @Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    log.info(String.format(\"Account created message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n\n\n}","location":{"start":11,"insert":11,"offset":" ","indent":0},"item_type":"class","length":32},{"id":"3605e1a7-2824-2787-364d-3a8f106fe61f","ancestors":["1bffaed9-479c-a293-6146-47df130cd225"],"type":"function","description":"sends a password recovery code to a specified user via log messages and returns `true`.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user for whom the password recover code is being sent.\n\n* `user`: A `User` object representing a user for whom a password recover code is being sent. The `User` class has attributes such as `getUserId()` and `randomCode()`.","complex_type":true},{"name":"randomCode","type_name":"String","description":"6-digit password recover code sent to the user via email for password recovery.\n\n* `randomCode`: A String variable representing a unique code sent to the user for password recovery.\n\nThe function then returns `true` indicating successful execution.","complex_type":true}],"returns":{"type_name":"boolean","description":"a message indicating that the password recover code has been sent to the specified user.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }\n","description":"\nThe method sendPasswordRecoverCode is called on an instance of the class DevMailSDJpaService with two parameters: a User object and a String variable containing a password recovery code. The method uses the Lombok log framework to print out a message indicating that the password recover code has been sent to the user with their id and the provided password recovery code.\n\nThe return value of this method is true, indicating success in sending the password recovery code to the user."},"name":"sendPasswordRecoverCode","code":"@Override\n  public boolean sendPasswordRecoverCode(User user, String randomCode) throws MailSendException {\n    log.info(String.format(\"Password recover code sent to user with id= %s, code=%s\", user.getUserId()), randomCode);\n    return true;\n  }","location":{"start":16,"insert":16,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"8f32f858-8186-d5b4-a14c-2431e7b2acbb","ancestors":["1bffaed9-479c-a293-6146-47df130cd225"],"type":"function","description":"sends a message to a user indicating that their account has been confirmed.","params":[{"name":"user","type_name":"User","description":"User object containing information about the user whose account confirmation message should be sent.\n\n* `User Id`: A unique identifier for the user, typically an integer.\n* `log`: An instance of `java.util.logging.Log`, used to log messages at different levels.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating that the account confirmation message was sent to the specified user.","complex_type":false},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        User user = new User(\"name\", \"password\", 1234);\n        DevMailSDJpaService service = new DevMailSDJpaService();\n        boolean sent = service.sendAccountConfirmed(user);\n        System.out.println(sent ? \"Email sent successfully\" : \"Failed to send email\");\n    }\n}\n","description":""},"name":"sendAccountConfirmed","code":"@Override\n  public boolean sendAccountConfirmed(User user) {\n    log.info(String.format(\"Account confirmed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":22,"insert":22,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"a6cc7bfa-17ff-bb9d-b541-75e775549c2c","ancestors":["1bffaed9-479c-a293-6146-47df130cd225"],"type":"function","description":"sends a message to a user indicating that their password has been successfully changed.","params":[{"name":"user","type_name":"User","description":"User object whose password has been successfully changed, and is used to log the event and return a success message.\n\n* `user`: A `User` object representing the user whose password has been successfully changed. The object contains attributes such as `userId`, `oldPassword`, and `newPassword`.","complex_type":true}],"returns":{"type_name":"boolean","description":"a message indicating that the user's password has been successfully changed, along with the user's ID.","complex_type":false},"usage":{"language":"java","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }\n","description":"\nThe above code would be used in the following way:\n\n"},"name":"sendPasswordSuccessfullyChanged","code":"@Override\n  public boolean sendPasswordSuccessfullyChanged(User user) {\n    log.info(String.format(\"Password successfully changed message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":28,"insert":28,"offset":" ","indent":2},"item_type":"method","length":5},{"id":"170c4fb0-74af-6288-a941-2312de961c74","ancestors":["1bffaed9-479c-a293-6146-47df130cd225"],"type":"function","description":"sends an account creation confirmation message to a user via logging an informative message and returning `true`.","params":[{"name":"user","type_name":"User","description":"User object containing information about the newly created account.\n\n* `user`: A `User` object with fields such as `getUserId()`, `getEmail()`, and `getSecurityToken()`.","complex_type":true},{"name":"emailConfirmToken","type_name":"SecurityToken","description":"email confirmation token sent to the user's registered email address for account verification purposes.\n\n* `SecurityToken emailConfirmToken`: This is an instance of `SecurityToken`, which represents a secure token for verifying the user's identity. It contains information such as a token value and a token type.","complex_type":true}],"returns":{"type_name":"boolean","description":"a message indicating that an account has been created and sent to the user.","complex_type":false},"usage":{"language":"java","code":"// Create a new user object\nUser user = new User();\nuser.setUserId(1234);\nuser.setUsername(\"johndoe\");\nuser.setPassword(\"password123\");\nuser.setEmail(\"john.doe@example.com\");\n\n// Create a new SecurityToken object\nSecurityToken emailConfirmToken = new SecurityToken();\nemailConfirmToken.setToken(\"confirmationToken\");\nemailConfirmToken.setExpiresAt(LocalDateTime.now().plusDays(1));\n\nsendAccountCreated(user, emailConfirmToken);\n","description":"\nIn this example, we create a new user object and set its properties. We then create a new SecurityToken object and set its properties as well. We pass these objects to the sendAccountCreated method, which will use them to send an account creation message to the user's email address."},"name":"sendAccountCreated","code":"@Override\n  public boolean sendAccountCreated(User user, SecurityToken emailConfirmToken) {\n    log.info(String.format(\"Account created message sent to user with id=%s\", user.getUserId()));\n    return true;\n  }","location":{"start":35,"insert":35,"offset":" ","indent":2},"item_type":"method","length":5}]}}}
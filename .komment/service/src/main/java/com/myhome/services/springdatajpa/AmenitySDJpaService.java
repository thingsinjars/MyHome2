{"name":"AmenitySDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/AmenitySDJpaService.java","content":{"structured":{"description":"An AmenitySDJpaService class that implements amenity services using Spring Data JPA. The service provides methods for creating, updating, and deleting amenities in a community. It uses dependencies on AmenityRepository, CommunityRepository, CommunityService, and AmenityApiMapper classes to perform these operations.","image":"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 2.43.0 (0)\n -->\n<!-- Title: com.myhome.domain.Community Pages: 1 -->\n<svg width=\"192pt\" height=\"137pt\"\n viewBox=\"0.00 0.00 192.00 137.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 133)\">\n<title>com.myhome.domain.Community</title>\n<!-- Node1 -->\n<g id=\"Node000001\" class=\"node\">\n<title>Node1</title>\n<g id=\"a_Node000001\"><a xlink:title=\" \">\n<polygon fill=\"#999999\" stroke=\"#666666\" points=\"184,-19 0,-19 0,0 184,0 184,-19\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-7\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.Community</text>\n</a>\n</g>\n</g>\n<!-- Node2 -->\n<g id=\"Node000002\" class=\"node\">\n<title>Node2</title>\n<g id=\"a_Node000002\"><a xlink:href=\"classcom_1_1myhome_1_1domain_1_1BaseEntity.html\" target=\"_top\" xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"181.5,-74 2.5,-74 2.5,-55 181.5,-55 181.5,-74\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-62\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">com.myhome.domain.BaseEntity</text>\n</a>\n</g>\n</g>\n<!-- Node2&#45;&gt;Node1 -->\n<g id=\"edge1_Node000001_Node000002\" class=\"edge\">\n<title>Node2&#45;&gt;Node1</title>\n<g id=\"a_edge1_Node000001_Node000002\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-44.66C92,-35.93 92,-25.99 92,-19.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-44.75 92,-54.75 95.5,-44.75 88.5,-44.75\"/>\n</a>\n</g>\n</g>\n<!-- Node3 -->\n<g id=\"Node000003\" class=\"node\">\n<title>Node3</title>\n<g id=\"a_Node000003\"><a xlink:title=\" \">\n<polygon fill=\"white\" stroke=\"#666666\" points=\"129,-129 55,-129 55,-110 129,-110 129,-129\"/>\n<text text-anchor=\"middle\" x=\"92\" y=\"-117\" font-family=\"Helvetica,sans-Serif\" font-size=\"10.00\">Serializable</text>\n</a>\n</g>\n</g>\n<!-- Node3&#45;&gt;Node2 -->\n<g id=\"edge2_Node000002_Node000003\" class=\"edge\">\n<title>Node3&#45;&gt;Node2</title>\n<g id=\"a_edge2_Node000002_Node000003\"><a xlink:title=\" \">\n<path fill=\"none\" stroke=\"#63b8ff\" d=\"M92,-99.66C92,-90.93 92,-80.99 92,-74.09\"/>\n<polygon fill=\"#63b8ff\" stroke=\"#63b8ff\" points=\"88.5,-99.75 92,-109.75 95.5,-99.75 88.5,-99.75\"/>\n</a>\n</g>\n</g>\n</g>\n</svg>\n","items":[{"id":"d28edd65-c7cf-84b9-e141-8247d3a37823","ancestors":[],"type":"function","description":"TODO","name":"AmenitySDJpaService","code":"@Service\n@RequiredArgsConstructor\npublic class AmenitySDJpaService implements AmenityService {\n\n  private final AmenityRepository amenityRepository;\n  private final CommunityRepository communityRepository;\n  private final CommunityService communityService;\n  private final AmenityApiMapper amenityApiMapper;\n\n  @Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    return Optional.of(createdAmenities);\n  }\n\n  @Override\n  public Optional<Amenity> getAmenityDetails(String amenityId) {\n    return amenityRepository.findByAmenityId(amenityId);\n  }\n\n  @Override\n  public boolean deleteAmenity(String amenityId) {\n    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n        .map(amenity -> {\n          Community community = amenity.getCommunity();\n          community.getAmenities().remove(amenity);\n          amenityRepository.delete(amenity);\n          return true;\n        })\n        .orElse(false);\n  }\n\n  @Override\n  public Set<Amenity> listAllAmenities(String communityId) {\n    return communityRepository.findByCommunityIdWithAmenities(communityId)\n        .map(Community::getAmenities)\n        .orElse(new HashSet<>());\n  }\n\n  @Override\n  public boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n              Amenity updated = new Amenity();\n              updated.setName(updatedAmenity.getName());\n              updated.setPrice(updatedAmenity.getPrice());\n              updated.setId(amenity.getId());\n              updated.setAmenityId(amenityId);\n              updated.setDescription(updatedAmenity.getDescription());\n              return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n  }\n}","location":{"start":35,"insert":35,"offset":" ","indent":0},"item_type":"class","length":71},{"id":"1606f9db-fa11-caab-9c49-eb19974438ea","ancestors":["d28edd65-c7cf-84b9-e141-8247d3a37823"],"type":"function","description":"takes a set of `AmenityDto` objects, a community ID, and returns an `Optional` list of created `Amenity` objects. It retrieves the community details using the ID, maps each `AmenityDto` to an `Amenity` object, saves the mapped objects in the repository, and returns the created amenities in an `Optional` list.","params":[{"name":"amenities","type_name":"Set<AmenityDto>","description":"set of amenities to be created or updated in the system, which are then transformed into a list of `AmenityDto` objects and saved in the database using the `amenityRepository`.\n\n* `Set<AmenityDto> amenities`: This parameter represents a set of `AmenityDto` objects that will be transformed into `Amenity` objects.\n* `String communityId`: This parameter represents the ID of a `Community` object, which is used to retrieve the details of the community from the service.\n\nThe function first checks if the community with the provided ID exists by calling the `communityService.getCommunityDetailsById(communityId)` method. If the community does not exist, the function returns an empty `Optional`. Otherwise, it proceeds to transform each `AmenityDto` object in the `amenities` set into a corresponding `Amenity` object using the `amenityApiMapper.amenityDtoToAmenity()` method. The transformed `Amenity` objects are then collected into a list using the `Collectors.toList()` method. Finally, the list of created `Amenity` objects is saved to the database using the `amenityRepository.saveAll()` method, and the resulting list of `AmenityDto` objects is returned in an `Optional`.","complex_type":true},{"name":"communityId","type_name":"String","description":"unique identifier of a community that the amenities will be associated with.\n\nThe `communityId` parameter is a String representing the unique identifier of a community.","complex_type":true}],"returns":{"type_name":"OptionalListAmenityDto","description":"an optional list of amenity DTOs representing created amenities.\n\n* The Optional<List<AmenityDto>> return value represents an optional list of amenities that have been created in the system. If no amenities were created successfully, the list will be empty.\n* The List<Amenity> contained within the Optional is a list of amenities that have been mapped from their corresponding DTOs using the `amenityApiMapper`. Each amenity has a community associated with it, which is obtained from the `Community` object retrieved from the service.\n* The List<AmenityDto> contained within the Optional is a list of DTOs representing the created amenities. Each DTO contains the same attributes as the original amenity DTO passed in the function, including the id, name, and community ID.\n* The `saveAll` method used to save the created amenities returns a stream of `Amenity` objects that have been persisted in the database. These objects are then mapped back to their corresponding DTOs using the `amenityApiMapper`.","complex_type":true},"usage":{"language":"java","code":"Set<AmenityDto> amenities = new HashSet<>();\namenities.add(new AmenityDto(\"name\", \"description\", 100));\nString communityId = \"communityId\";\nOptional<List<AmenityDto>> createdAmenities = createAmenities(amenities, communityId);\n","description":"\nThis will take in a set of amenities and their corresponding attributes (name, description, price) as well as the id of the community. It would then save those amenities to the database while associating them with the given community ID. The method returns an optional list of AmenityDto's that contain information about the created amenities including their ID."},"name":"createAmenities","code":"@Override\n  public Optional<List<AmenityDto>> createAmenities(Set<AmenityDto> amenities, String communityId) {\n    final Optional<Community> community = communityService.getCommunityDetailsById(communityId);\n    if (!community.isPresent()) {\n      return Optional.empty();\n    }\n    final List<Amenity> amenitiesWithCommunity = amenities.stream()\n        .map(amenityApiMapper::amenityDtoToAmenity)\n        .map(amenity -> {\n          amenity.setCommunity(community.get());\n          return amenity;\n        })\n        .collect(Collectors.toList());\n    final List<AmenityDto> createdAmenities =\n        amenityRepository.saveAll(amenitiesWithCommunity).stream()\n            .map(amenityApiMapper::amenityToAmenityDto)\n            .collect(Collectors.toList());\n    return Optional.of(createdAmenities);\n  }","location":{"start":44,"insert":44,"offset":" ","indent":2},"item_type":"method","length":19},{"id":"b150a892-3c57-4296-704f-febea6947944","ancestors":["d28edd65-c7cf-84b9-e141-8247d3a37823"],"type":"function","description":"retrieves the details of an amenity based on its ID, by querying the amenity repository using the `findByAmenityId` method.","params":[{"name":"amenityId","type_name":"String","description":"identifier of an amenity that is to be retrieved from the repository.\n\n* `amenityId`: The unique identifier for an amenity, which is retrieved from the repository using the `findByAmenityId` method.","complex_type":true}],"returns":{"type_name":"Optional","description":"an Optional object containing the details of the amenity with the provided ID.\n\n* `Optional<Amenity>`: The output is an optional object of type `Amenity`, which means that if no amenity details exist for the provided `amenityId`, the method will return an empty `Optional`.\n* `amenityRepository.findByAmenityId(amenityId)`: This method call returns a single `Amenity` object based on the specified `amenityId`. The `amenityRepository` is likely a data access layer or a database connection, and the `findByAmenityId` method performs a query to retrieve the amenity details for the given `amenityId`.","complex_type":true},"usage":{"language":"java","code":"public class Example {\n  public static void main(String[] args) {\n    AmenityService service = new AmenitySDJpaService(new AmenityRepository(), new CommunityRepository(), new CommunityService());\n    String amenityId = \"1234\"; // The id of the amenity we're looking for\n    Optional<Amenity> result = service.getAmenityDetails(amenityId);\n    if (result.isPresent()) {\n      Amenity amenity = result.get();\n      System.out.println(\"Found amenity: \" + amenity.getName());\n    } else {\n      System.out.println(\"Amenity not found\");\n    }\n  }\n}\n","description":""},"name":"getAmenityDetails","code":"@Override\n  public Optional<Amenity> getAmenityDetails(String amenityId) {\n    return amenityRepository.findByAmenityId(amenityId);\n  }","location":{"start":64,"insert":64,"offset":" ","indent":2},"item_type":"method","length":4},{"id":"cac686ed-833c-a0b7-0541-c3bd49ce3d89","ancestors":["d28edd65-c7cf-84b9-e141-8247d3a37823"],"type":"function","description":"deletes an amenity from the database by finding it using its ID, removing it from the community's amenities list, and then deleting it.","params":[{"name":"amenityId","type_name":"String","description":"ID of an amenity that needs to be deleted.\n\n* `amenityId`: A unique identifier for an amenity in a community.\n\nThe function retrieves the amenity from the repository using the `findByAmenityIdWithCommunity` method and then performs the following operations:\n\n* Removes the amenity from the community's list of amenities.\n* Deletes the amenity from the repository.\n\nThe return value is `true` if the amenity was successfully deleted, or `false` otherwise.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the amenity was successfully deleted.","complex_type":false},"usage":{"language":"java","code":"AmenityService service = new AmenitySDJpaService();\nString amenityId = \"12345\";\nboolean result = service.deleteAmenity(amenityId);\n","description":"\nThe code above is an example of how to use the method deleteAmenity with only one input, which is a String named amenityId. The method takes in this input and uses it to find the Amenity object using the amenityId, which is then deleted from the database. The result is returned as a boolean value that indicates whether or not the deletion was successful."},"name":"deleteAmenity","code":"@Override\n  public boolean deleteAmenity(String amenityId) {\n    return amenityRepository.findByAmenityIdWithCommunity(amenityId)\n        .map(amenity -> {\n          Community community = amenity.getCommunity();\n          community.getAmenities().remove(amenity);\n          amenityRepository.delete(amenity);\n          return true;\n        })\n        .orElse(false);\n  }","location":{"start":69,"insert":69,"offset":" ","indent":2},"item_type":"method","length":11},{"id":"1ca09132-db45-c682-0145-6d559551b27f","ancestors":["d28edd65-c7cf-84b9-e141-8247d3a37823"],"type":"function","description":"retrieves a community's amenities by querying the community repository and mapping the resulting Community objects to their respective amenity sets using the `getAmenities()` method.","params":[{"name":"communityId","type_name":"String","description":"identifier of the community whose amenities are to be listed.\n\n* `communityRepository`: This is an instance of `CommunityRepository`, which is responsible for managing community data.\n* `findByCommunityIdWithAmenities`: This method returns a `List` of `Community` objects that match the given `communityId`. It also includes the amenities associated with each community.\n* `map`: This method applies a transformation to the returned list, in this case mapping each `Community` object to its associated amenities using the `getAmenities()` method.\n* `orElse`: This method returns an alternative value if the original method call returns `null`. In this case, it returns an empty `HashSet` of amenities if the method call returns `null`.","complex_type":true}],"returns":{"type_name":"HashSet","description":"a set of amenities associated with a specific community.\n\n* The function returns a `Set<Amenity>` data structure, indicating that it is a collection of amenities associated with a particular community.\n* The `CommunityRepository` class is used to fetch the community information along with its amenities, using the `findByCommunityIdWithAmenities` method.\n* The `map` method is applied to the result of the previous step, which transforms the `Community` objects into `Amenity` objects. This allows for the creation of a single collection of amenities that can be used by the application.\n* If no community information is found, the function returns an empty `Set<Amenity>`, indicating that there are no amenities associated with the given community ID.","complex_type":true},"usage":{"language":"java","code":"Set<Amenity> result = new AmenitySDJpaService().listAllAmenities(communityId);\n","description":"\nIn this example, the input `communityId` is a string. The method returns a Set of amenity objects from the database that have the given community id."},"name":"listAllAmenities","code":"@Override\n  public Set<Amenity> listAllAmenities(String communityId) {\n    return communityRepository.findByCommunityIdWithAmenities(communityId)\n        .map(Community::getAmenities)\n        .orElse(new HashSet<>());\n  }","location":{"start":81,"insert":81,"offset":" ","indent":2},"item_type":"method","length":6},{"id":"c0fd31fa-f952-2688-4443-fae5b3b57893","ancestors":["d28edd65-c7cf-84b9-e141-8247d3a37823"],"type":"function","description":"updates an amenity in the database by retrieving the existing amenity with the matching amenity ID, updating its name, price, and description, and then saving the updated amenity or returning null if failed.","params":[{"name":"updatedAmenity","type_name":"AmenityDto","description":"updated amenity object containing the modified values for name, price, id, description, and community Id.\n\n* `amenityId`: The ID of the amenity being updated.\n* `communityId`: The ID of the community to which the amenity belongs.\n* `name`: The name of the amenity.\n* `price`: The price of the amenity.\n* `description`: A description of the amenity.","complex_type":true}],"returns":{"type_name":"OptionalAmenity","description":"a boolean value indicating whether the amenity was updated successfully.\n\n* `map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())`: This method retrieves the `Community` object associated with the given `Amenity` object's `CommunityId`.\n* `map(community -> { ... }):` This method performs an operation on the retrieved `Community` object, which is then returned as a new `Amenity` object.\n* `orElse(null)`: If no `Community` object is found, the function returns `null`.\n* `map(amenityRepository::save):` This method saves the updated `Amenity` object in the repository.\n\nThe output of the `updateAmenity` function is a `Optional` object containing the updated `Amenity` object or `null`, depending on whether a `Community` object was found and saved successfully.","complex_type":true},"usage":{"language":"java","code":"public class Main {\n    public static void main(String[] args) {\n        AmenityDto updatedAmenity = new AmenityDto();\n        updatedAmenity.setName(\"new name\");\n        updatedAmenity.setPrice(30.5);\n        updatedAmenity.setDescription(\"updated description\");\n        updatedAmenity.setCommunityId(\"123456789\");\n        AmenityService service = new AmenitySDJpaService();\n        boolean result = service.updateAmenity(updatedAmenity);\n    }\n}\n","description":""},"name":"updateAmenity","code":"@Override\n  public boolean updateAmenity(AmenityDto updatedAmenity) {\n    String amenityId = updatedAmenity.getAmenityId();\n    return amenityRepository.findByAmenityId(amenityId)\n        .map(amenity -> communityRepository.findByCommunityId(updatedAmenity.getCommunityId())\n            .map(community -> {\n              Amenity updated = new Amenity();\n              updated.setName(updatedAmenity.getName());\n              updated.setPrice(updatedAmenity.getPrice());\n              updated.setId(amenity.getId());\n              updated.setAmenityId(amenityId);\n              updated.setDescription(updatedAmenity.getDescription());\n              return updated;\n            })\n            .orElse(null))\n        .map(amenityRepository::save).isPresent();\n  }","location":{"start":88,"insert":88,"offset":" ","indent":2},"item_type":"method","length":17}]}}}
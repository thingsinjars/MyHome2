{"name":"AuthenticationSDJpaService.java","path":"service/src/main/java/com/myhome/services/springdatajpa/AuthenticationSDJpaService.java","content":{"structured":{"description":"an AuthenticationSDJpaService class that implements the AuthenticationService interface. The class takes in several dependencies: a Duration tokenExpirationTime, a String tokenSecret, a UserSDJpaService class, an AppJwtEncoderDecoder class, and a PasswordEncoder class. Using these dependencies, the class creates a JWT token for authentication purposes and logs the received login request. If the password provided in the login request does not match the encrypted password in the database, it throws an exception. Otherwise, it returns an AuthenticationData object containing the encoded JWT token and the user ID.","items":[{"id":"f5120fcf-1f30-5f81-fa46-cbd3d0a40958","ancestors":[],"type":"function","description":"TODO","name":"AuthenticationSDJpaService","code":"@Slf4j\n@Service\npublic class AuthenticationSDJpaService implements AuthenticationService {\n\n  private final Duration tokenExpirationTime;\n  private final String tokenSecret;\n\n  private final UserSDJpaService userSDJpaService;\n  private final AppJwtEncoderDecoder appJwtEncoderDecoder;\n  private final PasswordEncoder passwordEncoder;\n\n  public AuthenticationSDJpaService(@Value(\"${token.expiration_time}\") Duration tokenExpirationTime,\n      @Value(\"${token.secret}\") String tokenSecret,\n      UserSDJpaService userSDJpaService,\n      AppJwtEncoderDecoder appJwtEncoderDecoder,\n      PasswordEncoder passwordEncoder) {\n    this.tokenExpirationTime = tokenExpirationTime;\n    this.tokenSecret = tokenSecret;\n    this.userSDJpaService = userSDJpaService;\n    this.appJwtEncoderDecoder = appJwtEncoderDecoder;\n    this.passwordEncoder = passwordEncoder;\n  }\n\n  @Override\n  public AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n  }\n\n  private boolean isPasswordMatching(String requestPassword, String databasePassword) {\n    return passwordEncoder.matches(requestPassword, databasePassword);\n  }\n\n  private AppJwt createJwt(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(tokenExpirationTime);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }\n}","location":{"start":18,"insert":18,"offset":" ","indent":0},"item_type":"class","length":48},{"id":"8a75c851-b176-2297-0946-bf17271b98cd","ancestors":["f5120fcf-1f30-5f81-fa46-cbd3d0a40958"],"type":"function","description":"authenticates a user by checking their email and password, creating an encoded JWT token, and returning an `AuthenticationData` object containing the token and user ID.","params":[{"name":"loginRequest","type_name":"LoginRequest","description":"login request received from the client and contains the email address of the user to be authenticated, along with their password.\n\n* `log.trace(\"Received login request\")`: This line logs a message indicating that the login request has been received.\n* `final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())`: This line retrieves the user details from the database using the provided email address. The method `findUserByEmail` returns a `Optional<UserDto>` object, which contains the user details if found, or an empty `Optional` otherwise.\n* `orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()))`: This line handles the case where the user is not found in the database. It throws a `UserNotFoundException` with the provided email address as its message.\n* `if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {`: This line checks whether the provided password matches the encrypted password of the retrieved user details. If they don't match, an exception is thrown.\n* `throw new CredentialsIncorrectException(userDto.getUserId())`: This line throws a `CredentialsIncorrectException` with the user ID as its message, indicating that the provided credentials are incorrect.\n* `final AppJwt jwtToken = createJwt(userDto);`: This line creates a new JWT token using the retrieved user details.\n* `final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret)`: This line encodes the JWT token using the provided secret key.\n* `return new AuthenticationData(encodedToken, userDto.getUserId());`: This line returns an `AuthenticationData` object containing the encoded token and the user ID.","complex_type":true}],"returns":{"type_name":"AuthenticationData","description":"an `AuthenticationData` object containing an encoded JWT token and the user ID.\n\n* `encodedToken`: This is a string that represents an encoded JWT token, generated using the `createJwt` method and the `tokenSecret`.\n* `userId`: This is the unique identifier of the user who has successfully logged in.","complex_type":true},"usage":{"language":"java","code":"LoginRequest loginRequest = new LoginRequest(\"email@example.com\", \"password\");\nAuthenticationData authenticationData = authenticationSDJpaService.login(loginRequest);\nString jwtToken = authenticationData.getEncodedToken();\nlong userId = authenticationData.getUserId();\n","description":""},"name":"login","code":"@Override\n  public AuthenticationData login(LoginRequest loginRequest) {\n    log.trace(\"Received login request\");\n    final UserDto userDto = userSDJpaService.findUserByEmail(loginRequest.getEmail())\n        .orElseThrow(() -> new UserNotFoundException(loginRequest.getEmail()));\n    if (!isPasswordMatching(loginRequest.getPassword(), userDto.getEncryptedPassword())) {\n      throw new CredentialsIncorrectException(userDto.getUserId());\n    }\n    final AppJwt jwtToken = createJwt(userDto);\n    final String encodedToken = appJwtEncoderDecoder.encode(jwtToken, tokenSecret);\n    return new AuthenticationData(encodedToken, userDto.getUserId());\n  }","location":{"start":41,"insert":41,"offset":" ","indent":2},"item_type":"method","length":12},{"id":"1e660fdc-aa49-ab93-544f-62479b4126da","ancestors":["f5120fcf-1f30-5f81-fa46-cbd3d0a40958"],"type":"function","description":"compares a provided password with an encrypted version stored in a database and returns a boolean indicating whether they match.","params":[{"name":"requestPassword","type_name":"String","description":"password provided by the user for authentication purposes.\n\n* `requestPassword`: A string parameter representing the user-provided password.\n* `databasePassword`: A string parameter representing the stored password in the database.","complex_type":true},{"name":"databasePassword","type_name":"String","description":"encrypted password stored in the database.\n\n* `passwordEncoder`: This is an object responsible for encoding and decoding passwords in the system.\n* `requestPassword`: This is the password entered by the user.\n* `databasePassword`: This is the password stored in the database that needs to be compared with the user-entered password.","complex_type":true}],"returns":{"type_name":"boolean","description":"a boolean value indicating whether the provided request password matches the corresponding database password.","complex_type":false},"usage":{"language":"java","code":"// requestPassword and databasePassword are both Strings\nString requestPassword = \"password\";\nString databasePassword = \"$2a$10$mEy95FfS3tYKG/Jv7ZPsIuRXbO6oVhDjZWlLNk8H.xnC4A2gdUdF\";\nboolean matches = isPasswordMatching(requestPassword, databasePassword);\n// matches will be true because \"password\" matches the encoded password in the database\n","description":""},"name":"isPasswordMatching","code":"private boolean isPasswordMatching(String requestPassword, String databasePassword) {\n    return passwordEncoder.matches(requestPassword, databasePassword);\n  }","location":{"start":54,"insert":54,"offset":" ","indent":2},"item_type":"method","length":3},{"id":"f829eab9-202a-76bb-1d4c-6afb30e95f2d","ancestors":["f5120fcf-1f30-5f81-fa46-cbd3d0a40958"],"type":"function","description":"creates an AppJwt object representing a JSON Web Token (JWT) for a given user ID, with an expiration time calculated based on a provided tokenExpirationTime value.","params":[{"name":"userDto","type_name":"UserDto","description":"user's details, including their ID, which are used to create a unique JWT token.\n\n* `userId`: The unique identifier of the user.","complex_type":true}],"returns":{"type_name":"AppJwt","description":"a `AppJwt` instance containing user details and expiration time.\n\n* `userId`: The user ID of the user to whom the JWT is being created.\n* `expiration`: The expiration time of the JWT, calculated as the current date and time plus the tokenExpirationTime parameter.\n* `build()`: This method creates a new instance of the `AppJwt` class with the specified properties.","complex_type":true},"usage":{"language":"java","code":"public class MyClass {\n    public static void main(String[] args) {\n        UserDto user = new UserDto(\"my@email.com\", \"password\"); // The email address and password for the user.\n        AppJwt jwt = createJwt(user);\n        System.out.println(jwt); \n    }\n}\n","description":""},"name":"createJwt","code":"private AppJwt createJwt(UserDto userDto) {\n    final LocalDateTime expirationTime = LocalDateTime.now().plus(tokenExpirationTime);\n    return AppJwt.builder()\n        .userId(userDto.getUserId())\n        .expiration(expirationTime)\n        .build();\n  }","location":{"start":58,"insert":58,"offset":" ","indent":2},"item_type":"method","length":7}]}}}
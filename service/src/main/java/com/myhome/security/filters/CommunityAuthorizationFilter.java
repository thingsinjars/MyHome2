package com.myhome.security.filters;

import com.myhome.domain.User;
import com.myhome.services.CommunityService;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * TODO
 */
public class CommunityAuthorizationFilter extends BasicAuthenticationFilter {
  private final CommunityService communityService;
  private static final String UUID_PATTERN =
      "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}";
  private static final Pattern ADD_AMENITY_REQUEST_PATTERN =
      Pattern.compile("/communities/" + UUID_PATTERN + "/amenities");

  public CommunityAuthorizationFilter(AuthenticationManager authenticationManager,
      CommunityService communityService) {
    super(authenticationManager);
    this.communityService = communityService;
  }

  /**
   * filters HTTP requests based on a pattern and user authentication. If the request
   * URI matches the pattern and the user is not an administrator in a specific community,
   * it returns a FORBIDDEN status code. Otherwise, it delegates to the superclass's
   * `doFilterInternal` method.
   * 
   * @param request HTTP request being filtered.
   * 
   * 	- `getRequestURI()` - returns the requested resource URI
   * 	- `matcher()` - returns a `Matcher` object that matches the request URI pattern
   * 	- `find()` - checks if the match is successful
   * 	- `isUserCommunityAdmin()` - a method to check if the user is an admin of a
   * community, without providing its implementation details.
   * 
   * @param response HttpServletResponse object that is used to send the filtered
   * response back to the client.
   * 
   * 1/ `HttpServletResponse response`: This is an instance of the `HttpServletResponse`
   * class, which represents the HTTP response object for the current request. It
   * contains various attributes related to the response, such as status code, headers,
   * and buffered content.
   * 2/ `chain`: This is a reference to the `FilterChain` chain associated with the
   * current request. The `doFilterInternal` method is called recursively by each filter
   * in the chain until the last filter is reached, at which point the response is
   * generated and returned.
   * 3/ `request`: This is an instance of the `HttpServletRequest` class, representing
   * the HTTP request object for the current request. It contains various attributes
   * related to the request, such as method, URL, headers, and parameters.
   * 4/ `isUserCommunityAdmin(request)`: This is a method that takes the `request`
   * object as an argument and returns a boolean value indicating whether the user is
   * an administrator of a community. If the method returns `true`, then the response
   * status code is set to `HttpServletResponse.SC_FORBIDDEN`.
   * 
   * The properties of the `response` object are:
   * 
   * 1/ `statusCode`: This is an integer representing the HTTP status code for the
   * current response. It can take on values between 100 and 599, with 200 being the
   * most common value.
   * 2/ `headers`: This is a collection of headers associated with the current response.
   * Each header represents a key-value pair, where the key is the header name and the
   * value is the corresponding header value.
   * 3/ `bufferedContent`: This is a buffer that contains the content of the current
   * response, which can be either a string or a stream. The buffered content is generated
   * by the `doFilterInternal` method if the response status code is not `HttpServletResponse.SC_OK`.
   * 
   * @param chain 3rd party filter chain that the current filter is a part of, allowing
   * the current filter to execute its logic and pass the request on to the next filter
   * in the chain.
   * 
   * 	- `HttpServletRequest request`: The current HTTP request being processed by the
   * filter.
   * 	- `HttpServletResponse response`: The current HTTP response being generated by
   * the filter.
   * 	- `FilterChain chain`: An instance of the `FilterChain` interface, representing
   * the chain of filters that should be applied to the incoming request.
   * 	- `IOException`, `ServletException`: Exceptions that can be thrown by the filter,
   * either due to an error in the filter's execution or as a result of an error in the
   * filtering process.
   */
  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain chain) throws IOException, ServletException {

    Matcher urlMatcher = ADD_AMENITY_REQUEST_PATTERN.matcher(request.getRequestURI());

    if (urlMatcher.find() && !isUserCommunityAdmin(request)) {
      response.setStatus(HttpServletResponse.SC_FORBIDDEN);
      return;
    }

    super.doFilterInternal(request, response, chain);
  }

  /**
   * checks if a user is an admin of a community based on their ID and the community
   * ID in the request.
   * 
   * @param request HttpServletRequest object, which contains information about the
   * current request, such as the request method, URL, and headers.
   * 
   * 	- `getRequestURI()` returns the URI of the request, which contains information
   * about the request's path and query parameters.
   * 	- `split()` is used to split the URI into an array of substrings, with the second
   * element in the array being the community ID.
   * 	- `null` is passed as the second argument to `findCommunityAdminsById()` to
   * indicate that the community ID should be fetched from the request.
   * 
   * @returns a boolean value indicating whether the currently authenticated user is
   * an admin of a specific community.
   * 
   * 	- The function returns a boolean value indicating whether the current user is a
   * community admin for a given community ID.
   * 	- The input parameters include the HTTP request object and a community ID extracted
   * from the request URL.
   * 	- The function first retrieves the user principal (userId) from the SecurityContextHolder,
   * which represents the authenticated user.
   * 	- Then it queries the community service to find the list of admins for the given
   * community ID.
   * 	- The function then maps the list of admins to their user IDs and filters out the
   * current user ID using the `filter()` method.
   * 	- Finally, the function uses the `findFirst()` method to retrieve the first
   * matching admin user ID, which indicates whether the current user is a community
   * admin or not.
   */
  private boolean isUserCommunityAdmin(HttpServletRequest request) {
    String userId = (String) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
    String communityId = request.getRequestURI().split("/")[2];

    return communityService.findCommunityAdminsById(communityId, null)
        .flatMap(admins -> admins.stream()
            .map(User::getUserId)
            .filter(userId::equals)
            .findFirst()
        )
        .isPresent();
  }
}

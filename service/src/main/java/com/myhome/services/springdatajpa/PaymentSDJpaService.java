/*
 * Copyright 2020 Prathab Murugan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.myhome.services.springdatajpa;

import com.myhome.controllers.dto.PaymentDto;
import com.myhome.controllers.dto.mapper.PaymentMapper;
import com.myhome.domain.HouseMember;
import com.myhome.domain.Payment;
import com.myhome.domain.User;
import com.myhome.repositories.HouseMemberRepository;
import com.myhome.repositories.PaymentRepository;
import com.myhome.repositories.UserRepository;
import com.myhome.services.PaymentService;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

/**
 * Implements {@link PaymentService} and uses Spring Data JPA Repository to do its work
 */
/**
 * TODO
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class PaymentSDJpaService implements PaymentService {
  private final PaymentRepository paymentRepository;
  private final UserRepository adminRepository;
  private final PaymentMapper paymentMapper;
  private final HouseMemberRepository houseMemberRepository;

  /**
   * generates a payment ID and creates a new payment record in the repository.
   * 
   * @param request payment details that need to be processed by the function.
   * 
   * 	- `generatePaymentId`: The method generates an ID for the payment.
   * 	- `createPaymentInRepository`: The method creates a payment in the repository
   * using the provided request data.
   * 
   * @returns a PaymentDto object containing the scheduled payment details.
   * 
   * 	- The `PaymentDto` object is generated by calling the `generatePaymentId` method
   * and creating a new payment entity in the repository using the `createPaymentInRepository`
   * method.
   * 	- The `PaymentDto` object contains information about the scheduled payment,
   * including the payment ID, the amount to be paid, and the date of the payment.
   */
  @Override
  public PaymentDto schedulePayment(PaymentDto request) {
    generatePaymentId(request);
    return createPaymentInRepository(request);
  }

  /**
   * retrieves a `PaymentDto` object from the payment repository based on the provided
   * `paymentId`. It maps the retrieved `Payment` object to a `PaymentDto` object using
   * the `paymentMapper` function.
   * 
   * @param paymentId ID of a payment that is being retrieved, which is used to find
   * the corresponding payment details in the repository.
   * 
   * 	- `paymentRepository`: This is the repository class that stores payment data in
   * a database or any other storage medium.
   * 	- `findByPaymentId()`: This method returns an optional instance of `PaymentDto`
   * based on the provided `paymentId`.
   * 	- `map(paymentMapper::paymentToPaymentDto)`: This line maps the deserialized
   * `payment` object to a `PaymentDto` using a lambda function called `paymentMapper`.
   * 
   * @returns an Optional<PaymentDto> containing the payment details of the specified
   * payment ID.
   * 
   * The function returns an `Optional` object containing a `PaymentDto` instance, which
   * represents a payment record. The `Optional` type allows for the possibility that
   * no payment details may be found for the provided payment ID.
   * 
   * The `paymentRepository.findByPaymentId(paymentId)` method is used to retrieve a
   * payment record based on the provided payment ID. This method returns a `Stream`
   * of `Payment` instances, which are then mapped to `PaymentDto` instances using the
   * `paymentMapper.paymentToPaymentDto()` method.
   * 
   * The `paymentMapper.paymentToPaymentDto()` method is responsible for converting the
   * `Payment` instance into a `PaymentDto` instance. This involves mapping the relevant
   * fields from the `Payment` instance to the corresponding fields in the `PaymentDto`
   * instance.
   */
  @Override
  public Optional<PaymentDto> getPaymentDetails(String paymentId) {
    return paymentRepository.findByPaymentId(paymentId)
        .map(paymentMapper::paymentToPaymentDto);
  }

  /**
   * retrieves a HouseMember object from the repository based on the provided member ID.
   * 
   * @param memberId unique identifier of the House Member to be retrieved from the database.
   * 
   * 	- `memberId`: This parameter represents a unique identifier for a member in the
   * house.
   * 	- Type: String
   * 	- Length: Variable (can be any length)
   * 
   * @returns an Optional object containing a HouseMember object if a match is found
   * in the repository, otherwise it returns an empty Optional.
   * 
   * 	- `Optional<HouseMember>` - The type of the output indicates that it may contain
   * a valid `HouseMember` object or be empty (represented by the `<Optional>` marker).
   * 	- `houseMemberRepository.findByMemberId(memberId)` - This method call is responsible
   * for retrieving a `HouseMember` object based on the provided `memberId`. It returns
   * an `Optional` object containing the found `HouseMember` or an empty `Optional` if
   * no match is found.
   */
  @Override
  public Optional<HouseMember> getHouseMember(String memberId) {
    return houseMemberRepository.findByMemberId(memberId);
  }

  /**
   * retrieves a set of payments belonging to a specified member from the repository,
   * using example matching to filter out irrelevant fields.
   * 
   * @param memberId member ID used to filter payments in the `getPaymentsByMember` function.
   * 
   * 	- `memberId`: A String property representing the unique identifier of a member.
   * 	- `ExampleMatcher`: An object used to define how the `memberId` should be matched
   * in the database. It includes various matchers, such as `startsWith()` and `ignoreCase()`.
   * 	- `paymentRepository`: The repository responsible for storing and retrieving
   * payments from the database.
   * 
   * The function returns a set of all payments matching the specified member ID using
   * the `findAll` method of the payment repository.
   * 
   * @returns a set of `Payment` objects that match the specified member ID.
   * 
   * 	- `Set<Payment>`: This represents a set of payments that match the specified
   * member ID.
   * 	- `paymentRepository.findAll(paymentExample)`: This is a call to the repository's
   * `findAll` method, which returns a set of payments based on the specified example
   * object. The example object is created using the `Example` class and contains the
   * member ID as a property.
   * 	- `ignoringMatcher`: This is an instance of `ExampleMatcher`, which is used to
   * specify the match criteria for the payments. The `ignoringMatcher` instance ignores
   * the `paymentId`, `charge`, `type`, `description`, `recurring`, `dueDate`, and
   * `admin` properties when matching payments.
   * 	- `payment`: This represents a single payment object that is used to create the
   * example object in the `findAll` method call. The `payment` object contains various
   * properties, such as the member ID, payment amount, and payment date.
   */
  @Override
  public Set<Payment> getPaymentsByMember(String memberId) {
    ExampleMatcher ignoringMatcher = ExampleMatcher.matchingAll()
        .withMatcher("memberId",
            ExampleMatcher.GenericPropertyMatchers.startsWith().ignoreCase())
        .withIgnorePaths("paymentId", "charge", "type", "description", "recurring", "dueDate",
            "admin");

    Example<Payment> paymentExample =
        Example.of(new Payment(null, null, null, null, false, null, null,
                new HouseMember().withMemberId(memberId)),
            ignoringMatcher);

    return new HashSet<>(paymentRepository.findAll(paymentExample));
  }

  /**
   * queries the payment repository for payments that belong to a specific administrator
   * by matching on the `adminId`. It ignores certain fields such as `paymentId`,
   * `charge`, `type`, etc., and returns the results in a pageable format.
   * 
   * @param adminId ID of an administrator who is authorized to view payments.
   * 
   * 	- `adminId`: The ID of an administrator to filter payments for.
   * 	- `pageable`: A `Pageable` object used to page through a large result set.
   * 
   * @param pageable pagination information for the retrieved payments, allowing for
   * efficient retrieval of a subset of the payments in the database.
   * 
   * 	- `pageable`: A Pageable object that contains information about the page of results
   * to be retrieved. It has attributes such as the number of results per page, the
   * total number of results, and the current page number.
   * 
   * @returns a page of Payment objects that match the specified admin ID, excluding
   * certain fields.
   * 
   * 	- `Page<Payment>`: This is a pageable collection of Payment objects that have
   * been filtered based on the admin ID provided in the function call.
   * 	- `Payment`: This is the entity class for Payment, which represents a payment
   * made by an administrator.
   * 	- `adminId`: This is the ID of the administrator who made the payments.
   * 	- `pageable`: This is an object that provides the ability to page through the
   * collection of Payment objects, allowing for efficient retrieval of specific pages
   * of results.
   */
  @Override
  public Page<Payment> getPaymentsByAdmin(String adminId, Pageable pageable) {
    ExampleMatcher ignoringMatcher = ExampleMatcher.matchingAll()
        .withMatcher("adminId",
            ExampleMatcher.GenericPropertyMatchers.startsWith().ignoreCase())
        .withIgnorePaths("paymentId", "charge", "type", "description", "recurring", "dueDate",
            "memberId");

    Example<Payment> paymentExample =
        Example.of(
            new Payment(null, null, null, null, false, null, new User().withUserId(adminId), null),
            ignoringMatcher);

    return paymentRepository.findAll(paymentExample, pageable);
  }

  /**
   * creates a payment object and saves it in the repository, returning the converted
   * PaymentDto object.
   * 
   * @param request PaymentDto object containing the information necessary to create a
   * new payment in the system, which is then mapped to a corresponding `Payment` object
   * and saved in the repository.
   * 
   * 	- `paymentMapper`: A mapper that converts a `PaymentDto` object to a `Payment`
   * object and vice versa.
   * 
   * @returns a `PaymentDto` object representing the created payment entity.
   * 
   * 	- `paymentMapper.paymentToPaymentDto(payment)`: This method converts the `Payment`
   * object to a `PaymentDto` object, which is the output of the function. The `PaymentDto`
   * object contains the same data as the original `Payment` object, but in a more
   * convenient form for external use cases.
   * 	- `adminRepository.save(payment.getAdmin())`: This method saves the `Admin` object
   * associated with the `Payment` object to the database. The `Admin` object contains
   * information about the user who made the payment.
   * 	- `paymentRepository.save(payment)`: This method saves the `Payment` object to
   * the database. The `Payment` object contains information about the payment itself,
   * such as the amount and date.
   */
  private PaymentDto createPaymentInRepository(PaymentDto request) {
    Payment payment = paymentMapper.paymentDtoToPayment(request);

    adminRepository.save(payment.getAdmin());
    paymentRepository.save(payment);

    return paymentMapper.paymentToPaymentDto(payment);
  }

  /**
   * generates a unique payment ID for a `PaymentDto` object using the `UUID` class and
   * returns it as a string.
   * 
   * @param request PaymentDto object that contains the details of the payment request,
   * and its setter method updates the payment ID field of the object with a randomly
   * generated UUID string.
   * 
   * 	- `request`: A PaymentDto object, which contains various attributes related to
   * payment information.
   */
  private void generatePaymentId(PaymentDto request) {
    request.setPaymentId(UUID.randomUUID().toString());
  }
}
